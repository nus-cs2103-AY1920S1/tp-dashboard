[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d ELISA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T10-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-T10-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Extremely Loud and Intelligent Student Assistant (ELISA) is for students who *want to have an intelligent companion that keeps track of tasks and give friendly reminders on when to take breaks*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* More importantly, ELISA is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ELISA can get your tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Built on AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 1,
      "mannggoo": 4,
      "-": 30
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "mainClassName \u003d \u0027seedu.elisa.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    archiveName \u003d \u0027ELISA.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "blimyj": 5,
      "sianghwee": 1,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA _(Exceptionally Loud and Intelligent Student Assistant)_ - Was developed by the https://github.com/AY1920S1-CS2103T-T10-3[T10-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA is a student assistant made for college students who need constant reminders to complete their daily tasks. More importantly, ELISA is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "We are a student team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Bryan Lim"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::blimyj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/blimyj[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Commons"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Hema"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::lrchema.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "{empty}[http://github.com/lrchema[github]] [\u003c\u003clrchema#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Functionality"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lim Yu Hui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::mannggoo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/mannggoo[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Low Cheng Yi"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::Icesiolz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/Icesiolz[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Ng Siang Hwee"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::sianghwee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "{empty}[http://github.com/sianghwee[github]] [\u003c\u003csianghwee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 19,
      "sianghwee": 1,
      "-": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T10-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* *Email us* : You can also reach us at `holmescordelia8 [at] gmail.com`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d ELISA - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "Icesiolz": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d ELISA - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ":icons-cdn: https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T10-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "By: `AY1920S1-CS2103T-T10-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Item` : Used by classes to represent a task, event, reminder or any combination of the three."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Task` : Used by classes to store, access and modify details regarding tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Events` : Used by classes to store, access and modify details regarding events."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Reminders` : Used by classes to store, access and modify details regarding reminders."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::LogicComponentUML.png[]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::LogicComponentUML.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  `Logic` uses the `ElisaParser` class to parse the user command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  The command execution can affect the `ItemModel` (e.g. adding a person)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  More instructions for the `Ui` can be given through implementing `ScrollCommand`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//tag::model[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::ModelClassDiagram.png[500,500]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/elisa/model/ItemModel.java[`ItemModel.java`]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The `ItemModel`,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* contains the `ItemStorage` that stores all the data for ELISA."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* exposes four observable lists that can be viewed by the `Ui` and will cause an update in the `Ui` when it is updated."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The original implementation was to have one single observable list and modifying it whenever the view changes. We decided against it as we believe that this will result in O(n) time complexity for switching the different views as we need to iterate through all the items to find the relevant items."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Using the four visualization list, we only need to change the pointer when we want to change the view of the viewing panel making it an O(1) time complexity solution. However, this makes it more complicated to maintain the different lists."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//end::model[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* can save the Item Storage data in json format and read it back."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Game feature"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "This section talks about how the `game` function is implemented. This feature aims to encourage users to take a break by playing the traditional Nokia (phone) game: Snake."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The game screen appears after the user enters the command `game` into the command box. A separate scene handled by a separate thread is created to run the game so that Elisa\u0027s scenes and threads are not overloaded. The following activity diagram shows how the game screen is launched."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Activity diagram for game mode"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::GameActivityDiagram.png[500, 600]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings of the Game"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Given below is an example usage scenario of how add behaves at each step:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cLOGIC\u003e +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 1. The user enters the command \"game\". +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 2. The LogicManager creates an ElisaParser to parse the user input. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 3. ElisaParser creates a GameCommandParser to parse the user input. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 4. LogicManager will execute the GameCommand. GameCommand will create a GameCommandResult. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 5. MainWindow will call its own method startgame()."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cGAME\u003e +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 6. startgame() calls the method resetgame(), which creates a Grid and GameLoop. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 7. startgame() calls the method gameCheck on the canvas to check the keys that are pressed during the game. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 8. startgame() creates a new scene and sets primaryStage\u0027s scene to this new scene. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Step 9. startgame() creates a new thread to run the game. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The figure below shows the sequence diagram on what happens after the startgame() method is called."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Sequence Diagram for game creation"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::CreatingGameSequenceDiagram.png[500, 600]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Game considerations"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The considerations for the choice of game is shown below:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|Alternatives: |Pros: |Cons:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|1. Minesweeper | It is a well-known popular desktop game. | It is difficult to understand the implied rules to this game and this game requires a long time to complete."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|2. Sudoku | It is a well-known popular pen-and-paper game. | It is difficult to understand the implied rules to this game and this game requires a long time to complete."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|3. *(Current)* Snake | It is a well-known popular Nokia (phone) game. The rules are simple to understand. The duration for each game is short. | It is addictive when users try to break their high score."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The design considerations for the placement of the game is shown below:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|Alternatives: |Pros: |Cons:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|1. Placing the game in one of the tabs (beside the Calendar) such that `show g` will switch tab to the game tab. | Users are able to see the chatbox while in the game. | Requires users to use the mouse (away from CLI) to switch between typing in the command box and hitting the keys on the keyboard."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|2. *(Current)* Creating a separate scene such that the original scene (with ELISA) is hidden when game mode is entered. | Allows users to hit the keys on the keyboard without typing into the command box. | Users are unable to see the chatbox from Elisa."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::undobyreverse[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d [Implemented] Undo/Redo Feature"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation Logic"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The undo function uses the revert command method without using states and history, unlike the proposed method."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lrchema"
        },
        "content": "This is because an issue was encountered with referencing lists and firing reminders multiple times when the state history method was used."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lrchema"
        },
        "content": "In this implementation, the commands that can be undone; that is, all the commands except `UndoCommand`, `ExitCommand`,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lrchema"
        },
        "content": "`UpCommand` and `DownCommand` now extend from an abstract class `UndoableCommand`, which is a subclass of Command."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Subclasses of `UndoableCommand` must implement a method `reverse(ItemModel model)`, which should do the exact opposite"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lrchema"
        },
        "content": "of the `execute(ItemModel model)` in that Command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The command execution history is stored in a stack, which is maintained in `ElisaCommandHistory`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The activity diagram below shows the flow of the undo command."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::UndoActivity.png[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Below is a possible usage scenario and the app behaviour."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 1. The user executes `task eat`. A task with description \"eat\" is added and then the command is pushed into the commands stack."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::UndoStackStep1.png[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 2. The user realises that adding the task was a mistake, and decides to undo by entering `undo` into ELISA. The `undo` command"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lrchema"
        },
        "content": "will pop the `AddTaskCommand` from the stack and reverse the effects of that command, in this case by deleting the task \"eat\" from the `TaskList`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::UndoStackStep2.png[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 3. After successful execution of the `UndoCommand` a confirmation message is displayed in the chat box."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Of course, the undo feature has its counterpart, the redo command. The commands to be redone are stored in an additional stack within `ElisaCommandHistory`,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lrchema"
        },
        "content": "and when the redo is done, it executes the command again, which reapplies the most recent change. Every time a new `UndoableCommand` is executed, the redo stack is cleared."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lrchema"
        },
        "content": "That is, the redo stack is only non empty when the latest executed `Command`(s) is/are `UndoCommand`(s)."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The activity diagram below shows the flow of the redo command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::RedoActivity.png[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// end::undobyreverse[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "// tag::priority[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Priority Mode"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The priority mode is used to aid the user in focusing on the most pressing task that they have especially when they have many tasks in their list. As priority mode is only for clearing of tasks, the priority mode can only be activated at the task pane of the application."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The priority mode is mainly controlled in the ```ItemModelManager``` and the following are the methods it uses within the ```ItemModelManager```:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#togglePriorityMode()``` - Toggle the priority mode depending on whether it is on or off."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#toggleOnPriorityMode()``` - Helper function to toggle on the priority mode."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#toggleOffPriorityMode()``` - Helper function to toggle off the priority mode."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "There are two variants to the priority mode, a normal priority mode and a focus mode. The focus mode is more restrictive than the normal priority mode, preventing the user from doing any operations that are not relevant to the task list, such as adding a new event. This is currently implemented by having a separate `Parser` when ELISA is in focus mode. (Refer to \u003c\u003cPriority-Design-Consideration\u003e\u003e for more details)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "There are two ways to trigger priority mode, a normal priority mode that is controlled fully by the user and a scheduled priority mode that is triggered by the user but is scheduled to turn off after a specific amount of time. In addition to the above three methods, the scheduled priority mode also uses the following method:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#startTimer(LocalDateTime)``` - Starts a timer to turn off the priority mode."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Example run of priority mode"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "In this section, we will show a run of the priority mode and a overview of the mechanism at each step. In particular, we will be showing how the ```ScheduledPriorityCommand``` works as it has a more complicated implementation than the normal ```PriorityCommand```."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". The user opens his Task panel and types in `priority 30.min.later`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". The incomplete tasks are added to a ```PriorityQueue``` where they are ranked by their priority."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Once all the items are added into the ```PriorityQueue```, ELISA will peek the first task from the queue and present it to the user."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". The user can type ```done 1``` when he is done with the current task to retrieve the next task. This carries on until there is no more undone task left to do in the ```PriorityQueue```. This is shown in the activity diagram below."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Activity diagram for priority mode"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityModeActivityDiagram.png[300, 300]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[start\u003d5]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". ELISA will automatically disable the priority mode after 30 minutes and show *all* the task that the user have in his task list currently."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Internal working of the command"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The figure below shows the sequence diagram on what happens from a simple execution of the ```priority 30.min.later``` command. We will go through the internal mechanism of the execution of the ```ScheduledPriorityCommand```."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Sequence diagram for priority mode"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityMode.png[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". When the user types in the command, the ```LogicManager``` takes in the command as a string and pass it to the ```ELISAParser```"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". The ```ELISAParser``` parses the string and determine whether the command is that of a normal ```PriorityCommand``` or a ```ScheduledPriorityCommand```. In this case,  a new ```ScheduledPriorityCommand``` is created and is passed back to the ```LogicManager```."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The following steps (except step 4) are also applicable to ```PriorityCommand```."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[start\u003d3]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Within the ```LogicManager```, the ```ScheduledPriorityCommand#execute()``` method is called and the command is executed."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". The ```ScheduledPriorityCommand``` calls the ```ItemModel#scheduleOffPriorityMethod()``` which creates a new ```Timer``` object and a new ```TimerTask``` object. The ```TimerTask``` object will be scheduled to fire off at a specific time, which in this case is 30 minutes later (as defined by the user)."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". The ```SchedulePriorityCommand``` then calls ```ItemModel#togglePriorityMode()``` which calls the private method ```ItemModel#toggleOnPriorityMode()``` (since the current state of the priority mode is false)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". This creates a new ```TaskList``` which will have the task with the highest priority added to it. This ```TaskList``` will be displayed to the user."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". A ```CommandResult``` is passed to the ```ScheduledPriorityCommand``` and then back to the ```LogicManager``` to be passed into the ```Ui```, informing the user that the priority mode is activate."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "A normal ```PriorityCommand``` will end at this point and will only be deactivated by the user\u0027s input of `priority` again."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Sequence diagram for the scheduled turning off of priority mode"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityMode2.png[300, 300]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[start\u003d8]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". As the ```Timer``` within the ```ItemModelManager``` is still running on a separate thread, it will trigger the ```TimerTask#run()``` when the user defined time is reached."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". The ```TimerTask``` will call ```ItemModelManager#toggleOffPriorityMode()``` which will cancel the ```Timer``` and destroy the ```Timer```. This is to ensure proper cleanup of the thread."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". All the items are added back into the ```TaskList``` and shown to the user. The priority mode is deactivated."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[[Priority-Design-Consideration]]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Aspect: How to restrict commands for focus mode*"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Alternative 1: Storing a boolean within the ``ItemModelManager`` to check if the application is in focus mode or normal mode. Commands that are not allowed to be called in focus mode will check against this boolean to determine if the command is allowed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Pros |Cons"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|This implementation will contain the changes within the class of the ```Command``` itself and will ensure that they do not interfere with each other. This will make it easier to maintain the code."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|This implementation is not scalable as each new ```Command``` that is added will need to be checked to see if they are allowed in focus mode. There is also the additional overhead of checking the state of the ```ItemModelManager``` at every call of ```Command#execute()```."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Alternative 2 (Current implementation): Create a new ```FocusElisaParser``` that extends from the current ```ElisaParser``` but prevent the parsing of commands that are not allowed in focus mode."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Pros |Cons"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|This implementation stops the creation of the ```Command``` at the ```Parser``` level which will reduce the computational cost to the application."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|There might be difficulty in maintaining the ```Parser#parse()``` method of the two ```Parser```."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Both methods are not scalable in the long run, but at this moment, alternative 2 is favoured as it prevents the command from even being parsed or created, which saves the computing time. At the same time, it is easier to maintain as one only needs to edit the ```Parser#parse()``` method instead of having an if-else loop in all the command that are banned."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Aspect: How to turn off the priority mode after a fixed time*"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Alternative 1: Storing the timer within the ```ScheduledPriorityCommand```."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Pros |Cons"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Adheres to the SLAP principle with each class having it\u0027s own implementation of the ```Command#execute(ItemModel)```. It is easier to maintain the code and prevents overloading the ```ItemModelManager```."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|There is no way to end the schedule priority mode prematurely as the timer is kept within the command and so cannot be referenced after the execution of the command."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Alternative 2 (Current implementation): Storing the timer within the ```ItemModelManager```."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Pros|Cons"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|The timer can be referenced from the ```ItemModelManager``` and so it can be cancelled prematurely if the user chooses to do so."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|This implementation will clutter the ```ItemModelManager``` further and make it harder for maintaining the code."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Alternative 2 was chosen as we believe that the ability to cancel a scheduled priority mode prematurely is more important than the maintainability of the code at the moment."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Possible extension"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "At the moment, the user is not able to keep track of the amount of time that he has before the schedule priority mode is over. This can be improved by including a countdown timer in the Ui when the user toggles on the scheduled priority mode."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "// end::priority[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Add Task/Event feature"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Task, Events and Reminders are all Items and can be added using the *same* command. Adding of Items is facilitated by ItemModel#add(Item). +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "A Task with a deadline flag `-d` will be considered an Event. A Task with a reminder flag `-r` will be considered a Reminder. +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The following activity diagram shows the how a task can be added, depending on the flags present:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Activity Diagram of adding a Task"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddTaskActivity.png[200, 600]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This shows how we can easily add Task, Event and Reminder with a _single_ command."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "However, in this section, we will only show how Task and Event is added. Adding of Reminders is shown in a separate section as it includes other steps."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings of the command"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Given below is an example usage scenario of how add behaves at each step: +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 1. The user enters the command `\"task shower -d 1.hour.later\"`. +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 2. The LogicManager creates an ELISAParser to parse the user input. +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 3. ELISAParser creates a AddTaskCommandParser which parses the input and returns an AddCommand. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 4. LogicManager will execute the AddCommand. AddCommand will then invoke `ItemModel#add(Item)`, which adds Task to its TaskList and Event to its EventList. +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 5. AddCommand will also trigger a change in view by calling `ItemModel#setVisualList(taskList)`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 6. Upon the successful execution of AddCommand, a CommandResult is returned to the LogicManager, which will then be returned to the Ui to render the appropriate view."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The figures below shows the sequence diagram on what happens from a simple execution of `task shower -d 1.min.later` user command: +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Call execute in LogicManager to create an AddTaskCommand"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddCommandPart_1.png[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This diagram shows how `execute` is carried out in the `Logic` component."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The following diagram shows how the same command is continued onto the `Model` component:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".LogicManager executes the AddTaskCommand and returns CommandResult"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddCommandPart_2.png[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This shows how `execute(model)` affects the `Model` component. It then returns a `CommandResult` r, which is the result of calling LogicManager#execute(\"task shower -d 1.hour.later\")."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The design considerations for the classes are shown below:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Alternatives: |Pros: |Cons:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|1. Placing all fields into an Item object and retrieving the specific fields when needed. | Easy to implement. Reduce dependencies between classes as everything is in one class. Editing can be done all in one object.| Does not separate out the different functionalities of Task, Event and Reminder."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|2. Having separate classes for Task, Event, Reminder | Reduce dependencies as well as having functionalities separated. | Some attributes and methods overlap. Repetition of code for same functionality. Have to add all three objects individually. Editing of an item would require searching, obtaining and individually editing all 3 objects."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|3. *(Current)* Having a general Item class which comprise of `Optional\u003c\u003e` fields Task, Event, Reminder | Similar fields such as description and priority can be placed in Item. This makes adding an Item more convenient. Related task/event/reminder can have access to each other. | Increase coupling and dependency amongst Task, Event, Reminder classes."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "As of now, these are the considered designs and the current design seems to work well for our purpose. However, there could be better designs which are unexplored that could mitigate our cons and we welcome them. +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This is end of the section of adding a Task and Event. As mentioned above, adding of Reminder will be shown in a separate section due it having extra features. Do look out for it if you\u0027re interested."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Rescheduling of recurring Events automatically"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This section talks about how the `autoReschedule` function is implemented. This feature aims to provide users with greater convenience when scheduling events that occur periodically (eg. weekly deadlines, monthly appointments)."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To reschedule a task, we need a deadline as we need to be able to calculate the next date. Recall that any Task with a deadline is considered an Event. As such, *only Events can be rescheduled.*"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To automatically reschedule an Event, when creating the Event, include the `-auto` flag along with its reschedule period (eg `-auto day` for daily rescheduling) +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The accepted parameters for `-auto` is `day`, `week`, `month` and the format of `10.min.later`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The following diagram shows the process of adding an Event with -auto flag:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Activity diagram of adding an Event with -auto flag"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AutoRescheduleActivity.png[100, 400]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "In the diagram, when we add the Event initially, we would check the start time of the Event and update it accordingly."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "However, this is not the only place where rescheduling occurs."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "*3 places where rescheduling can occur:* +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ". When the event is created, as shown in the diagram above."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ". While the app is running, the Event\u0027s start time will be continuously updated when it has passed. +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This is done using `Timer` and `TimerTask`, using `Timer#scheduleAtFixedRate()`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ". When the app is started and Events are loaded from the storage. The stored Event time might already be over, as such the time has to be updated to the latest upcoming one."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To illustrate how they work, first we need to know what classes are involved before we can understand the sequence of actions carried out. +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The classes involved in the above rescheduling are: +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `AutoReschedulePeriod` -- Represents the period of every reschedule (eg day/week/month)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `RescheduleTask` -- Represents the action to perform when rescheduling its associated event."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `AutoRescheduleManager` -- Manages all the rescheduling tasks. There is only one of such manager."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To better understand its underlying structure, we can look at the class diagram below:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Class Diagram of classes involved in AutoReschedule function"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AutoRescheduleClassDiagram.png[100, 500]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings of the command"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Now we are ready to look at the sequence of actions. Given below is an example usage scenario of how add behaves at each step: +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 1. The user enters the command `event CS2103T Quiz -d 23/09/2019 2359 -auto week`. +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 2. The Event is created, following the sequence of steps in the section _Adding Task/Event_. However there are now some extra steps from Step 3 onwards that occur concurrently from the object creation of Event. +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 3a. The presence of the `-auto week` creates an AutoReschedulePeriod, which is stored in the Event created. This can be seen in the Class Diagram above. +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 3b. If the start time of this Event is already over, the Event\u0027s start time will be modified to show the next start time, using this Event\u0027s AutoReschedulePeriod."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 4. When `LogicManager#execute(model)` is called, the presence of AutoReschedulePeriod in the Event triggers the creation of a RescheduleTask, which represents the task of rescheduling this Event. +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 5. This RescheduleTask is added to an AutoRescheduleManager, which manages all RescheduleTasks. +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 6. When the start time of this Event has passed, AutoRescheduleManager will call `RescheduleTask#run()`, and this updates the Event start time, which will be reflected in the Ui. +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The following diagrams show how the command `event Quiz -d 10.hour.later -auto week` is executed from the Logic component."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The first diagram shows the adding of an Event, which may appear familiar as it has a sequence similar to the adding of task in \u003c\u003cAdd Task/Event feature\u003e\u003e. However, there are some minor differences due to the presence of `-auto` which should be noted."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Call execute in LogicManager and create an AddEventCommand"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AutoRescheduleSequence_1.png[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "As mentioned, the key points to take note of in the diagram above is `Event#setAutoReschedule(true)` and `Event#setReschedulePeriod(period)`. +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The significance of these methods will be shown in the continuing diagram below:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".LogicManager executing AddEventCommand and create task for AutoRescheduleManager"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AutoRescheduleSequence_2.png[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "From the above diagram, we can see that the presence of `AutoReschedulePeriod` in Event results in the creation of `RescheduleTask` which would be queued into the Timer managed by `AutoRescheduleManager`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The design considerations for the classes are shown below:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Alternatives: |Pros: |Cons:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Creating a AutoRescheduleManager for every RescheduleTask | Easy for the Timer in AutoRescheduleManager to keep track of its TimerTask. | There could potentially be many Timer threads."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|*(Current)* Singleton pattern for AutoRescheduleManager |Ensure that only one instance can be instantiated as there should only be one manager for all the RescheduleTask. If there are multiple managers, it would be hard to keep track of all of them and it would be difficult to coordinate all the tasks. | Difficult to create tests for AutoResheduleManager. Could have many hidden dependencies, which makes code harder to maintain."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* has a need to manage a large number of tasks"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* needs reminders to take breaks or move on to finish all their work"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* prefers to be more organized with their time and tasks"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* prefer desktop apps over other types of apps"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Value proposition*: manage time and tasks more efficiently than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::userstories[]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[cols\u003d\"20%,\u003c20%,\u003c25%,\u003c35%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |add a new task | record tasks that need to be done \u0027some day\u0027"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |mark a task as done | keep track of my remaining tasks"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |delete a task |remove tasks that I no longer need"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |student |add deadline to a task |remember my task deadlines"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |find upcoming tasks |decide what needs to be done"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |find a task by description |find only the tasks that are relevant to me at that point in time"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |new user |view more information about a command |learn how to use various commands"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |forgetful student |be reminded of deadlines |remember to complete them before they are due"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |type my commands in the text |use the app without needing the mouse"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |use the undo function |reverse any changes I made by mistake"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* *` |busy student |see my reminders as notifications|be reminded of them even in other applications"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* *` |user with many tasks |sort tasks by priority |identify which tasks require my immediate attention"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |student |turn on priority mode |focus on only one pressing issue at a time"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |have a software that saves after every action |will not lose information even if I close the program by accident"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |look at a summary of all deadlines in the calendar |see when I am free"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |edit the date of a deadline |fix my mistakes if I type the wrong command"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`*` |stressed student |ask ELISA to tell a joke |feel less stressed when my assistant has a sense of humour"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`*` |user |colour code my calendar events |easily categorise and differentiate between them"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// end::userstories[]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "(For all use cases below, the *System* is `ELISA` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 001: Marking a task as done"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the task list to the user."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User marks the task as done by using the index of the task."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA updates the task list."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "5. ELISA shows the updated task list to the user."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 2a. The task list is empty."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 3a1. ELISA shows an error message."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 002: Adding a task"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User creates a new task with a description."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA informs the user that the task has been added."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1a. User can add deadline."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1a1. ELISA informs the user that a deadline has been added to that task."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1b. User can add a reminder date."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1b1. ELISA informs the user that a reminder has been added to that task."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1c. User enters an empty description."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1c1. ELISA informs the user that the description cannot be empty."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1c2. User enters a non-empty description"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* a. At any time, User can view the task from the task list or the calendar view."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* b. At any time, User can add a deadline to the task"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* c. At any time, User can add a reminder to the task"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 003: Deleting a task"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the task list."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User request to delete a task based on its index."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA deletes the task from the task list."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "5. ELISA shows the updated task list."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 2a. The task list is empty."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 3a1. ELISA shows an error message."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 004: Find upcoming reminders."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the reminder list."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the reminder list."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User enters command to sort reminders by date and time."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA shows the updated list of reminders sorted by date and time."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::usecaselrchema[]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 005: Search for a task by its description"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA shows the reminder list."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. User enters command to find all matching tasks with the given search term(s)"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "lrchema"
        },
        "content": "4. ELISA shows a list of tasks with descriptions matching the search term(s)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 4a. There are no matching tasks"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 4a1. ELISA shows that there are 0 items listed"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 006: Undo the last command"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the undo command."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA reverts the last executed command."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. ELISA displays a confirmation message."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 2a. There are no commands to be undone"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 2a1. ELISA displays an error message."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 007: Using Priority Mode"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the command to enter priority mode."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA hides all tasks except the one with the highest priority."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. User enters command to set that task as done once they finish it."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lrchema"
        },
        "content": "4. ELISA shows the next highest priority task."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 1a. User is not viewing the task list"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 1a1. ELISA displays an error message"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// end::usecaselrchema[]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Adding a task"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Adding a task while on the task list panel"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisites: Switch to the task list panel using the `show T` command."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `task testcase` +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: A task with the description \"testcase\" is added to the task list panel. The priority of the task is medium (the default value)."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `task testcase 2 -p high` +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: A task with the description \"testcase 2\" and of high priority is added to the task list panel."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Adding a task while not on the task list panel"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisites: Switch to the event list panel using the `show E` command."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `task testcase 3 -p low -d 1.min.later` +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will automatically switch to the task list panel and a new task with the description \"testcase 3\" and priority low should be added to the task list panel."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Adding a task that already exists"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisites: The task list panel must already be populated and a task on the list is already know."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `task testcase` (in this case, we are using one of the earlier test case) +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: Elisa will prompt you that the task already exist in the list and cannot be added."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. As an additional test case, you can mark a current task as done and then try adding that task into ELISA again. ELISA will still flag it as a repeated object despite the different state of completeness."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Even though this is for task, the same tests can be used for testing events and reminders."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisites: Switch to the task list panel using the `show T` command. There should be multiple tasks in the list"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   Expected: First task is deleted from the list. Details of the deleted task will show in the result display."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   Expected: No person is deleted. Error details shown in the result display."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is greater than the size of the list), `delete y` (where y is a negative index) +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Even though this is for task, the same tests can be used for testing events and reminders."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Editing a task"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Editing a task while all tasks are listed"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisite: Switch to the task list panel using the `show T` command. There should be at least one task in the list"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `edit 1 -p high` +"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: The priority of the first task is changed to high (if the original priority of the task is already high, try other priority)."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `edit 1 -desc testcase` +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: The description of the first task should change to \"testcase\"."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `edit 1 -d 1.min.later` +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: A new event should be created for the task. You can verify by switching to the event panel or opening the task using the `open 1` command."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `edit 1 -p high -d 2.min.later` +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: A new event should be created for the task (if it does not already exist) or the time of the event will be updated. The priority of the task will also change."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: Try different variation of the edit command to ensure that it works."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Editing a task to another task that is in the list"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisite: Switch to the task list panel using the `show T` command. There should be at least two task in the list."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: Attempt to edit the first task such that it is the same as the second task. For example, if the second task has a description \"testcase\" and a priority of high, run `edit 1 -desc testcase -p high`. +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will feedback that the task already exists and will prevent you from editing."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Editing a task to remove the task"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisite: Switch to the task list panel using the `show T` command. There should be at least one task in the list."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `edit 1 --tk` when the task has an event and/or reminder. +"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will remove the task from the task list but the event and/or reminder will still be viewable in the event/reminder panel."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `edit 1 --tk` when the task has no event and no reminder."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will prompt that you cannot edit an item such that it has no task, event or reminder and the task will not be removed from the task list."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Even though this is for task, the same tests can be used for testing events and reminders."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Game mode testing"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Entering game mode (easy)"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::SnakeGame.PNG[500,600]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".. Test case: `game` +"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Expected: Enters easy mode of game (Refer to figure above)"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".. Test case: `game e` +"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Expected: Same as above."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".. Test case: `game EASY`"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Expected: Same as above."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Entering game mode (hard)"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::snakegamehard.PNG[500,600]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".. Test case: `game H` +"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Expected: Enters hard mode of game (Refer to figure above)"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".. Test case: `game hard` +"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Expected: Same as above."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Change theme testing"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ". Changing theme of ELISA"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".. Prerequisites: You must be in a different theme from the theme you are switching to before you can see the change."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".. Test case: `theme white`"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Expected: Change ELISA\u0027s theme to white."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Priority mode testing"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Toggling on priority mode"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisites: Switch to the task list panel using the `show T` command. There should be at least 1 incomplete task in the list and priority mode should be disabled at the moment."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `priority` +"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: The ELISA icon will turn red and only one task will be shown on the task list panel. You can try switching a panel (`show E`) or adding an event to make sure it works."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `priority -f` +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: Same as above, except this time switching of panel or adding an event is not allowed."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `priority 1.min.later -f` +"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: Same as above, except this time priority mode will deactivate after 1 minute."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `priority -d`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: Flag not recognized and ELISA will reject the command."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Toggling off priority mode"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisites: Switch to the task list panel using the `show T` command. Priority mode is already activated."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `priority` +"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: Deactivate priority mode and show you all your tasks."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `priority 1.min.later`, `priority -f` +"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: Same as above."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Manipulate list while in priority mode"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Prerequisites: Switch to the task list panel using the `show T` command. Priority mode is already activated."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `done 1` +"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will mark the task as done and generate the next task. If there is no next task, ELISA will automatically take you out of priority mode."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will delete the task and generate the next task. If there is no next task, ELISA will automatically take you out of priority mode."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `edit 1 -p low` (most effective for a task list with more than 1 task and the current task priority is high/medium) +"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will edit the priority of the current task to low (any other priority can be used). A new task with a higher priority will be generated."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `undo` (used after one of the above has taken place) +"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will reverse the previous process and the old task will be generated again."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Test case: `redo` (used after an undo command) +"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Expected: ELISA will reverse the undo command and a new task is generated."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Other test cases: You can try doing all of these commands in focus mode `priority -f` to ensure that they work. When in focus mode, you can try some of the banned command like `show`, `game` etc to make sure that it does not work."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Checking that ELISA saves the data properly"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. Copy `ELISA.jar` to a new directory and open it. This is to ensure that there is no old data file. An empty ELISA will be displayed. Type some sample data into ELISA and you will notice that a data file has been created at the path `data/itemstorage.json`. You can open the file to see that the data has been added."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. To simulate a missing data file, start up ELISA. ELISA will create a data file for you as `data/itemstorage.json` (this is the default name of the storage file). Close ELISA and delete the itemstorage.json file. Re-open ELISA and ELISA will start with a new and empty data file. Verify it at `data/itemstorage.json`."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".. To simulated a corrupted data file, start up ELISA. Type some test input into ELISA. Close ELISA. Open the `data/itemstorage.json` file and edit some of the fields there. Open ELISA again. ELISA will realize that the data is corrupted and will generate a new data file for you."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "blimyj": 8,
      "lrchema": 120,
      "sianghwee": 328,
      "mannggoo": 125,
      "-": 383,
      "Icesiolz": 77
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d ELISA - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "Icesiolz": 1
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d ELISA - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "Icesiolz": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ":repoURL: https://github.com/ay1920s1-cs2103t-t10-3/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d ELISA - User Guide"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_title.png[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "By: `AY1920S1-CS2103T-T10-3`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Since: `Sep 2019`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Licence: `NUS`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_introduction.png[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Hello, I am an Extremely Loud and Intelligent Student Assistant (ELISA)!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "I am here to be *your intelligent companion that keeps track of your tasks and remind you to take breaks*."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Although I am *optimized for those who prefer to work with a Command Line Interface* (CLI), I also have a Graphical User Interface (GUI). If you can type fast, I can get your tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Enjoy!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_quickstart.png[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Have you installed Java `11` ?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": ".  Find me, `ELISA.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Double-click me to start the app. See you in a few seconds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Main window of ELISA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::MainWindow.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Tell me what to do in the command box!"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Want to know more about me? A detailed explanation of me is at \u003c\u003cFeatures\u003e\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d Legend"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_legend.png[]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Now we\u0027ll be presenting what you\u0027ve been waiting for... our features! +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "But hold on, to fully appreciate our features, you might want to go through some of the command guidelines first. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "These are some mistakes that our users(and even us) would make initially, and they can be really unpleasant, so we hope that you won\u0027t have to go though them."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For your viewing pleasure, we\u0027ve collated it nicely into a quick starter pack below, let\u0027s start!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_features.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This table shows the basic rules for the formatting the input:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Command Guidelines"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Guidelines: |Description: |Correct usage:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Words in UPPER_CASE are the parameters to be supplied by the user | If given `task DESCRIPTION` description is to be provided. |`task shower`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|All flags *MUST* have a _space_ after them | `task shower -d10.min.later` is *incorrect*. It should be `task shower -d 10.min.later` | `task shower -d 10.min.later`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Flags in square brackets are optional | If given `task DESCRIPTION [-t TAG]` tag is optional a| `task shower` +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " `task shower -t clean`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Flags can be in any order, given that they are accepted by the command | If given `task DESCRIPTION [-d DATETIME] [-r REMINDER]` -r can come before -d a| `task shower -d 1.hour.later -r 30.min.later` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " `task shower -r 30.min.later -d 1.hour.later`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flags must not be repeated in the same input, unless it is a tag flag | `task shower -p high -p low` is *incorrect* as -p appears twice. However, `task bathe -t fresh -t hygiene` is accepted| `task shower -p high`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|For the parser of mm.min.later, hh.hour.later, dd.day.later, the maximum allowed is 100 | `101.min.later` is not accepted, however `100.min.later` or `99.day.later` are both accepted. | `task study -d 99.day.later`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This is a quick summary of all our flags. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For *first time* users: +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* You can choose to skip through this first as it may seem overwhelming now."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* But as you go along the different sections and see new flags, it might be useful to refer to this as it can help you understand it\u0027s accepted parameters."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For *more experienced* users: +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* This can be your best buddy! We understand that sometimes it can be troublesome to look through the entire guide just to find the flag you want."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Flags Overview"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[cols\u003d\"1,2,3,2,2\"]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flag: |Parameter: |Parameter Format: |Possible Parameters: | Example Usage:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-d | DATETIME | yyyy-MM-ddTHHmm or dd/MM/yyyy HHmm or mm.min.later or HH.hour.later or dd.day.later |2019-09-25T19:34 or 25/09/2019 1934 or 10.min.later| -d 25/09/2019 1934"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-r | REMINDER |yyyy-MM-ddTHHmm or dd/MM/yyyy HHmm or mm.min.later or HH.hour.later or dd.day.later |2019-09-25T19:34 or 25/09/2019 1934 or 10.min.later| -r 25/09/2019 1934"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-p | PRIORITY |high, medium, low| HIGH, medium, LOW | -p high"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-t | TAG |alphanumeric only | happy123 | -t happy123"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-desc | DESCRIPTION | alphanumeric and all symbols *except* \"-\" | drink 5 litres of water | -desc drink water!"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-auto| PERIOD | day or month or week or mm.min.later or HH.hour.later or dd.day.later | day or week or month or 10.min.later | -auto 10.min.later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--tk | _none_ | _none_ | _none_ | --tk"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--e | _none_ | _none_ | _none_ | --e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--r | _none_ | _none_ | _none_ | --r"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "There are three other flags that do not take in any parameters and are only used for the edit command. They are listed below:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Additional flags"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[cols\u003d\"1,9\"]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Flag:| Meaning:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|--tk | Used to delete a task attached to an item"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|--e | Used to delete an event attached to an item"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|--r | Used to delete a reminder attached to an item"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Not all tags work for every command. Please check the specific command for more details."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Here are the icons that will be used in the app:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image:Completed.PNG[Done, title\u003d\"Done\"] shows that you\u0027ve completed this task. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image:Uncompleted.PNG[Not done, title\u003d\"Not done\"] shows that you have yet to complete this task. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image:EventIcon.PNG[Event, title\u003d\"Event\"] shows that this is an Event with the date shown in its eyes. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "All time dependent elements such as deadline, reminder and calendar time are dependent on the *system time*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "If you face any issues, please check the \u003c\u003cAdditional Notes\u003e\u003e. If it is not mentioned there, then feel free to bring it up to us!"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Now we are ready to jump into the features itself!"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d CLI Features"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a task: `task`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds a task to the task list +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `task DESCRIPTION [-d DATETIME] [-r REMINDER] [-p PRIORITY] [-t TAG]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To create a task quickly, just include the description as Task can have no flags (ie `task shower`)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins -r 5.hour.later`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins -d 10.hour.later -p low -t healthy`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an event: `event`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds an event to events list and calendar +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `event DESCRIPTION -d DATETIME [-r REMINDER] [-p PRIORITY] [-t TAG]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 20/09/2019 1800`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 20/09/2019 1800 -r 19/09/2019 1800`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 3.day.later -r 2.day.later -p high -t friend`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blimyj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blimyj"
        },
        "content": "It is currently not possible to set a reminder for events with an autoreschedule flag. We intend to include this in v2.0 ."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a reminder: `reminder`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds a reminder to the reminder list +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `reminder DESCRIPTION -r REMINDER [-t TAG]`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `reminder John’s Birthday -r 19/09/2019 1400`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John’s Birthday -r 2019-09-19T14:00 -t friend`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John\u0027s Birthday -r 3.day.later`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blimyj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blimyj"
        },
        "content": "It is not possible to set a reminder in the past."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an item : `edit`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "This command is used to edit any of the items that you might have. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d *Limitations* +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* You are only able to edit the item currently shown in your view. For example, when you\u0027re on the task list, you can only edit the tasks shown. You will not be able to edit events or reminders."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* The new item with the edited fields must not already exist. Don\u0027t worry if you can\u0027t remember that, ELISA will remind you!"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `edit INDEX [-desc DESCRIPTION] [-d DATETIME] [-r REMINDER] [-p PRIORITY] [--tk] [--e] [--r] [-t TAG]...`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in currently viewed list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Now, you might wonder, what does `--tk`, `--e`, `--r` do? +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Haven\u0027t you thought of how you would remove just a reminder of a task, or remove just the deadline of a task, without deleting the entire item? +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Well this is just what you are looking for! +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For an item with a task, event and reminder, `--tk` removes the task portion while `--e` removes the event portion while `--r` removes the reminder portion. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For example, here is an item that is a task, with an event and a reminder:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::edit-1.PNG[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "After you enter `edit 1 --e --r`, this is how the item would look:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::edit-2.PNG[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Convenient isn\u0027t it? As you can see, the event and reminder details are removed, which is precisely what we want."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "But wait! The resultant item should not be totally empty! It just doesn\u0027t make sense to have an empty item just hanging there in your list. There should have at least a task, event or reminder. +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Well, if you can\u0027t remember what fields can or cannot be removed, fret not. ELISA will be sure to tell you that:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::edit-3.PNG[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Also, if you decide to edit something and remove the part in the same command, ELISA would just remove it as she believes that your command to remove it is more important. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For example, you decide to edit the reminder time and also remove the reminder with the command `edit 1 -r 8.hour.later --r`:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::edit-4.PNG[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "As you can see, the reminder part is removed."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Here are some example commands for edit:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `edit 1 -desc read books -d 3.day.later -p low` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Edits item 1 of the current list. Changes the description to `read books`, deadline to `3.day.later` and priority to `low`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `edit 3 -desc CS2103 team meeting -r 3.hour.later -p high` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Edits item 2 of the current list. Changes the description to `CS2103 team meeting`, reminder to `3.hour.later` and priority to `high`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a reminder/task/event : `delete`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Deletes the reminder/task/event from ELISA. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* Deletes the item at the specified `INDEX` of the current list shown."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* The index refers to the index number shown in the list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* No flags should be given with this command."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `show r` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Deletes the 2nd reminder in the shown reminder list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d AutoReschedule Feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Do you have to go to the supermarket weekly? Complete a quiz weekly? Jog daily? +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Well this would definitely make your life much easier! +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Your events can now update its own time when it is already over! All you need to do is to add a `-auto` flag, along with a time period."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Here is how you can do it. You might have weekly quizzes due on the same day every week, the command you can enter is `event CS2103T Quiz -d 23/11/2019 2359 -auto week`. +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This creates an event whose date will change every week."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Convenient isn\u0027t it! Now you no longer have to manually change their dates after it is over."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "That\u0027s not it! If you add an AutoReschedule event with a date that is already over, ELISA would automatically update its date to show the upcoming one. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This is what I mean. If you add an event that is already over, eg. `event quiz 11/08/2019 2359 -auto week`:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::edit-5.PNG[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA immediately changes it to show the upcoming date for this week. ELISA shows 10 NOV as it is 9 NOV at this point."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Also, are you worried that the events wouldn\u0027t be updated if you leave the app? No worries as ELISA\u0027s got you covered! +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "When you come back again, you would see that all the events that have AutoReschedule would show the upcoming date."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "But there is a small drawback... AutoReschedule currently does not work with reminders. That means that if you add an `-auto` flag for an event, you would not be able to add a `-r` flag for reminders."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This also means that reminders cannot be created with the `-auto` flag. But you can look forward to this in V2.0 of ELISA!"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For the rescheduling period, you can use `hour`, `day`, `week` or the `10.min.later` format."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Here are some interesting commands you can try:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event grocery shopping -d 9/9/2019 1200 -auto week`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event jog -d 23/11/2019 0800 -auto day`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event smile -d 1.min.later -auto 1.min.later` (it\u0027s good to be happy)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Reminder Feature"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Snoozing a reminder: `snooze`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Snoozes a reminder that occurred since the application was open. +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "blimyj"
        },
        "content": "If an index is not provided, the most recently occurred reminder will be snoozed. +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "blimyj"
        },
        "content": "If a snooze duration is not specified, the reminder will be snoozed at the default duration of 5 min. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Format: \u0027snooze [INDEX] [-s SNOOZE_DURATION]\u0027 +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `snooze 1`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `snooze 3 -s 10.min.later`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `snooze -s 10/10/2020 1400`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "blimyj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "blimyj"
        },
        "content": "1. It is possible to snooze the same reminder multiple times if you wish. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "blimyj"
        },
        "content": "2. It is not possible to snooze if no reminder has occurred yet. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "blimyj"
        },
        "content": "However, if you use the snooze command incorrectly, ELISA will first attempt to correct your usage of the snooze command."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Navigation Features"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Show the specified category : `show`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Shows the specified category by switching the view to the given list. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `show [t] [e] [c] [r] (Exactly *one* flag must be used with this command)\u0027\u0027"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "blimyj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "blimyj"
        },
        "content": "The flag can be in either lowercase or uppercase. Eg. `show E`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Scrolling the list : `up` / `down`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Scrolls the list up/down"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Visual Features"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Expanding an item in the view: `open` \u0026 `close`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Want to see all the details of an item at one glance? Lazy to go to event list or reminder list to find them? We got you!"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "You can now open up an item to see all its details, regardless of what list you are on."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "But remember to close it before opening another item!"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Open format: `open INDEX` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Close format: `close`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Example sequence:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `show T` - to switch to the task view"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `open 2` - opens the second item on the list"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `close` - closes the item"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `open 3` - opens the third item on the list (Note: If you forgot to close previously, no worries as ELISA will prompt you to!)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `close` - closes the item"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Although, the ESC key can close too, we do not advise doing so as ELISA may be confused later on :("
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Changing the theme : `theme`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Screen is too dark? Switch up the theme by typing `theme white`!"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".White theme of ELISA"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::themewhite.PNG[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `theme white`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `theme black`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing the screen : `clearscreen` and `clear`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Chat box getting too cluttered? Type `clearscreen` to clear it!"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `clear` - clears all lists"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* `clearscreen` - clears the chat box"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Calendar Feature"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Sick of looking through lists of events? Type `show c` in the command box and your events will be magically placed into a calendar!"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Calendar feature of ELISA"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::calendar.PNG[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Entertainment Features"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Too stressed from all the work? Check out these features to take a short break so that you can go further!"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Play a game: `game`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "`game` switches your list of tasks into a game of Snakes!"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "There are 2 modes to the game: `easy` and `hard`. Type `game hard` to enter the hard mode of the game!"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Controls: `UP`, `DOWN`, `LEFT`, `RIGHT`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Snake game `EASY` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::SnakeGame.PNG[Snake, 600, 600]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "`EASY`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "New to the game? Try out the `easy` mode, where all you have to do is collect the food, which is indicated by the pink box. Biting your own tail will result in GAME OVER! Be careful!"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Snake game `HARD` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::snakegamehard.PNG[SnakeHard, 600, 600]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "`HARD`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Find the game too easy? Enter the `hard` mode and there will be 20 random walls (indicated by blue box) placed all around the game. Colliding with any of these walls will result in a GAME OVER! You will need to navigate through these walls to collect your food!"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "`EXIT`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Realised that you have played for too long and want to get back to work? Hitting the `ESC` key will exit the game and return you to your list of tasks!"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::joke[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Asking ELISA for a joke : `joke`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Need to amuse yourself for a bit? Simply use the `joke` command and ELISA will select a joke from her database for you to enjoy!"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* Note that each joke is randomly selected from the database and may repeat."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `joke` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// end::joke[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Undo/Redo Feature"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::undo[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing the latest modification(s) : `undo`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Reverts the latest commands given on the ELISA. +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `undo` can only be done if commands have been executed"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `undo` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Undoes the last command"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// end::undo[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::redo[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the latest undone command(s) : `redo`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Re-executes the latest undone commands given on the ELISA. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `redo` can only be done if undo has already been executed"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* After `undo`, if a new command is executed then `redo` cannot be executed"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `redo` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lrchema"
        },
        "content": "//end::redo[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Sort/Find/Priority Feature"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//tag::sort[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting ELISA out: `sort`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Is ELISA getting too cluttered and disorganized? Do you want to sort your task by their priority? Or the events by their start date?"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ELISA comes in-built with a sort feature that allows you to sort your items within the different panel. And the best part of it? YOU can decide how you want to sort it."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The simple sort command on the different panel sorts the list differently (just another sign of how smart ELISA is) and they are as follows:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* task panel - tasks are sorted from those that are incomplete to those that are completed. Within the two groups, they are sorted based on their priority, from high to medium and to low."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* event panel - events are sorted based on their start date and time."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* reminder - reminders are sorted based on their firing off date and time."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "But why stop there? You are also able to sort by priority and description within all the panels and even combine different sorting together! You are only limited by your imagination (and the items within your lists)."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Format: `sort` or `sort \u003ccriteria\u003e`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `sort` - a simple sort that follows the criteria mentioned above for the different panel."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `sort pri` - sorts the item within the panel by their priority (from high to low)."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `sort desc` - sorts the item within the panel by their description (lexicographic order)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//end::sort[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//tag::find[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a task: `find`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Is your task list getting too long and you are not able to find what you are looking for? Introducing the `find` function which will allow you to find what you want within the specific panel. Just type `find` and the keywords that you want to search for within the command box and ELISA will find the relevant items for you."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".ELISA before find command"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::BeforeFind.PNG[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".ELISA after find command"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::AfterFind.PNG[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `find CS2101` - find all items that have CS2101 in their description within that panel"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `find CS2101 CS2103` - find items that contains either CS2101 or CS2103 within their description."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//end::find[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//tag::priority[]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Entering priority mode: `priority`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Overwhelmed by the number of tasks to complete? Priority mode will help you narrow your focus down to the most pressing task to complete."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".ELISA before priority mode with a long list of tasks"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::BeforePriority.PNG[500,500]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "By simply typing `priority` into the command box, you will be given one single task of the highest priority among your task list. This task is chosen by ELISA base on priority and the order in which the task was added to the list."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".ELISA in priority mode"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::AfterPriority.PNG[500,500]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Notice that the ELISA icon turns red to signify that you are in priority mode and your task list has shrunk from 5 tasks down to the 1 most important task."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "When you are done with your current task, just tell ELISA you are done by simply typing `done 1` and ELISA will generate the next task for you."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".ELISA after completing the first task"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::AfterDone.PNG[500,500]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "To go back to the normal task view, simply type `priority` again. Or even better, complete all your tasks and you will be automatically brought out of priority mode."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".ELISA after all tasks are completed"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::AllDone.PNG[500,500]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Feeling lazy? You can also opt to turn off priority mode at a specific time by typing `priority dd/mm/yyyy hhmm` and ELISA will turn it off at that specific time for you."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "For the easily distracted, there is an extreme focus mode available. Simply tell ELISA that you want to enter the extreme focus mode by attaching a `-f` flag to the back of the command. In the extreme focus mode, commands such as `show`, `sort`, `find`, `game`, `event` and `reminder` are banned."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Format: `priority [DATETIME] [-f]`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `priority` - activates or deactivates the priority mode"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `priority 30/10/2019 1200` - activates the priority mode and ask ELISA to turn it off on 30/10/2019 at noon"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `priority 2.hour.later -f` - activates the focus mode and ask ELISA to turn it off 2 hours later"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "****"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Note that this command can only be called in the task panel and when you have incomplete tasks to be completed."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Note that if priority mode is currently on, any variation of `priority` will turn it off."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Note that all command such as `edit`, `undo` and `redo` still works in priority mode. However, if a `done` or `delete` command takes you out of priority mode and then you `undo` it, it will only `undo` the command but will not take you back into priority mode."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "****"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "//end::priority[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA saves the data in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d Additional Notes"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Input"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Currently, an empty input can be entered, but ELISA will show an invalid command."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Currently, it only shows *1 event* on each date due to limited space on the calendar. If there are more events on that date, to find them all, you can go to the event list and sort through it."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Currently, it only shows the *current* month. We are still working to bring the next month to you."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Please keep a full screen. If you resize, we are unable to guarantee the view of the calendar."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d Coming in V2.0"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Events with AutoReschedule can have reminders that will be rescheduled along with it."
      }
    ],
    "authorContributionMap": {
      "blimyj": 25,
      "lrchema": 43,
      "mannggoo": 144,
      "sianghwee": 112,
      "-": 104,
      "Icesiolz": 135
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteItem(index)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveItemStorage(itemStorage, filepath)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "Icesiolz": 2
    }
  },
  {
    "path": "docs/diagrams/ItemClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam arrowColor ITEM_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam classBackgroundColor ITEM_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Commons {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Core {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Item {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Item"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Reminder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class ItemDescription"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "enum Priority {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    HIGH"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    MEDIUM"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    LOW"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u0027/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "blimyj": 54
    }
  },
  {
    "path": "docs/diagrams/PriorityMode.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"p:ScheduledPriorityCommand\" as ScheduledPriorityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"timer:Timer\" as Timer MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":TimerTask\" as Task MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[-\u003e LogicManager : execute(priority 30.min.later)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(priority 30.min.later)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create ScheduledPriorityCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "AddressBookParser -\u003e ScheduledPriorityCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "AddressBookParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "LogicManager -\u003e ScheduledPriorityCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand -\u003e Model : scheduleOffPriorityMode(LocalDateTime)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create Timer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : new Timer()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Timer --\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Timer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Task : new TimerTask()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Task --\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : schedule(TimerTask, LocalDateTime)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand -\u003e Model : togglePriorityMode()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Model: toggleOnPriorityMode()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e ScheduledPriorityCommand: CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand --\u003e LogicManager: CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy ScheduledPriorityCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[\u003c--LogicManager : CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 70
    }
  },
  {
    "path": "docs/diagrams/PriorityMode2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"timer:Timer\" as Timer MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":TimerTask\" as Task MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Timer -\u003e Task : run()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Task -\u003e Model : toggleOffPriorityMode()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : cancel()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy Timer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 21
    }
  },
  {
    "path": "docs/diagrams/RedoActivity.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": ":User enters redo command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "if () then ([at least 1 undo command has"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "been executed prior])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Pop the last"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    undone command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Execute that command to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    reapply the last undone change;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Show error that no"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    changes to be redone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Return CommandResult to UI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lrchema": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class TaskListCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class EventListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class EventListCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ReminderListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ReminderListCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ElisaDialogBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class UserDialogBox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e EventListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e ReminderListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ResultDisplay *-down-\u003e ElisaDialogBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ResultDisplay *-down-\u003e UserDialogBox"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListPanel -down-\u003e TaskListCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListPanel -down-\u003e EventListCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListPanel -down-\u003e ReminderListCard"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListCard ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListCard ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListCard ..\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "Icesiolz": 31
    }
  },
  {
    "path": "docs/diagrams/UndoActivity.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": ":User enters undo command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "if () then ([undoable commands have"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "previously been executed])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Pop the last"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    executed command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Call the reverse"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    of that Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Show error that no"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    commands to be undone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    :Return CommandResult to UI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lrchema": 17
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR #3333C4"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T4 #101086"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "blimyj": 7,
      "-": 75
    }
  },
  {
    "path": "docs/team/icesiolz.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d Low Cheng Yi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d PROJECT: ELISA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "My team of 5 software engineering students were tasked with enhancing a basic command line interface (CLI) desktop address book application for our Software Engineering project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "As computing students, we face a lot of projects and assignments every day. The intense workload and fast-paced environment can make us forget the things that we need to do. We feel stressed out easily as we do not know how to manage all our tasks in an organised manner."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Therefore, my team came up with ELISA. ELISA stands for Exceptionally Loud and Intelligent Student Assistant. ELISA helps students by keeping track of all the tasks that he/she may have, as well as provide companionship to alleviate the stress."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d Application introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "This is how our application looks like:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".User interface annotated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::sianghwee/taskpanel-annotated.PNG[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The rest of the report will refer to this components and so their function will be briefly explained."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "[cols\u003d\"2, 10\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|Component |Function"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|ELISA icon"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|Icon of the application which changes with the different mode of the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|Result display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|The \"chat box\" with ELISA which contains all past user input and ELISA\u0027s response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|Command box"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|The user can type their commands here to interact with ELISA."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|View panel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|The current view of the application. It can show the task, event, reminder or calendar panel."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "In this section, I will be briefly going through my contributions to this team project. For the full extent of my contributions to the project, please visit https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dicesiolz[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Major enhancements: +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "- Added Game Command +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "- Refactored and designed ELISA\u0027s UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Minor enhancements: +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "- Added Navigation Features (`show`, `up/down`) +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "- Added Visual Features (`theme`)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Functional contributions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *Game mode (Major Feature)*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Snake Game *HARD* mode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::snakegamehard.PNG[500, 600]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "_What does it do?_ +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "This feature allows users to enter the Game mode to take a break from all the work. After entering the game mode, users will be able to play the traditional Nokia (phone) game: Snake. Snake has a very simple rule: Eat the food and do not bite your own tail! The game does not take up a lot of time and therefore is the best game for a short break."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "_Why make it?_ +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Users may get stressed or burnt out when they are constantly doing work non-stop. The game mode is developed as an avenue to take a break from all the work and provide a form of entertainment. Taking a temporary break to recharge will definitely help the user be more productive later on."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "_Why is it special?_ +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "There are 2 difficulty levels in this game feature: Easy and Hard. In the easy mode, there are no walls (indicated by the blue box) whereas in the hard mode, 20 walls will be randomly spawned in the game space. Colliding into these walls will result in GAME OVER. The option for a hard mode is provided to keep the game interesting as the walls are in different positions every round. Users that have gotten used to the easy mode will be able to stay engaged in the hard mode."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "This feature is very special because there is no task tracking app in the current market with a built-in game feature with the sole purpose of providing entertainment. Many people are neglecting the importance of taking breaks and the effects it has on boosting productivity. I hope that this feature will be able to encourage these people to take breaks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "_Difficulties?_ +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The difficulty of this feature is mainly the need to integrate this feature into ELISA. Originally, I wanted to run the game in a separate tab (Refer to the annotated figure above) from the list and calendar tabs but to do so would mean that the user has to click into the tab when they want to play the game and click the commandbox when they want to type a command. This is very problematic as ELISA is designed for CLI users which meant that they do not want to use the mouse."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "I worked around that problem by implementing the game feature using a separate scene from the ELISA\u0027s scene. This means that when the user enter the game mode, he will not be able to see ELISA and his list of tasks. This solves the problem I mentioned earlier as well as met the goal of encouraging the user to take a break from work."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *Navigation Features (Minor Feature)*:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The following features are features that allow the application to be completely CLI based. Since ELISA is designed for CLI users, I have to provide a way for the users to navigate through ELISA without the use of the mouse."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "`show T/E/R/C` switches the tabs between the lists and calendar views."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "`up/down` scrolls the list up/down."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *Theme Feature (Minor Feature)*:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The theme feature is to allow users to change the colour scheme of ELISA. This feature is very useful especially when the screen it too bright/dark depending on the location that the user is in and switching the colour scheme will make ELISA more visible."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Theme Feature"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/UG1.png[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *UI integration (Major Contribution)*:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "For this section, please refer to the annotated diagram above."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "I designed the entire UI of ELISA to display the features that ELISA has. While UI may not be considered a feature, it is a huge part of whether an app is user-friendly and therefore I have devoted a significant amount of time into its design."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Firstly the mascot, ELISA. ELISA is a female student assistant, therefore the overall structure of ELISA is that of a female robot. The colour blue is chosen because blue is the most popular colour in the world. (according to a study by Philip Cohen from the University of Maryland) It is a colour often found in nature and people always describe blue as calm and serene, which is what we want users to feel."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Secondly, the chat style `Result Display`. I designed it to be a chat style display so that it would seem like ELISA is an intelligent companion. The chat bubbles allow users to experience texting with a friend (like other instant messaging apps) which has been proven to be helpful in alleviating stress."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Thirdly, the intuitive icons of ELISA that displays information in each list. Green ELISA with a cheerful appearance indicates that a task has been completed while Red ELISA with a crossed eye indicates that a task is incomplete. These icons make ELISA more interesting and friendly to the user as it further personifies ELISA by giving her emotions. Additionally, there were actually more ELISA icons that were designed but not used in the final product because of time constraints and the difficulty of aligning all the elements of the app."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d\u003d Other contributions:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *Project management*:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *Refactoring*:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Refactored the UI classes as well as the DarkTheme.css file so that it is able to integrate with the project."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *Documentation*:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|_Given below are sections I contributed to the User Guide for my main feature. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Firstly, I designed the heading banners to make the UG more friendly as compared to plain text headings."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".UG banner"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/UG5.png[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Secondly, I rearranged the features of the UG into better headings such as Visual Features, Navigation Features, CLI Features etc. This improves readability of the UG."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Thirdly, I wrote the Theme Feature, Calendar Feature, Navigation Feature and Game Feature portion of the UG. I will show the Game Feature portion of the UG here below."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/UG3.png[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/UG4.png[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".Game Feature"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide for my main feature. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "I updated the UI component of the DG as it had been refactored and new classes are added such as TaskListPanel, TaskListCard, ElisaDialogBox etc."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".UI component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/DG4.png[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "I also updated the Game Features portion of the DG as it is a major feature that I have implemented."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/DG1.png[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/DG2.png[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::icesiolz/DG3.png[]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".GameFeature"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 153
    }
  },
  {
    "path": "docs/team/lrchema.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d Chandrasekaran Hema - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "My team of 4 software engineering students and I were tasked with enhancing a basic command line interface desktop address book application for our Software Engineering project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "We’re living in a fast paced, stressful world where things are constantly changing; and so are our tasks. We thought it would be helpful to have an application to aid us in managing these tasks, so we chose to morph the address book into a student assistant with a personality to liven up our dreary days, and we called her ELISA. This application enables users to add and track various tasks and events, as well as receive reminders for them. The assistant is in the form of a chat bot, and she has been given a sassy and humorous personality in order to enhance the user experience."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "This is how our user interface looks like:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::sianghwee/taskpanel-annotated.PNG[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "My role was to implement the undo and redo functionality as well as give ELISA more of a personality."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* *Code contributed*: My contributions can be found https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dlrchema\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dlrchema\u0026tabRepo\u003dAY1920S1-CS2103T-T10-3%2Fmain%5Bmaster%5D[here]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* *Enhancement added*: added the ability to *undo/redo previous commands*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Function: The undo command allows the user to undo a previous command. The user may reverse this undo command with the redo command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Justification: In the event that users have made a mistake or changed their minds about executing a command, the undo command enables them to reverse that command. If they change their minds again and decide to execute the command after all, then the redo command enables them to do so easily."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Highlights: The main challenge was to refactor the command from the simpler state method to the inverse function method in order to store only one reference to all other components."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Implementation Details:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** Initially I had implemented this feature by storing the state of the application after each command execution, and the undo command would set the state of the application to a previous one, almost like the application was time travelling. However, this logic interfered with my teammate Bryan’s feature, reminders, resulting in duplicate reminders. Reminders work by storing pending reminders in a list and past reminders in another list. The previous implementation of the undo feature worked by clearing the model and repopulating it after every command execution. However, this method or clearing and repopulating the model did not properly account for the items in the pending and past reminders list. This caused the reminder to be added multiple times and thus there were duplicate reminders."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** In order to ensure that the undo redo feature worked correctly and did not interfere with any other features, I rewrote the logic of the feature. This time, there was no time travelling backwards. The undo command only made another modification to the application, instead of reversing a previous modification. This was done by ensuring that all commands had a reverse function, which would exactly reverse the effects of that command’s execution. Naturally, redo would simply run the execution again."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* *Enhancement added*: gave ELISA a personality and sense of humour"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Function: For each command, ELISA gives either a confirmation or an error message. I made the messages humorous or sarcastic, instead of plain and emotionless. Additionally, ELISA will provide the user with a randomly selected joke upon request."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Justification: ELISA is able to provide a sense of companionship for the user, and the jokes can help relieve stress and provide a welcome break."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Enhancements to underlying implementations:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** Refactored the packages and the parser so that they were no longer named address book, they are now called elisa."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** Moved and renamed some image and text resource files to make sure that the application works when packaged as a jar file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** Updated the user guide with information on how to use the undo and redo commands"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** Updated the developer guide by giving the implementation of the undo function as well as filling in use cases and user stories"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Reviewed the following pull requests:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** https://github.com/AY1920S1-CS2103T-T10-3/main/pull/116[PR #116]: Made a comment on cleaning up code by deleting it instead of commenting it out"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** https://github.com/AY1920S1-CS2103T-T10-3/main/pull/132[PR #132]: Suggested to make the command non-case-sensitive, which was adopted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** https://github.com/AY1920S1-CS2103T-T10-3/main/pull/136[PR #136]: Gave a suggestion to shorten the command word, which was adopted as an option along with the original long form"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** https://github.com/AY1920S1-CS2103T-T10-3/main/pull/156[PR #156]: Proposed to change the colour of the dialog to something less abrasive and gave an alternative colour option. This suggestion was adopted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** Design:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** Reviewed and gave suggestions on how to improve the ELISA logo my teammate Chengyi created, which were implemented in the final version of the logo."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The logo before, which looks cute and innocent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::lrchema/elisaBefore.PNG[]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "and the logo after, which is more confident and sassy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::lrchema/elisaAfter.PNG[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*** Created a chime sound for the reminder function, used in https://github.com/AY1920S1-CS2103T-T10-3/main/pull/157[PR #157]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundo]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "include::../UserGuide.adoc[tag\u003dredo]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": "include::../UserGuide.adoc[tag\u003djoke]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundobyreverse]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserstories]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lrchema"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecaselrchema]"
      }
    ],
    "authorContributionMap": {
      "lrchema": 85
    }
  },
  {
    "path": "docs/team/sianghwee.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d Ng Siang Hwee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d PROJECT: ELISA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "My team, comprising of 5 software engineering students, was tasked with enhancing a basic command line interface (CLI) desktop address book application for our Software Engineering project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "With modern life comes a fast-paced, hectic lifestyle. It is increasingly easy to be overwhelmed by the insurmountable number of responsibilities and tasks we have to fulfill. Most task-manager applications involve countless clicking and navigation, which defeats their purpose. To rectify this, my team decided to design a simple, no frills CLI student assistant catering to students who prefer CLI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "We call our application ELISA, an Exceptionally Loud and Intelligent Student Assistant. ELISA enables users to add and track their tasks and events while receiving reminders for them. With a sassy and humorous personality and her user-interface interaction (in the form of a chat bot), she is simpler, yet more engaging to use than other regular task managers. There are also other features to aid the productivity of students and to spice up their life."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d Application introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "This is how our application looks like:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".User interface annotated"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::sianghwee/taskpanel-annotated.PNG[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ELISA\u0027s various components serve the following functions:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[cols\u003d\"2, 10\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Component |Function"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|ELISA icon"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Icon of the application which changes with the different mode of ELISA."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Result display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|The \"chat box\" with ELISA which contains all past user input and ELISA\u0027s response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|Command box"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|The user can type their commands here to interact with ELISA."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|View panel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|The current view of the application. It can show the task, event, reminder or calendar panel."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "In this section, I will be briefly going through my contributions to this team project. For the full extent of my contributions to the project, please visit https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dsianghwee[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Functional contributions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* *Priority mode (Major Feature)*:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "_What does it do?_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "This feature allows the user to enter a priority mode where they are able to prioritize tasks with a higher priority first and focus on that task to complete it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "_Why make it?_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "This features helps the user narrow their focus down to completing one task at a time and prevents them from being overwhelmed by a long list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "_Why is it special?_"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "There are multiple modes to cater to different user needs. Users can choose from a focus mode, a timed mode, a normal mode or a combination of multiple modes. The different modes will be explained in greater detail in the user guide."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "At the same time, users are able to update their task list in realtime (add, delete, edit) so that they can always be sure that the task that they are currently doing is the most important one."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "_Difficulties?_"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The difficulty of this feature comes from the fact that it has to be integrated with all the other commands within the application. That means that the algorithm needs to be written in a way such that it is constantly updating itself to give the user the most important task despite the changes in the tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "For example, when a new task of a higher priority (than the current task) is added, the algorithm should be able to make that the task that is to be completed first. This requires a lot of integration with all the other code so that ELISA can behave differently depending on whether she is in priority mode."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* *Sorting (Minor Feature)*:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The sorting feature allows users to sort their items so that they are able to better arrange their items in a way that is most useful to them. Each list has its own sorting algorithm while users can also choose to sort the items based on their priority or description. Refer to https://ay1920s1-cs2103t-t10-3.github.io/main/UserGuide.html#sorting-elisa-out-code-sort-code[here] for more information on this feature."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* *Find (Minor Feature)*:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The find feature allows users to find an item based on the description of the item. This will aid users in getting the item that they need at the fastest possible time. Refer to https://ay1920s1-cs2103t-t10-3.github.io/main/UserGuide.html#finding-a-task-code-find-code[here] for more information on this feature."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* *Other implementations*:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Helped my teammates with the following features and implementation:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Implementation (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/138[PR #138]) and fixes on the calendar panel so that it is able to display the events and update the events when there are changes to the events (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/148[PR #148], https://github.com/AY1920S1-CS2103T-T10-3/main/pull/181[PR #181] and https://github.com/AY1920S1-CS2103T-T10-3/main/pull/244[PR #244])."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". Helped with the implementation of the undo for marking a task as completed (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/153[PR #153])."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Other contributions:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* *Project management*:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Review and made notable suggestions on the following PR:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". https://github.com/AY1920S1-CS2103T-T10-3/main/pull/69#pullrequestreview-299143917[PR #69] - gave idea of storing the priority in the item class that was ultimately adopted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". https://github.com/AY1920S1-CS2103T-T10-3/main/pull/130#pullrequestreview-304515805[PR #130] - gave idea of getting the command word to display to the user was ultimately adopted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". https://github.com/AY1920S1-CS2103T-T10-3/main/pull/132[PR #132] - gave suggestion on how to improve the code for readability and to follow coding practice."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". https://github.com/AY1920S1-CS2103T-T10-3/main/pull/134#pullrequestreview-304938689[PR #134] - gave idea of moving method to the `UndoableCommand` abstract class was ultimately adopted in https://github.com/AY1920S1-CS2103T-T10-3/main/pull/137[PR #137]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". https://github.com/AY1920S1-CS2103T-T10-3/main/pull/141#pullrequestreview-306620283[PR #141] - gave suggestion of using `Long` instead of `BigInteger`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". https://github.com/AY1920S1-CS2103T-T10-3/main/pull/158#pullrequestreview-308251560[PR #158] - gave suggestion on how to improve the feed back message to the users for undo command, which was ultimately adopted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ". https://github.com/AY1920S1-CS2103T-T10-3/main/pull/252#pullrequestreview-312419235[PR #252] - gave suggestion on fixing some issue with the code and optimizing it"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "{empty}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* *Refactoring*:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Refactored the model (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/68[PR #68]) and storage (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/79[PR #79]) class so that it will work with the project."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* *Documentation*:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Updated the developer guide to include the use cases (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/44[PR #44]),user stories (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/47[PR #47]) and manual testing (https://github.com/AY1920S1-CS2103T-T10-3/main/pull/271[PR #271])."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|_Given below are sections I contributed to the User Guide for my main feature. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpriority]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide for the model implementation and my main feature. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodel]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dpriority]"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 129
    }
  },
  {
    "path": "src/main/java/seedu/elisa/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/elisa/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/elisa/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistoryManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.ItemListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonItemStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    protected ItemModel model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    protected ElisaCommandHistory commandHistory;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemListStorage itemListStorage \u003d new JsonItemStorage(userPrefs.getItemStorageFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage \u003d new StorageManager(itemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        commandHistory \u003d new ElisaCommandHistoryManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemModel initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, ElisaCommandHistory stateHistory) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d storage.toModelType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Item Storage\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d new ItemStorage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Item Storage\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d new ItemStorage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new ItemModelManager(initialData, userPrefs, stateHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Bryan Reminder"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logic.shutdown();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 34,
      "mannggoo": 1,
      "sianghwee": 8,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String LOG_FILE \u003d \"elisa.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "sianghwee": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"I have no clue what you just said\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! %s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The item index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INCORRECT_SYMBOL_USAGE \u003d \"I spy with my little eye a \\\"-\\\". \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"That shouldn\u0027t be there!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_ITEM_LISTED_OVERVIEW \u003d \"Here you go, %1$d items listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_UNDO \u003d \"Nothing to undo, buddy.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            + \" Maybe try actually doing something first\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_REDO \u003d \"Why fix your mistakes when you didn\u0027t make any?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_FAST_REMINDER_FORMAT \u003d \"Don\u0027t you remember?\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"It should be in the format of \\\"(Positive Integer).(Time unit).later\\\"\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Eg. \\\"3.hour.later\\\" or \\\"10.min.later\\\"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_NO_PREVIOUS_REMINDER \u003d \"There ain\u0027t no recent reminder to snooze buddy...\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 6,
      "mannggoo": 7,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Event in ELISA."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Duration of Event is 0 by default."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Priority of Event is medium by default."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Duration chosen over Period as Events are unlikely to exceed a day."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final boolean isAutoReschedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final AutoReschedulePeriod period;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs an {@code Event}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param startDateTime A valid LocalDateTime object that denotes the start of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param duration A Duration of the event. Defaults to Duration.ZERO if null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this(startDateTime, duration, false, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration, boolean isAutoReschedule)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this(startDateTime, duration, isAutoReschedule, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration, boolean isAutoReschedule,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                 AutoReschedulePeriod period) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.duration \u003d Duration.ZERO;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.endDateTime \u003d startDateTime.plus(this.duration);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.isAutoReschedule \u003d isAutoReschedule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasAutoReschedule() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return isAutoReschedule;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Set auto reschedule to true if the event should recur/auto-reschedule, false otherwise"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param bool true if event can be auto-rescheduled"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event object with the updated parameters"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event setAutoReschedule(boolean bool) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), getDuration(), bool);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get the reschedule period of this event"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedule period of this event"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AutoReschedulePeriod getPeriod() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Set the reschedule period of this event. This would also set isAutoReschedule of this event to true."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period to set to this event"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event object with the updated parameters"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event setReschedulePeriod(AutoReschedulePeriod period) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), getDuration(), true, period);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event changeStartDateTime(LocalDateTime newStartDateTime) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(newStartDateTime, getDuration(), this.isAutoReschedule, this.period);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event changeDuration(Duration newDuration) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), newDuration, this.isAutoReschedule, this.period);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nStart DateTime: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getStartDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Removed duration \u0026 endDateTime portion of string as requested in team meeting."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Creates a string for UI display."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return A string containing only the start DateTime of the Event."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toDisplay() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nDateTime: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getStartDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u0026\u0026 otherEvent.getDuration().equals(getDuration())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u0026\u0026 otherEvent.getPeriod().equals(getPeriod());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(startDateTime, endDateTime, duration);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an event object from a JSON string."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the event"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the event object that is created"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Event fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String startDateTimeString \u003d node.get(\"startDateTime\").asText();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime.parse(startDateTimeString);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String durationString \u003d node.get(\"duration\").asText();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Duration duration \u003d Duration.parse(durationString);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String periodString \u003d node.get(\"period\").toString(); // in the format of {\"period\": 60000}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!periodString.isEmpty() \u0026\u0026 !periodString.equals(\"null\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            periodString \u003d node.get(\"period\").get(\"period\").asText(); // get the long value"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Long periodMillis \u003d Long.valueOf(periodString);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AutoReschedulePeriod period \u003d new AutoReschedulePeriod(periodMillis);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new Event(startDateTime, duration, true, period);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Event(startDateTime, duration);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 99,
      "lrchema": 4,
      "sianghwee": 24,
      "mannggoo": 56
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item in Elisa."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: ItemDescription is present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * At least one of the following three fields (Task, Event, Reminder) is present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Reminder reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final ItemDescription itemDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param priority A Priority of the event. Defaults to Priority.MEDIUM if null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item(Task task, Event event, Reminder reminder,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                 ItemDescription itemDescription, Set\u003cTag\u003e tags, Priority priority) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(itemDescription);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.itemDescription \u003d itemDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (priority !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasTask() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return task !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasEvent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return event !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasReminder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return reminder !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cTask\u003e getTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.task \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cEvent\u003e getEvent() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.event \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.reminder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ItemDescription getItemDescription() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return itemDescription;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change ItemDescription"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeItemDescription(ItemDescription newItemDescription) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(newItemDescription)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Task referenced"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeTask(Task newTask) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(newTask)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Event referenced"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeEvent(Event newEvent) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(newEvent)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Reminder referenced"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeReminder(Reminder newReminder) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(newReminder)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Tags referenced"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeTags(HashSet\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(newTags)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the priority of the item."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newPriority the new priority for the item."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return new Item with the new priority."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changePriority(Priority newPriority) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(newPriority)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same task referenced."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameTask(Item otherItem) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getTask().equals(otherItem.getTask());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same Event referenced."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameEvent(Item otherItem) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getEvent().equals(otherItem.getEvent());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same Reminder referenced."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameReminder(Item otherItem) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getReminder().equals(otherItem.getReminder());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same identity and data fields."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherItem.getTask().equals(getTask())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getReminder().equals(getReminder())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getEvent().equals(getEvent())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getItemDescription().equals(getItemDescription())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getPriority().equals(getPriority());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(task, event, reminder, itemDescription, tags, priority);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(itemDescription.toString());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getTask().isPresent()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nTask Details: \")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getTask().get().toString());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getEvent().isPresent()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nEvent Details: \")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getEvent().get().toString());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getReminder().isPresent()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nReminder Details: \")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getReminder().get().toString());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (tags.size() \u003e 0) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nTags: \");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getReminderMessage() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(itemDescription.toString())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(\"\\nReminder! \")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getReminder().get().toString());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nPriority: \")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(priority.toString());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Checks the event in the item to see if it is auto reschedulable."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Requirements: item definitely has an event."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return true if it is auto reschedule, false otherwise."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasAutoReschedule() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (getEvent().isPresent()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return getEvent().get().hasAutoReschedule();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Builder class for Item."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static class ItemBuilder {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // Identity fields"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Task task \u003d null;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Event event \u003d null;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // Data fields"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private ItemDescription itemDescription \u003d null;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Priority priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder() {}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setTask(Task task) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setEvent(Event event) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setItemDescription(ItemDescription descriptor) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            requireNonNull(descriptor);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.itemDescription \u003d descriptor;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Consider using a defensive copy of tags, similar to EditCommand in AB3"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            requireNonNull(tags);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setItemPriority(Priority priority) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        /**Validates arguments of Item before initialising it"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         * @return A valid Item."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         * @throws IllegalArgumentException If description not provided or task, event and reminder fields are null."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public Item build() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            Item newItem \u003d new Item(task, event, reminder, itemDescription, tags, priority);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Validation of parameters of object after object has been created."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Validate after object has been created as per StackOverflow link"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //https://stackoverflow.com/questions/38173274/builder-pattern-validation-effective-java"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //However this seems to be contrary to the answer in the following link"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //https://stackoverflow.com/questions/12930852/clearing-doubts-about-the-builder-pattern"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //However it seems safer to follow the first as the object fields could be mutated after it has been copied"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // from the builder to the object."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (newItem.getItemDescription() \u003d\u003d null) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new IllegalArgumentException(\"Description must be provided!\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (newItem.getTask().isEmpty() \u0026\u0026 newItem.getEvent().isEmpty() \u0026\u0026 newItem.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new IllegalArgumentException(\"Task, Event \u0026 Reminder cannot all be empty!\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (newItem.getReminder().isPresent() \u0026\u0026 newItem.getEvent().isPresent()"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    \u0026\u0026 newItem.getEvent().get().hasAutoReschedule()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new IllegalArgumentException(\"An auto-rechedule event can\u0027t have a reminder and vice versa!\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Resetting all constructing parameters back to null, so a new object doesn\u0027t use the parameters of the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // previous object."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            task \u003d null;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            event \u003d null;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            reminder \u003d null;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemDescription \u003d null;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return newItem;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the item object into a json string."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return string representation of the item"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws JsonProcessingException when the item cannot be converted into a JSON string"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toJson() throws JsonProcessingException {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return JsonUtil.toJsonString(this);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an item object from a JSON string."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the item"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item object that is created"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Item fromJson(String jsonString) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemBuilder temp \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String itemDescriptionString \u003d node.get(\"itemDescription\").toString();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemDescription id \u003d ItemDescription.fromJson(itemDescriptionString);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        temp.setItemDescription(id);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String priorityString \u003d node.get(\"priority\").asText();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Priority newPriority \u003d Priority.fromJson(priorityString);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        temp.setItemPriority(newPriority);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"task\")) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String taskString \u003d node.get(\"task\").toString();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task t \u003d Task.fromJson(taskString);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setTask(t);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"event\")) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String eventString \u003d node.get(\"event\").toString();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Event e \u003d Event.fromJson(eventString);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setEvent(e);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"reminder\")) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String reminderString \u003d node.get(\"reminder\").toString();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Reminder r \u003d Reminder.fromJson(reminderString);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setReminder(r);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Set\u003cTag\u003e tagsSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode tags \u003d node.get(\"tags\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Iterator\u003cJsonNode\u003e it \u003d tags.elements();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            tagsSet.add(new Tag(it.next().get(\"tagName\").asText()));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return temp.setTags(tagsSet).build();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deepCopy() throws IOException {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return Item.fromJson(this.toJson());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 373,
      "lrchema": 3,
      "sianghwee": 63,
      "mannggoo": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/ItemDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s description in ELISA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidItemDescription(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ItemDescription {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \"ItemDescription should only contain characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs an {@code ItemDescription}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param description A valid item description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ItemDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checkArgument(isValidItemDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if a given string is a valid item description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static boolean isValidItemDescription(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                || (other instanceof ItemDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 getDescription().equals(((ItemDescription) other).getDescription())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an item description object from a JSON string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the item description"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item description object that is created"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemDescription fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new ItemDescription(node.get(\"description\").asText());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 54,
      "lrchema": 3,
      "sianghwee": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/ItemReminderDateTimeComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * A comparator to compare the datetime between the Reminders of two Items."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ItemReminderDateTimeComparator implements Comparator\u003cItem\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int compare(Item firstItem, Item secondItem) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        int comparisonResult \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (firstItem.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            comparisonResult \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else if (secondItem.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            comparisonResult \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            comparisonResult \u003d firstItem.getReminder().get().getOccurrenceDateTime().compareTo("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    secondItem.getReminder().get().getOccurrenceDateTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return comparisonResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 22
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Available priority levels for tasks and events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    HIGH, MEDIUM, LOW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Creates a Priority object from a string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param priorityString the string that represents the Priority"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return the Priority object that is created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static Priority fromJson(String priorityString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return valueOf(priorityString.toUpperCase());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 14,
      "lrchema": 1,
      "sianghwee": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Reminder in ELISA."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime defaultDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime occurrenceDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Reminder}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param defaultDateTime A valid LocalDateTime object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder(LocalDateTime defaultDateTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(defaultDateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.defaultDateTime \u003d defaultDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        occurrenceDateTime \u003d defaultDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Reminder}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param defaultDateTime A valid LocalDateTime object that stores the original DateTime is intended to occur."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param occurrenceDateTime A valid LocalDateTime object for the reminder to occur."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Reminder(LocalDateTime defaultDateTime, LocalDateTime occurrenceDateTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireAllNonNull(defaultDateTime, occurrenceDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.defaultDateTime \u003d defaultDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.occurrenceDateTime \u003d occurrenceDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getDefaultDateTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return defaultDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getOccurrenceDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return occurrenceDateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the dateTime that the reminder occurs. Removes the previous reminder so it does not occur."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param dateTime A LocalDateTime object which dictates the dateTime the reminder occurs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return A new Reminder with the new dateTime for the reminder."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder changeOccurrenceDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //When Reminder is implemented, the previous reminder notification should also be removed here"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Reminder(defaultDateTime, dateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the default dateTime of the reminder."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param dateTime A LocalDateTime object which dictates the default dateTime of the Reminder."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return A new Reminder with the new default dateTime for the reminder."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder changeDefaultDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Reminder(dateTime, dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (defaultDateTime.isEqual(occurrenceDateTime)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nReminder DateTime: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getDefaultDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nOriginal Reminder DateTime: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getDefaultDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nReminder DateTime: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getOccurrenceDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherReminder.getOccurrenceDateTime().equals(getOccurrenceDateTime())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherReminder.getDefaultDateTime().equals(getDefaultDateTime());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Possibility of high number of hash collisions and as a result slower performance"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(defaultDateTime, occurrenceDateTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a reminder object from a JSON string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the reminder"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the reminder object that is created"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Reminder fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String defaultDateTimeString \u003d node.get(\"defaultDateTime\").asText();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(defaultDateTimeString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String occurrenceDateTimeString \u003d node.get(\"occurrenceDateTime\").asText();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime occurenceDateTime \u003d LocalDateTime.parse(occurrenceDateTimeString);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Reminder(dateTime, occurenceDateTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 112,
      "lrchema": 2,
      "sianghwee": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Task in ELISA."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Completion state of Event is false by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Priority of Event is medium by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Boolean complete;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param complete Denotes whether the task has been completed or not. Defaults to false if null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task(Boolean complete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (complete !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.complete \u003d complete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.complete \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Boolean isComplete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return complete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task markIncomplete() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nCompleted: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(isComplete().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Problematic as the details of the task might be the same while the Item/actual task being referred to is not the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //same due to description"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherTask.isComplete().equals(isComplete());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //hashCode is problematic as I believe that there are only 3*2 permutations of priority and Boolean"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Possibility of high number of hash collisions and as a result slower performance"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(complete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a task object from a JSON string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the task object that is created"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Task fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final Priority p;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final boolean complete;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        complete \u003d node.get(\"complete\").asBoolean();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(complete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 73,
      "lrchema": 3,
      "sianghwee": 19
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.core.item.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/exceptions/DuplicateItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "sianghwee": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return objectMapper;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/elisa/game/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to represent food that takes up only one square."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final Color COLOR \u003d Color.ROSYBROWN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Point point;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    Food(Point point) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.point \u003d point;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Point getPoint() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return point;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setPoint(Point point) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.point \u003d point;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 25
    }
  },
  {
    "path": "src/main/java/seedu/elisa/game/GameLoop.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.canvas.GraphicsContext;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * The game loop class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class GameLoop implements Runnable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Grid grid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final GraphicsContext context;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private int currentScore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private int frameRate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private float interval;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private boolean running;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private boolean paused;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private boolean keyIsPressed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TreeSet\u003cInteger\u003e scorelist;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public GameLoop(final Grid grid, final GraphicsContext context, TreeSet\u003cInteger\u003e scorelist) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.grid \u003d grid;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        frameRate \u003d 20;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        interval \u003d 1000.0f / frameRate; // 1000 ms in a second"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        running \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        paused \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        keyIsPressed \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentScore \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.scorelist \u003d scorelist;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        while (running \u0026\u0026 !paused) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            // Time the update and paint calls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            float time \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            keyIsPressed \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            grid.update();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            Painter.paint(grid, context);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (!grid.getSnake().isSafe()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                pause();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                currentScore \u003d Painter.getCurrentScore();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                Painter.paintResetMessage(context);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                Painter.paintHighScore(context, scorelist.last());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                Painter.resetScore();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            time \u003d System.currentTimeMillis() - time;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            // Adjust the timing correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (time \u003c interval) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    Thread.sleep((long) (interval - time));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                } catch (InterruptedException ignore) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    logger.warning(\"Error with adding listener to primary stage for popup\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public int getCurrentScore() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return currentScore;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        running \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean isKeyPressed() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return keyIsPressed;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setKeyPressed() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        keyIsPressed \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void resume() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        paused \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void pause() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        paused \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean isPaused() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return paused;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public int getFrameRate() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return frameRate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setFrameRate(int frameRate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.frameRate \u003d frameRate;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 105
    }
  },
  {
    "path": "src/main/java/seedu/elisa/game/Grid.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Grid is the position for every point."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class Grid {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * The side length of each square point in the grid."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final int SIZE \u003d 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final Color COLOR \u003d new Color(0.1, 0.1, 0.1, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final int cols;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final int rows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private boolean hard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Snake snake;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Food food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private List\u003cWall\u003e walls;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Grid(final double width, final double height) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        rows \u003d (int) width / SIZE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        cols \u003d (int) height / SIZE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.hard \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // initialize the snake at the centre of the screen"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        snake \u003d new Snake(this, new Point(rows / 2, cols / 2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // put the food at a random location"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        food \u003d new Food(getRandomPoint());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Grid(final double width, final double height, boolean hard) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        rows \u003d (int) width / SIZE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        cols \u003d (int) height / SIZE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.hard \u003d hard;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // initialize the snake at the centre of the screen"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        snake \u003d new Snake(this, new Point(rows / 2, cols / 2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // put the food at a random location"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        food \u003d new Food(getRandomPoint());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        //put the wall at a random location"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        walls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        for (int i \u003d 0; i \u003c 20; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            walls.add(new Wall(getRandomPoint()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Ensures the snake does not go beyond the screen."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Point wrap(Point point) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        int x \u003d point.getX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        int y \u003d point.getY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (x \u003e\u003d rows) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            x \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (y \u003e\u003d cols) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            y \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (x \u003c 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            x \u003d rows - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (y \u003c 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            y \u003d cols - 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new Point(x, y);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Point getRandomPoint() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Point point;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            point \u003d new Point(random.nextInt(rows), random.nextInt(cols));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } while (point.equals(snake.getHead()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return point;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * This method is called in every cycle of execution."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (food.getPoint().equals(snake.getHead())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            snake.extend();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            food.setPoint(getRandomPoint());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (hard) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                for (Wall w : walls) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    if (w.getPoint().equals(snake.getHead())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        snake.markAsUnsafe();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            snake.move();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public int getCols() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return cols;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public int getRows() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return rows;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public double getWidth() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return rows * SIZE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return cols * SIZE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Snake getSnake() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return snake;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Food getFood() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return food;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public List\u003cWall\u003e getWalls() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return walls;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean isHard() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return hard;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 141
    }
  },
  {
    "path": "src/main/java/seedu/elisa/game/Painter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static seedu.elisa.game.Grid.SIZE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.canvas.GraphicsContext;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This is the class that colors the snake."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class Painter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static Snake snake;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * The method to paint the snake."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param grid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param gc"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static void paint(Grid grid, GraphicsContext gc) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.setFill(Grid.COLOR);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.fillRect(0, 0, grid.getWidth(), grid.getHeight());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // Now the Food"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.setFill(Food.COLOR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        paintPoint(grid.getFood().getPoint(), gc);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // Now the Wall"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (grid.isHard()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            List\u003cWall\u003e walls \u003d grid.getWalls();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            for (Wall w : walls) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                gc.setFill(Wall.COLOR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                paintPoint(w.getPoint(), gc);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // Now the snake"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        snake \u003d grid.getSnake();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.setFill(Snake.COLOR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        snake.getPoints().forEach(point -\u003e paintPoint(point, gc));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!snake.isSafe()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            gc.setFill(Snake.DEAD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            paintPoint(snake.getHead(), gc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // The score"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        snake.setCurrentScore(100 * (snake.getPoints().size() - 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.setFill(Color.BEIGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.fillText(\"Current score : \" + snake.getCurrentScore(), 10, 470);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Paints the point."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param point"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param gc"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static void paintPoint(Point point, GraphicsContext gc) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.fillRect(point.getX() * SIZE, point.getY() * SIZE, SIZE, SIZE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Paints the grid that the snake collides with itself."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param gc"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static void paintResetMessage(GraphicsContext gc) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.setFill(Color.AQUAMARINE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.fillText(\"\\nHit E for (E)asy Mode. \\nHit H for (H)ard Mode. \\nHit ESC to get back to WORK!!!\", 10, 10);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static int getCurrentScore() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return snake.getCurrentScore();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static void resetScore() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        snake.setCurrentScore(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Display high score."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param gc"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static void paintHighScore(GraphicsContext gc, int score) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.setFill(Color.BEIGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (getCurrentScore() \u003e score) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            score \u003d getCurrentScore();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gc.fillText(\"High score: \" + String.valueOf(score), 10, 490);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 93
    }
  },
  {
    "path": "src/main/java/seedu/elisa/game/Point.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This represents a point on the grid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class Point {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final int x;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final int y;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    Point(final int x, final int y) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.x \u003d x;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.y \u003d y;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public int getX() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public int getY() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return y;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param dx The change in x."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param dy The change in y."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @return A new Point which is the result of translation of this point."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Point translate(int dx, int dy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new Point(x + dx, y + dy);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param other The \"other\" point to compare against."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @return {@code true} if the other Object is an instance of Point and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * has the same coordinates."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof Point)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Point point \u003d (Point) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return x \u003d\u003d point.x \u0026 y \u003d\u003d point.y;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return x + \", \" + y;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 49
    }
  },
  {
    "path": "src/main/java/seedu/elisa/game/Snake.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Main logic class. Stores game\u0027s current state."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class Snake {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final Color COLOR \u003d Color.CORNSILK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final Color DEAD \u003d Color.RED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Grid grid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private int length;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private boolean safe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private List\u003cPoint\u003e points;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Point head;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private int currentScore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private int xVelocity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private int yVelocity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * The constructor the snake. It takes the initial point, for the head and the Grid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * that it lives (and dies) in."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param initialPoint The {@link Point} to the put the snake\u0027s head on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Snake(Grid grid, Point initialPoint) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        length \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        points \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        points.add(initialPoint);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        head \u003d initialPoint;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        safe \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.grid \u003d grid;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        xVelocity \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        yVelocity \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentScore \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public int getCurrentScore() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return currentScore;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * This method is called after food has been consumed. It increases the length of the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * snake by one."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param point The Point where the food was and the new location for the head."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void growTo(Point point) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        length++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        checkAndAdd(point);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Called during every update. It gets rid of the oldest point and adds the given point."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param point The new Point to add."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void shiftTo(Point point) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // The head goes to the new location"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        checkAndAdd(point);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // The last/oldest position is dropped"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        points.remove(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Checks for an intersection and marks the \"safe\" flag accordingly."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param point The new Point to move to."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void checkAndAdd(Point point) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        point \u003d grid.wrap(point);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        safe \u0026\u003d !points.contains(point);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        points.add(point);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        head \u003d point;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @return The points occupied by the snake."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public List\u003cPoint\u003e getPoints() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @return {@code true} if the Snake hasn\u0027t run into itself yet."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean isSafe() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return safe;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Marks snake as unsafe"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void markAsUnsafe() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        safe \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @return The location of the head of the Snake."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Point getHead() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return head;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private boolean isStill() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return xVelocity \u003d\u003d 0 \u0026 yVelocity \u003d\u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Make the snake move one square in it\u0027s current direction."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void move() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!isStill()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            shiftTo(head.translate(xVelocity, yVelocity));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Make the snake extend/grow to the square where it\u0027s headed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void extend() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!isStill()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            growTo(head.translate(xVelocity, yVelocity));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (yVelocity \u003d\u003d 1 \u0026\u0026 length \u003e 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        xVelocity \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        yVelocity \u003d -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setDown() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (yVelocity \u003d\u003d -1 \u0026\u0026 length \u003e 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        xVelocity \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        yVelocity \u003d 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setLeft() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (xVelocity \u003d\u003d 1 \u0026\u0026 length \u003e 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        xVelocity \u003d -1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        yVelocity \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setRight() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (xVelocity \u003d\u003d -1 \u0026\u0026 length \u003e 1) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        xVelocity \u003d 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        yVelocity \u003d 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setCurrentScore(int score) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.currentScore \u003d score;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 166
    }
  },
  {
    "path": "src/main/java/seedu/elisa/game/Wall.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to represent wall that takes up only one square."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class Wall {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final Color COLOR \u003d Color.BLUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Point point;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    Wall(Point point) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.point \u003d point;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public Point getPoint() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return point;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setPoint(Point point) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.point \u003d point;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 25
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/CheckTaskRunnable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.FutureRemindersList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * A runnable that checks if the nearest reminder in futureReminders has a datetime that exceeds now."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class CheckTaskRunnable implements Runnable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CheckTaskRunnable.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ArrayList\u003cItem\u003e activeReminders;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private FutureRemindersList futureReminders;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public CheckTaskRunnable(ItemModel model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        futureReminders \u003d model.getFutureRemindersList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        while (futureReminders.size() \u003e 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 futureReminders.get(0).getReminder().get().getOccurrenceDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            futureReminders.remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ArrayList\u003cItem\u003e(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        reminder \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Method that checks if the nearest reminder in futureReminders has a datetime that exceeds current datetime.."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logger.info(\"----------------[LOGIC MANAGER][\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                + \"Checking for pending reminders\" + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (futureReminders.size() \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            reminder \u003d futureReminders.get(0).getReminder().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            while (reminder !\u003d null \u0026\u0026 reminder.getOccurrenceDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                logger.info(\"----------------[LOGIC MANAGER][\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        + \"Transferring reminder from futureReminders to activeReminders\" + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                item \u003d futureReminders.remove(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                activeReminders.add(item);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                if (futureReminders.size() \u003e 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    reminder \u003d futureReminders.get(0).getReminder().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    reminder \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            model.getActiveReminderListProperty().addReminders(activeReminders);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 63
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.PriorityExitStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * @see seedu.elisa.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage getItemStorage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    VisualizeList getVisualList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    ItemModel getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    void shutdown();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    ListPropertyBase\u003cItem\u003e getActiveRemindersListProperty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    SimpleBooleanProperty getPriorityMode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    boolean isSystemToggle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    PriorityExitStatus getExitStatus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    boolean isFocusMode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 5,
      "lrchema": 13,
      "sianghwee": 12,
      "mannggoo": 5,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.concurrent.ScheduledThreadPoolExecutor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.ElisaParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.parser.FocusElisaParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.PriorityExitStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final ItemModel model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ElisaParser addressBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final ElisaParser normalParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final ElisaParser focusParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final ScheduledThreadPoolExecutor checker;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final AutoRescheduleManager autoRescheduleManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public LogicManager(ItemModel model, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        normalParser \u003d new ElisaParser(model.getElisaCommandHistory());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        addressBookParser \u003d normalParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        focusParser \u003d new FocusElisaParser(model.getElisaCommandHistory());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager \u003d AutoRescheduleManager.getInstance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager.initStorageEvents(model.getEventList(), model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Runnable checkTask \u003d new CheckTaskRunnable(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker \u003d new ScheduledThreadPoolExecutor(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker.scheduleAtFixedRate(checkTask, 0, 5, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // Changing of parser in focus mode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.getFocusMode().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newValue) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                addressBookParser \u003d focusParser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                addressBookParser \u003d normalParser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final ListPropertyBase\u003cItem\u003e getActiveRemindersListProperty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return model.getActiveReminderListProperty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Shutdown threads for Reminders, PriorityMode and AutoRescheduleManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final void shutdown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker.shutdown();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager.shutdown();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.closePriorityModeThread();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Logging"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            storage.saveItemStorage(model.getItemStorage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.updateCommandHistory(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage getItemStorage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getItemStorage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return model.getVisualList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemModel getModel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getItemStorageFilePath();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SimpleBooleanProperty getPriorityMode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getPriorityMode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isSystemToggle() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.isSystemToggle();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityExitStatus getExitStatus() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getExitStatus();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isFocusMode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.isFocusMode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 16,
      "lrchema": 22,
      "sianghwee": 44,
      "mannggoo": 10,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.RescheduleTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Add an Item to the item list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public abstract class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final AutoRescheduleManager AUTO_RESCHEDULE_MANAGER \u003d AutoRescheduleManager.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Item added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    protected final Item toAdd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand(Item item) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        toAdd \u003d item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Executes this AddCommand to add the new item to this model."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return CommandResult of executing this add"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws CommandException if item fails to be added to this model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Check if item already exists, else, add it to the model."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.addItem(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (toAdd.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Event event \u003d toAdd.getEvent().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask task \u003d new RescheduleTask(toAdd, event.getPeriod(), model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AUTO_RESCHEDULE_MANAGER.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Notify Ui to change the view the that of the newly added item."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(getListView());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // should not enter here as listView given is definitely valid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CommandResult(String.format(getMessageSuccess(), toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public abstract String getListView();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public abstract String getMessageSuccess();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.deleteItem(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (toAdd.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Event event \u003d toAdd.getEvent().get(); // if autoReschedule is present, item definitely has an event."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask.removeFromAllTasks(toAdd.getEvent().get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lrchema": 10,
      "mannggoo": 60,
      "sianghwee": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_AUTO_RESCHEDULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds an Event to the item model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_EVENT_VIEW \u003d \"E\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Oh great, new Event added: %1$s \\nDon\u0027t forget about it!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an Event to the Event list. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cCompulsory\u003e \" + \"description \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cCompulsory\u003e \" + PREFIX_DATETIME + \" Event time \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_REMINDER + \" Reminder \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_PRIORITY + \" Priority \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_TAG + \" Tag \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_AUTO_RESCHEDULE + \" Period \\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddEventCommand(Item item) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public String getListView() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return SHOW_EVENT_VIEW;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public String getMessageSuccess() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 8,
      "mannggoo": 38
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds a Reminder to the item model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddReminderCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_REMINDER_VIEW \u003d \"R\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fine, I\u0027ll remind you. New Reminder added: %1$s\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            + \"\\nIt\u0027s like you need a keeper\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Reminder to the Reminder list. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cCompulsory\u003e \" + \"description \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cCompulsory\u003e \" + PREFIX_REMINDER + \" Reminder time \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_PRIORITY + \" Priority \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_TAG + \" Tag \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddReminderCommand(Item item) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public String getListView() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return SHOW_REMINDER_VIEW;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public String getMessageSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 9,
      "mannggoo": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds a Task to the item model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_TASK_VIEW \u003d \"T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"task\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\\nDon\u0027t just watch it pile up!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Task to the Task List. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cCompulsory\u003e \" + \"description \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_DATETIME + \" Deadline \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_REMINDER + \" Reminder \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_PRIORITY + \" Priority \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_TAG + \" Tag \\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddTaskCommand(Item item) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public String getListView() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return SHOW_TASK_VIEW;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public String getMessageSuccess() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 8,
      "mannggoo": 36
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item list has been cleared! (About time, isn\u0027t it?)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemStorage beforeClear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeClear \u003d model.getItemStorage().deepCopy();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setItemStorage(beforeClear);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        model.repopulateLists();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 22,
      "mannggoo": 1,
      "sianghwee": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ClearScreenCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Clears the chat box."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ClearScreenCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearscreen\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Commands has been cleared! (About time, isn\u0027t it?)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new ClearScreenCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 18
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ClearScreenCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command Result class for Clear Screen Command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ClearScreenCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ClearScreenCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/CloseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates a command to close the expanded view of an item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class CloseCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"close\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"I\u0027ve closed it\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"There\u0027s nothing to close\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Carries out the operations of this close command on the given model."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the result of executing this command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CloseCommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CloseCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 24
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/CloseCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates the command result of CloseCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class CloseCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CloseCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public abstract CommandResult execute(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String pane \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String theme \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.theme;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 7,
      "-": 65,
      "Icesiolz": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ContinueCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Mark a task as not done using it\u0027s index in ELISA."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ContinueCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cont\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \": Mark the item identified by the index number used in the displayed item list as not done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Can only be used on task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_COMPLETE_ITEM_SUCCESS \u003d \"Oops... More work I guess. \\nItem: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item itemNotDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ContinueCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            oldItem \u003d model.getItem(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemNotDone \u003d model.markComplete(targetIndex.getZeroBased(), false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!isExecuted()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                setExecuted(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COMPLETE_ITEM_SUCCESS, itemNotDone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(\"Continue can only be done on the task list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.replaceItem(itemNotDone, oldItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                || (other instanceof ContinueCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ContinueCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sianghwee": 75
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemIndexWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.RescheduleTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Finally! Deleted Item: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemIndexWrapper deleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() || targetIndex.getOneBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        deleted \u003d model.getIndices(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item itemDeleted \u003d model.deleteItem(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemDeleted.hasAutoReschedule()) { // also ensures that itemDeleted has an Event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask.removeFromAllTasks(itemDeleted.getEvent().get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, itemDeleted));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.addItem(deleted);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if deleted item is autoReschedulable, add item back to thread with an updated DateTime."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (deleted.getItem().hasAutoReschedule()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Item item \u003d deleted.getItem();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AutoRescheduleManager.updateEvent(item, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 26,
      "mannggoo": 19,
      "sianghwee": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Mark a task as done using it\u0027s index in ELISA."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class DoneCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \": Mark the item identified by the index number used in the displayed item list as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Can only be used on task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_COMPLETE_ITEM_SUCCESS \u003d \"Finally! Completed Item: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item itemDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            oldItem \u003d model.getItem(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemDone \u003d model.markComplete(targetIndex.getZeroBased(), true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            if (!isExecuted()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                setExecuted(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COMPLETE_ITEM_SUCCESS, itemDone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(\"Done can only be done on the task list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.replaceItem(itemDone, oldItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lrchema": 23,
      "sianghwee": 52
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DownCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command for scrolling down."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class DownCommand extends ScrollCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"down\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scrolling down...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"down\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public DownCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (pane.equals(\"Illegal\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new DownCommandResult(MESSAGE_SUCCESS, pane);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 27
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DownCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to identify when a command result is a down command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class DownCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public DownCommandResult(String feedbackToUser, String pane) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.pane \u003d pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 17
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.RescheduleTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Edits the details of an existing item in the item list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item in the shown list \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \" DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_REMINDER + \" REMINDER] \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \" PRIORITY] \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \" TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + PREFIX_DESCRIPTION + \" DRINK WATER \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + PREFIX_PRIORITY + \" HIGH\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Item: %1$s,\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            + \" because someone couldn\u0027t make up their mind\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the item list.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final EditItemDescriptor editItemDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item editedItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index              of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param editItemDescriptor details to edit the person with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditCommand(Index index, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(editItemDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item oldItem \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.oldItem \u003d oldItem;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item editedItem \u003d createEditedItem(oldItem, editItemDescriptor, lastShownList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.editedItem \u003d editedItem;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(editedItem)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(\"Edit failed! Don\u0027t you remember that this item already exists?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if event has AutoReschedule, add it to the AutoRescheduleManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editedItem.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Event event \u003d editedItem.getEvent().get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask task \u003d new RescheduleTask(editedItem, event.getPeriod(), model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AutoRescheduleManager.getInstance().add(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model.editItem(oldItem, editedItem);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.editItem(editedItem, oldItem);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Create a new Item with the new edited details."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param itemToEdit         old item to edit"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param editItemDescriptor details to edit the item with"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param lastShownList      the last list shown to the user, set by the model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Item with the edited details"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws CommandException representing failure to create new edited item"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static Item createEditedItem(Item itemToEdit, EditItemDescriptor editItemDescriptor,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                         VisualizeList lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription updatedDescription \u003d editItemDescriptor"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getDescription()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit.getItemDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cTask\u003e updatedTask \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getTask()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getTask()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cEvent\u003e updatedEvent \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getEvent()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getEvent()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e updatedReminder \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getReminder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getReminder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editItemDescriptor.getTags().orElse(itemToEdit.getTags());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority updatedPriority \u003d editItemDescriptor.getPriority().orElse(itemToEdit.getPriority());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cAutoReschedulePeriod\u003e updatedPeriod \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getAutoReschedulePeriod()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit.hasEvent()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        ? itemToEdit.getEvent().get().getPeriod() : null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(updatedDescription);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(updatedTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemPriority(updatedPriority);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedTask.isPresent()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setTask(updatedTask.get());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedEvent.isPresent()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (updatedPeriod.isPresent()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                updatedEvent \u003d Optional.of(updatedEvent.get().setReschedulePeriod(updatedPeriod.get()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(updatedEvent.get());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedReminder.isPresent()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(updatedReminder.get());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteTask()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setTask(null);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteEvent()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteReminder()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item updatedItem;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            updatedItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return updatedItem;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Create a new EditItemDescriptor that edits the details of an item."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static class EditItemDescriptor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private ItemDescription description;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Task task;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Event event;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Reminder reminder;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private AutoReschedulePeriod period;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteTask \u003d false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteEvent \u003d false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteReminder \u003d false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        public EditItemDescriptor() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setTask(toCopy.task);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setEvent(toCopy.event);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setReminder(toCopy.reminder);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setAutoReschedulePeriod(toCopy.period);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteTask(toCopy.hasDeleteTask);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteEvent(toCopy.hasDeleteEvent);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteReminder(toCopy.hasDeleteReminder);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, task, event, reminder, priority, tags, period);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setDescription(ItemDescription description) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cItemDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setTask(Task task) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cTask\u003e getTask() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(task);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setEvent(Event event) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cEvent\u003e getEvent() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(event);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setAutoReschedulePeriod(AutoReschedulePeriod period) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.period \u003d period;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cAutoReschedulePeriod\u003e getAutoReschedulePeriod() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(period);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean hasAnyDelete() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return (hasDeleteEvent || hasDeleteReminder || hasDeleteTask);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteTask(boolean bool) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteTask \u003d bool;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteTask() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteTask;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteEvent(boolean bool) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteEvent \u003d bool;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteEvent() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteEvent;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteReminder(boolean bool) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteReminder \u003d bool;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteReminder() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteReminder;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 39,
      "mannggoo": 189,
      "sianghwee": 3,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"ELISee you again!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class FindCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final String[] searchString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeFilter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FindCommand(String[] searchString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeFilter \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.findItem(searchString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                String.format(Messages.MESSAGE_ITEM_LISTED_OVERVIEW, model.getVisualList().size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeFilter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 searchString.equals(((FindCommand) other).searchString)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 23,
      "sianghwee": 9,
      "mannggoo": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/GameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command class for Game."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class GameCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"game\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Seems like you are really bored. Lets play a game!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"game H / game E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String diff;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public GameCommand(String diff) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.diff \u003d diff;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(diff.toLowerCase()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case (\"hard\"):"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case (\"h\"):"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new GameHardCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case (\"easy\"):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case (\"e\"):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new GameCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/GameCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command Result class for easy mode of Game."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class GameCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public GameCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/GameHardCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command Result class for hard mode of game."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class GameHardCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public GameHardCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/JokeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * This commands asks Elisa to give user a joke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class JokeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"joke\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new CommandResult(model.getJoke());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 19
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/OpenCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates an open command to expand the view of an item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"opening up item %d\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Opens up the desired item to view more details.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: INDEX (Must be a positive integer within the current list) \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private VisualizeList beforeOpen;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenCommand(Index index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Executes this command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the command result of executing this command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws CommandException if the index given is invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        beforeOpen \u003d model.getVisualList().deepCopy(); // for undo. Undo action is technically close."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList(); //shallow copy just to get item"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item toOpen \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new OpenCommandResult(String.format(MESSAGE_SUCCESS, index.getOneBased()), toOpen);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 50
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/OpenCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates a command result for open the view of a given item."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenCommandResult(String feedbackToUser, Item item) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 20
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/PriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Toggle the state of ELISA between priority and non-priority mode."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class PriorityCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"priority\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Activates the priority mode of this application.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"It can be activated indefinitely by using \\\"priority\\\" or \\\"priority 10.min.later\\\"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Include the flag -f or -focus to enter a more focus mode i.e. \\\"priority -f\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String FINISHED_ALL_TASKS \u003d \"Congrats! You have finished all your tasks.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \" Taking you out of priority mode now.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String TIME_OUT \u003d \"Oops, guess you are out of time. Hope you have done enough!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String PRIORITY_MODE_OFF \u003d \"Priority mode deactivated! Not so stressed anymore, are you?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private static final String PRIORITY_MODE_ON \u003d \"Priority mode activated, just manage this one task, that\u0027ll do.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String FOCUS_MODE_ON \u003d \"Let\u0027s focus on this one task!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String NO_TASK_TO_DO \u003d \"You have no incomplete task. Go out and enjoy the sun.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String PRIORITY_MODE_ERROR \u003d \"Priority mode can only be activated on task pane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean focusMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityCommand(boolean focusMode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.focusMode \u003d focusMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            boolean status \u003d model.togglePriorityMode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (focusMode \u0026\u0026 status) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                model.toggleOnFocusMode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(status ? (focusMode ? FOCUS_MODE_ON : PRIORITY_MODE_ON)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    : (model.getExitStatus() \u003d\u003d null ? PRIORITY_MODE_OFF : NO_TASK_TO_DO));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(PRIORITY_MODE_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.togglePriorityMode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 25,
      "sianghwee": 37
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Class for redoing a previously undone command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public RedoCommand(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (elisaCommandHistory.sizeRedo() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTHING_TO_REDO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            UndoableCommand lastDone \u003d elisaCommandHistory.popRedo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            lastDone.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new CommandResult(\"Redo [\" + lastDone.getCommandWord() + \"] command successful!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 32
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ScheduledPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Create a priority command that will turn off after a certain time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ScheduledPriorityCommand extends PriorityCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"priority\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private LocalDateTime ldt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Constructor to create the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ldt the time at which the priority mode will end."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ScheduledPriorityCommand(LocalDateTime ldt, boolean focusMode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(focusMode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ZonedDateTime zdt \u003d ldt.atZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.ldt \u003d ldt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.scheduleOffPriorityMode(ldt);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ScrollCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Abstract class for scrolling."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public abstract class ScrollCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String pane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ScrollCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.pane \u003d \"tabPane\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(\"Scrolling\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "Icesiolz": 17
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Switches the current view to the desired view."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ShowCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TASK_VIEW_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_VIEW_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_VIEW_COMMAND \u003d \"R\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String CALENDAR_VIEW_COMMAND \u003d \"C\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Shows the desired view.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: KEYWORD (T,E,R,C)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" E\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched view to %1$s, because somebody couldn\u0027t use the mouse\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final String targetView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final String targetList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeSwitch;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public ShowCommand(String unprocessedView) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String targetView \u003d unprocessedView.toUpperCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.targetView \u003d targetView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(targetView) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case TASK_VIEW_COMMAND:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d TASK_VIEW_COMMAND; //\"TASK\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case EVENT_VIEW_COMMAND:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d EVENT_VIEW_COMMAND; //\"EVENT\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case CALENDAR_VIEW_COMMAND:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.targetList \u003d CALENDAR_VIEW_COMMAND; //\"CALENDAR\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case REMINDER_VIEW_COMMAND:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d REMINDER_VIEW_COMMAND; //\"REMINDER\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeSwitch \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(targetList); // should be T/E/R"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(\"Show command format is incorrect. It should be \\\"show T\\\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetView));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeSwitch);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 20,
      "sianghwee": 3,
      "mannggoo": 23,
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_SNOOZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Edits the details of an existing item in the item list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class SnoozeCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"snooze\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Snoozes the reminder \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"by the index number used in the reminder list \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"or the most recent occurred reminder if no index is provided.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"Parameters: [INDEX] (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"[\" + PREFIX_SNOOZE + \"SNOOZE TIME]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + PREFIX_SNOOZE + \"1.min.later\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_SNOOZED_REMINDER_SUCCESS \u003d \"Snoozed Reminder: %1$s,\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \" because someone is real lazy...\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private static final String SHOW_REMINDER_VIEW \u003d \"R\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final boolean hasIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime newReminderOccurrence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item snoozedItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param hasIndex              boolean that indicates if an index was specified."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param index                 of the item to edit."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newReminderOccurrence LocalDateTime of new occurrence of reminder."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public SnoozeCommand(boolean hasIndex, Index index, LocalDateTime newReminderOccurrence) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireAllNonNull(hasIndex, newReminderOccurrence);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.hasIndex \u003d hasIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.newReminderOccurrence \u003d newReminderOccurrence;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            model.setVisualList(SHOW_REMINDER_VIEW);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (hasIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            oldItem \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            snoozedItem \u003d oldItem.changeReminder("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    oldItem.getReminder().get().changeOccurrenceDateTime(newReminderOccurrence));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                oldItem \u003d model.getLatestOccurredReminder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_PREVIOUS_REMINDER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            snoozedItem \u003d oldItem.changeReminder("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    oldItem.getReminder().get().changeOccurrenceDateTime(newReminderOccurrence));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        model.editItem(oldItem, snoozedItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SNOOZED_REMINDER_SUCCESS, snoozedItem));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        model.replaceItem(snoozedItem, oldItem);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 100,
      "lrchema": 4
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Sort the current list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class SortCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s has been sorted!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeSort;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Optional\u003cComparator\u003cItem\u003e\u003e comparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SortCommand(Optional\u003cComparator\u003cItem\u003e\u003e comparator) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeSort \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (comparator.isPresent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            model.sort(comparator.get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            model.sort();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, beforeSort.getClass().getSimpleName()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeSort);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 22,
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ThemeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Changes the theme."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ThemeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"theme\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Oh dumb dumb, choose only \u0027theme white\u0027 or \u0027theme black\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Oh you don\u0027t like the color? Lets switch it up!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String theme;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ThemeCommand(String theme) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(theme.trim()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"white\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"black\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new ThemeCommandResult(MESSAGE_SUCCESS, theme);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ThemeCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class identifies when a command is a theme command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ThemeCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String theme;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ThemeCommandResult(String feedbackToUser, String theme) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.theme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 18
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Undoes last entered command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoCommand(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (elisaCommandHistory.sizeUndo() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            UndoableCommand lastDone \u003d elisaCommandHistory.popUndo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            lastDone.reverse(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new CommandResult(\"Undo [\" + lastDone.getCommandWord() + \"] command successful!\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                    + \" Try to do it right this time..\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 31,
      "mannggoo": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UndoableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Superclass of all commands that can be undone"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private boolean isExecuted \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public abstract void reverse(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public abstract String getCommandWord();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public boolean isExecuted() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return isExecuted;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setExecuted(boolean executed) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        isExecuted \u003d executed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 22
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command for scrolling up."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class UpCommand extends ScrollCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"up\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scrolling up...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"up\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public UpCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (pane.equals(\"Illegal\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new UpCommandResult(MESSAGE_SUCCESS, pane);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 27
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UpCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to identify when a command result is an up command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class UpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public UpCommandResult(String feedbackToUser, String pane) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.pane \u003d pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 17
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/AddEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_AUTO_RESCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        PREFIX_TAG, PREFIX_AUTO_RESCHEDULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Event must have a deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Event must be present."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e itemReminder \u003d ParserUtil.parseReminder("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.getValue(PREFIX_REMINDER).orElse(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d ParserUtil.parsePriority("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.getValue(PREFIX_PRIORITY).orElse(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Optional\u003cAutoReschedulePeriod\u003e reschedulePeriod \u003d ParserUtil.parseReschedule("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    argMultimap.getValue(PREFIX_AUTO_RESCHEDULE).orElse(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (reschedulePeriod.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                event \u003d event.setAutoReschedule(true).setReschedulePeriod(reschedulePeriod.get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                if (event.getStartDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    LocalDateTime updatedDateTime \u003d ParserUtil.getUpdatedDateTime(event.getStartDateTime(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            reschedulePeriod.get().getPeriod());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    event \u003d event.changeStartDateTime(updatedDateTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            System.out.println(\"Issue with parsing -auto \" + e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemBuilder.setItemPriority(priority.get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setEvent(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemReminder.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(itemReminder.get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddEventCommand(newItem);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 17,
      "mannggoo": 90
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/AddReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_AUTO_RESCHEDULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddReminderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddReminderCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY, PREFIX_TAG,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        PREFIX_AUTO_RESCHEDULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // AutoReschedule cannot be present with reminders"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTO_RESCHEDULE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"-auto can\u0027t be used with reminders!! Use it with events instead!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Reminder must be present."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            throw new ParseException(\"I can\u0027t believe you forgot the reminder format again! \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    + \"The format should follow:\\n\\\"reminder DESCRIPTION -r REMINDER [-t TAG]\\\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder itemReminder \u003d ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).get()).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setReminder(itemReminder);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            itemBuilder.setItemPriority(priority.get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddReminderCommand(newItem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 5,
      "mannggoo": 66,
      "Icesiolz": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_AUTO_RESCHEDULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " *  Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY, PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        PREFIX_AUTO_RESCHEDULE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTO_RESCHEDULE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"-auto can\u0027t be used with task!! Use it with events instead!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cEvent\u003e dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).orElse(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e itemReminder \u003d ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).orElse(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Task task \u003d new Task(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTask(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemBuilder.setItemPriority(priority.get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (dateTime.isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(dateTime.get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemReminder.isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(itemReminder.get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddTaskCommand(newItem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 11,
      "mannggoo": 59
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix + \" \", fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (argPrefix.equals(CliSyntax.PREFIX_DELETE_TASK)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    || argPrefix.equals(CliSyntax.PREFIX_DELETE_EVENT)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    || argPrefix.equals(CliSyntax.PREFIX_DELETE_REMINDER)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.put(argPrefix, \"Dummy Value\"); // so that .isPresent() would return true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 8,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*ELISA prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_REMINDER \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final Prefix PREFIX_SNOOZE \u003d new Prefix(\"-s\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"-p\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"-desc\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_EVENT \u003d new Prefix(\"--e\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_TASK \u003d new Prefix(\"--tk\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_REMINDER \u003d new Prefix(\"--r\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_AUTO_RESCHEDULE \u003d new Prefix(\"-auto\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 1,
      "mannggoo": 10,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ContinueCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INCORRECT_SYMBOL_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parses input arguments and creates a new ContinueCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ContinueCommandParser implements Parser\u003cContinueCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ContinueCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * and returns a ContinueCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ContinueCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // flags should be empty in this case, focus on args only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // if flags is not empty, it means symbol \"-\" is present"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!flags.equals(\" \")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_SYMBOL_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // if index is not provided"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \" I need an index! \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + ContinueCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new ContinueCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 35,
      "mannggoo": 2
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents a Parser that is able to parse DateTime input into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public interface DateTimeParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses {@code stringDateTime} into a LocalDateTime and returns it"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the given string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    LocalDateTime parseDateTime(String stringDateTime) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DefinedDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.MidnightParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses string date time using a formatter dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class DefinedDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static Locale sgLocale \u003d new Locale(\"en\", \"SG\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the string using the given format and returns a LocalDateTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the format \"dd/MM/yyyy HHmm\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            String[] splitTime \u003d stringDateTime.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // If time given is 2400, prompts the user for 0000 of the next day instead"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (splitTime[1].equals(\"2400\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                throw new MidnightParseException(\"0000\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalDate processedDate \u003d LocalDate.parse(splitTime[0], dateFormatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (!isValid(splitTime[0])) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                throw new InvalidDateException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalTime processedTime \u003d LocalTime.parse(splitTime[1], timeFormatter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalDateTime processedDateTime \u003d LocalDateTime.of(processedDate, processedTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return processedDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (MidnightParseException me) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw me;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (InvalidDateException de) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw de;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \" Should be \\\"25/09/2019 2300\\\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Checks that the given date string is a valid date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param dateStr of the input date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return true if the date exists, false otherwise"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private boolean isValid(String dateStr) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu\", sgLocale)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            df.parse(dateStr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 69
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INCORRECT_SYMBOL_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public DeleteCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // flags should be empty in this case, focus on args only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if flags is not empty, it means symbol \"-\" is present"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!flags.equals(\" \")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_SYMBOL_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if index is not provided"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \" I need an index! \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "mannggoo": 14,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INCORRECT_SYMBOL_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DoneCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // flags should be empty in this case, focus on args only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if flags is not empty, it means symbol \"-\" is present"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!flags.equals(\" \")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_SYMBOL_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if index is not provided"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \" I need an index! \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "sianghwee": 20,
      "mannggoo": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_AUTO_RESCHEDULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DELETE_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DELETE_REMINDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DELETE_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code description} and {@code args} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditCommand parse(String description, String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processArgs \u003d args + \" \"; // account for the possibility that --tk or --r or --e is given with no space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            argMultiMap \u003d ArgumentTokenizer.tokenize(processArgs, PREFIX_DESCRIPTION, PREFIX_DATETIME, PREFIX_REMINDER,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    PREFIX_PRIORITY, PREFIX_TAG, PREFIX_DELETE_TASK, PREFIX_DELETE_REMINDER, PREFIX_DELETE_EVENT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    PREFIX_AUTO_RESCHEDULE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            logger.info(\"Failure to tokenize arguments: EditCommand\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Edit command format is incorrect.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        EditItemDescriptor editItemDescriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setDescription("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseDescription("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setEvent("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseDateTime("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_DATETIME).get()).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setReminder("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseReminder("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_REMINDER).get()).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_AUTO_RESCHEDULE).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setAutoReschedulePeriod("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseReschedule("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_AUTO_RESCHEDULE).get()).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setPriority("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parsePriority("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_PRIORITY).get()).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        parseTagsForEdit(argMultiMap.getAllValues(PREFIX_TAG)).ifPresent(editItemDescriptor::setTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if delete tag is present, even if edits are made above, relevant subitems should still be deleted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_TASK).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteTask(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteReminder(true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_EVENT).isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteEvent(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if ((!editItemDescriptor.isAnyFieldEdited()) \u0026\u0026 (!editItemDescriptor.hasAnyDelete())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new EditCommand(index, editItemDescriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 8,
      "mannggoo": 63,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ElisaParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.ClearScreenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.ContinueCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DownCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.JokeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.PriorityCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ElisaParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003cdescription\u003e[^-]*)(?\u003cflags\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaParser(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final Matcher matcher \u003d inputToMatcher(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String description \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String flags \u003d \" \" + matcher.group(\"flags\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return parseCommandHelper(commandWord, description, flags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the user input into the matcher to easily find the command word, description and flags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param userInput the input from the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the Matcher object of the user\u0027s input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the matcher is not of a valid format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected Matcher inputToMatcher(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \" This doesn\u0027t match anything!\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function that does the actual creation of the command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param commandWord the command word from the user\u0027s input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param description the description that comes with the user\u0027s input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param flags the flags that comes with the user\u0027s input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the command that is to be executed based on the user\u0027s input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the command word is not found."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected Command parseCommandHelper(String commandWord, String description, String flags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddTaskCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddEventCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddReminderCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new EditCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new DeleteCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new FindCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new UndoCommand(elisaCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new RedoCommand(elisaCommandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new ShowCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new SortCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PriorityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new PriorityCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new DoneCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"continue\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case ContinueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new ContinueCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case JokeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new JokeCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case ThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new ThemeCommand(description);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case UpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new UpCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case DownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new DownCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case ClearScreenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new ClearScreenCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new OpenCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case CloseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new CloseCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        case SnoozeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return new SnoozeCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case GameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new GameCommandParser().parse(description, \"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "lrchema": 34,
      "mannggoo": 25,
      "sianghwee": 47,
      "-": 40,
      "Icesiolz": 20
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/FastReminderDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_FAST_REMINDER_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.FastReminderParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse stringDateTime in fast reminder format (ie 10.min.later) to a LocalDateTime object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class FastReminderDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String MESSAGE_BEYOND_RANGE \u003d \"That\u0027s a bit too far don\u0027t you think? \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"I can only accept positive integers less than 100. For example: 100.day.later or 2.min.later\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String DAY_INDICATOR \u003d \"DAY\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String HOUR_INDICATOR \u003d \"HOUR\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String MIN_INDICATOR \u003d \"MIN\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Pattern BASIC_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Pattern.compile(\"(?\u003cquantity\u003e[1-9]\\\\d*)(\\\\.)(?\u003cunit\u003eMIN|HOUR|DAY)(\\\\.LATER)$\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse this stringDateTime into a LocalDateTime representation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the stringDateTime"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of stringDateTime is incorrect or if the value given is greater than 100"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //stringDateTime should be of format \"10.min.later\" or \"3.hour.later\" or \"2.day.later\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processedString \u003d stringDateTime.toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final Matcher matcher \u003d BASIC_INPUT_FORMAT.matcher(processedString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FAST_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String quantity \u003d matcher.group(\"quantity\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String unit \u003d matcher.group(\"unit\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final int intQuantity \u003d Integer.valueOf(quantity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (intQuantity \u003e 100) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new FastReminderParseException(MESSAGE_BEYOND_RANGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime current \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime processedDateTime \u003d LocalDateTime.now(); // just to initialize"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            switch (unit) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case DAY_INDICATOR:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusDays(intQuantity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case HOUR_INDICATOR:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusHours(intQuantity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case MIN_INDICATOR:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusMinutes(intQuantity);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // nothing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return processedDateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 70
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public FindCommand parse(String keywords, String empty) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String trimmedArgs \u003d keywords.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] keywordArray \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new FindCommand(keywordArray);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "mannggoo": 2,
      "sianghwee": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/FocusElisaParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.DownCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.UpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.FocusModeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The parser that is to be used by ELISA when it is in focus mode."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * It prevents certain commands from being parsed when it is in focus mode."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class FocusElisaParser extends ElisaParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FocusElisaParser(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(elisaCommandHistory);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final Matcher matcher \u003d super.inputToMatcher(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final String description \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final String flags \u003d \" \" + matcher.group(\"flags\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch(commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case UpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case GameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new FocusModeException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return super.parseCommandHelper(commandWord, description, flags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 47
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/GameCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.GameCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Parses input arguments and creates new GameCommand object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class GameCommandParser implements Parser\u003cGameCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GameCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * and returns a GameCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public GameCommand parse(String description, String empty) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (description.trim().isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new GameCommand(\"e\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new GameCommand(description.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 24
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/OpenCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses the input to create an OpenCommand with the proper parameters."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code description} to generate an OpenCommand with the item at the given index of this list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param description index of item"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param flags should be empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the given string is not a positive integer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenCommand parse(String description, String flags) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // flags should be empty in this case, focus on description only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new OpenCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    T parse(String description, String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.FastReminderParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.InvalidDateException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.MidnightParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INCORRECT_AUTORESCHEDULE_FORMAT \u003d \"Auto Reschedule format given is incorrect. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Use either hour/day/week or 10.min.later format\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DATETIME_FORMAT \u003d \"Date Time format given is incorrect. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Please follow this format: \\\"2019-09-25T23:59\\\"\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"or \\\"25/09/2019 2359\\\"\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"or \\\"10.min.later\\\"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INCORRECT_PRIORITY_FORMAT \u003d \"Priority format given is incorrect. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Please follow this format \\\"-p High\\\"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_SNOOZE_TIME \u003d \"You can\u0027t snooze backwards in time you lazy bird.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_MIDNIGHT \u003d \"Perhaps you mean %s of the next day?\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses {@code description} into a {@code ItemDescription} and returns it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param description given for the item."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new item description that is processed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the description is invalid (empty description)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static ItemDescription parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!ItemDescription.isValidItemDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(ItemDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new ItemDescription(trimmedDescription);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code dateTime} into a {@code Optional\u003cEvent\u003e} and returns it."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts a String to a LocalDateTime object and creates a new event with it."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param dateTime representing the deadline of the event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(event) if the Event created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of deadline provided is incorrect"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cEvent\u003e parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        formattedDateTime \u003d getFormattedDateTime(trimmedDateTime); //LocalDateTime.parse(trimmedDateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event newEvent \u003d new Event(formattedDateTime, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(newEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code reminder} into a {@code Optional\u003cReminder\u003e} and returns it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts the string time into a LocalDateTime object and create a Reminder with it."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param reminder representing the time of the reminder"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(reminder) if the reminder created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of the reminder time is incorrect"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cReminder\u003e parseReminder(String reminder) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDateTime \u003d reminder.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            formattedDateTime \u003d getFormattedDateTime(trimmedDateTime); //LocalDateTime.parse(trimmedDateTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (formattedDateTime.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new ParseException(\"You can\u0027t remind your past self silly!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect. \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Please follow this format: \\\"-r 2019-09-25T23:59:50.63\\\"\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"or \\\"-r 25/09/2019 2359\\\"\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"of \\\"-r 10.min.later\\\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder newReminder \u003d new Reminder(formattedDateTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(newReminder);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parse the {@code snoozeTillTime} into a {@code Optional\u003cLocalDateTime\u003e} and returns it."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Converts the string time into a LocalDateTime object/"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param snoozeTillTime representing the time of the next occurrence of the Reminder"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return Optional.of(formattedDateTime) if the occurenceDateTime created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @throws ParseException if the format of the reminder time is incorrect"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static Optional\u003cLocalDateTime\u003e parseSnooze(String snoozeTillTime) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (snoozeTillTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String trimmedDateTime \u003d snoozeTillTime.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        formattedDateTime \u003d getFormattedDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Checks if you are snoozing to a dateTime that is before now."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (formattedDateTime.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SNOOZE_TIME);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Optional.of(formattedDateTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code priority} into a {@code Optional\u003cPriority\u003e} and returns it."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts the string of priority into an enumeration priority object, is case-insensitive."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param priority of the task or event"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(priority) if the priority is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the priority given is not high/medium/low"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cPriority\u003e parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority processedPriority;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (trimmedPriority.equalsIgnoreCase(\"HIGH\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else if (trimmedPriority.equalsIgnoreCase(\"MEDIUM\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else if (trimmedPriority.equalsIgnoreCase(\"LOW\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_PRIORITY_FORMAT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(processedPriority); //maybe use enum here"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses string {@code period} into an {@code Optional\u003cAutoReschedulePeriod\u003e} representation of the period."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period of the auto-reschedule. Expects \"hour\"/\"day\"/\"week\" or format \"10.min.later\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(AutoRechedulePeriod) if this period is valid. Optional.of(empty) otherwise."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of period given is incorrect."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cAutoReschedulePeriod\u003e parseReschedule(String period) throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processedPeriod \u003d period.trim().toUpperCase();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        boolean isFixedPeriod \u003d false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AutoReschedulePeriod reschedulePeriod \u003d new AutoReschedulePeriod(0); // just to initialise"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        switch(processedPeriod) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case(AutoReschedulePeriod.BY_HOUR):"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byHour();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case (AutoReschedulePeriod.BY_DAY):"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byDay();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case (AutoReschedulePeriod.BY_WEEK):"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byWeek();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // nothing"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!isFixedPeriod) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                DateTimeParser parser \u003d new FastReminderDateTimeParser();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                LocalDateTime temp \u003d parser.parseDateTime(processedPeriod);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                reschedulePeriod \u003d AutoReschedulePeriod.from(temp);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                if (e instanceof FastReminderParseException) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    throw new ParseException(\"Hmmm... There seems to be an issue with your -auto flag... \""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            + e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    throw new ParseException(MESSAGE_INCORRECT_AUTORESCHEDULE_FORMAT);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(reschedulePeriod);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the string by trying out different formats, and returns a LocalDateTime"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the date and time"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a LocalDateTime representation of the given string"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws DateTimeParseException if the format of the string given is incorrect"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static LocalDateTime getFormattedDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        boolean invalidFormat \u003d false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ParseException parseException \u003d new ParseException(MESSAGE_INCORRECT_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArrayList\u003cDateTimeParser\u003e allParsers \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new StandardDateTimeParser());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new DefinedDateTimeParser());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new FastReminderDateTimeParser());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime processedDateTime \u003d LocalDateTime.now(); // just to initialize"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (DateTimeParser parser : allParsers) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d parser.parseDateTime(stringDateTime);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (FastReminderParseException fp) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                parseException \u003d fp;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (MidnightParseException mp) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                String formatted \u003d String.format(MESSAGE_MIDNIGHT, mp.getMessage());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                parseException \u003d new ParseException(formatted);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (InvalidDateException de) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d true;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                parseException \u003d de;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (ParseException err) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (invalidFormat) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw parseException;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return processedDateTime;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static LocalDateTime getUpdatedDateTime(LocalDateTime startDateTime, Long period) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Use modulo to get the remaining time till the next reschedule time. Add that remaining time to the time now."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long millisDifference \u003d Duration.between(startDateTime, LocalDateTime.now()).toMillis(); // positive difference;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long millisRemainder \u003d millisDifference % period; //millisDifferenceBi.mod(periodBi).longValue();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long tillNextStart \u003d period - millisRemainder;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime updatedDateTime \u003d LocalDateTime.now().plusNanos(Duration.ofMillis(tillNextStart).toNanos());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return updatedDateTime;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 29,
      "lrchema": 9,
      "mannggoo": 208,
      "sianghwee": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/PriorityCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.PriorityCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ScheduledPriorityCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parser to generate a priority command based on the user\u0027s input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class PriorityCommandParser implements Parser\u003cPriorityCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PriorityCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * and returns a PriorityCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String time \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        flags \u003d flags.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        boolean focusMode \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!flags.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (flags.equalsIgnoreCase(\"-f\") || flags.equalsIgnoreCase(\"-focus\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                focusMode \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PriorityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (time.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new PriorityCommand(focusMode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            LocalDateTime ldt \u003d ParserUtil.getFormattedDateTime(time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new ScheduledPriorityCommand(ldt, focusMode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PriorityCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "sianghwee": 41
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ShowCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TASK_VIEW_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_VIEW_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_VIEW_COMMAND \u003d \"R\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String CALENDAR_VIEW_COMMAND \u003d \"C\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code view} in the context of ShowCommand and returns a ShowCommand for execution"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param view of the view to show"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param empty an empty string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return appropriate ShowCommand to execute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of view string is incorrect"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public ShowCommand parse(String view, String empty) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(view);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String pane \u003d view.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (pane.equalsIgnoreCase(TASK_VIEW_COMMAND)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(EVENT_VIEW_COMMAND)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(REMINDER_VIEW_COMMAND)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(CALENDAR_VIEW_COMMAND)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new ShowCommand(pane);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"The format given for show command is incorrect. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Example usage: \\\"show T\\\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/SnoozeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_SNOOZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class SnoozeCommandParser implements Parser\u003cSnoozeCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Duration defaultSnoozeDuration \u003d Duration.of(5, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the given {@code description} and {@code args} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public SnoozeCommand parse(String description, String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String processArgs \u003d args + \" \"; // account for the possibility that --tk or --r or --e is given with no space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            argMultiMap \u003d ArgumentTokenizer.tokenize(processArgs, PREFIX_SNOOZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            logger.info(\"Failure to tokenize arguments: SnoozeCommand\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            throw new ParseException(\"Snooze command format is incorrect.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        boolean hasIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (!description.isBlank()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                index \u003d ParserUtil.parseIndex(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                hasIndex \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                //TODO: Auto snooze most recent reminder"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            index \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            hasIndex \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime newReminderOccurrence \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_SNOOZE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            newReminderOccurrence \u003d ParserUtil.parseSnooze(argMultiMap.getValue(PREFIX_SNOOZE).get()).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            newReminderOccurrence \u003d LocalDateTime.now().plus(defaultSnoozeDuration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new SnoozeCommand(hasIndex, index, newReminderOccurrence);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 71
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parser to create a sort command with the right arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String DESC \u003d \"desc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String DESCRIPTION \u003d \"description\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String PRI \u003d \"pri\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String PRIORITY \u003d \"priority\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Create a sort command base on the flag that was passed in."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param args of the way in which"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param empty an empty string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return appropriate SortCommand to execute"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the argument string is incorrect"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SortCommand parse(String args, String empty) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String flag \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (flag.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new SortCommand(Optional.empty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Comparator\u003cItem\u003e comparator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch(flag.toLowerCase()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DESC:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            comparator \u003d (item1, item2) -\u003e item1.getItemDescription().getDescription()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    .compareToIgnoreCase(item2.getItemDescription().getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PRI:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PRIORITY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            comparator \u003d (item1, item2) -\u003e item1.getPriority().compareTo(item2.getPriority());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException(\"The parameter given for sort command is incorrect. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    + \"Example usage: \\\"sort desc\\\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new SortCommand(Optional.of(comparator));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "sianghwee": 49
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/StandardDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.MidnightParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse string Date Time in the standard way using LocalDateTime.parse()."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class StandardDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse string using LocalDateTime.parse()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of this string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws DateTimeParseException if the format of this string is incorrect"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime parsed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            parsed \u003d LocalDateTime.parse(stringDateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return parsed;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (stringDateTime.contains(\"24:00\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                throw new MidnightParseException(\"00:00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \" Should be \\\"2019-12-03T23:00\\\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 31
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/exceptions/FastReminderParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents a parse error encountered by FastReminderDateTimeParser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class FastReminderParseException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public FastReminderParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public FastReminderParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/exceptions/FocusModeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Exception that is thrown when attempting to run some operation when in focus mode."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class FocusModeException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FocusModeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(\"Hey, stay focused on your task!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/exceptions/InvalidDateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents a parse error encountered by parsing a non-existent date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class InvalidDateException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public InvalidDateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(\"This date does not exist!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 11
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/exceptions/MidnightParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "  * Represents a parse error encountered with parsing \"24:00\"."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "  */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class MidnightParseException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public MidnightParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 11
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/AutoRescheduleManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Manages all the events that are to be rescheduled automatically at each of their given interval period."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Uses a Timer to keep track of when to update the Event\u0027s startDateTime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AutoRescheduleManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static AutoRescheduleManager manager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static Timer timer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private AutoRescheduleManager() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * The only way to get an AutoRescheduleManager object. There should only be one AutoRescheduleManager at any time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the only instance of AutoRescheduleManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoRescheduleManager getInstance() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (manager \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            manager \u003d new AutoRescheduleManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            timer \u003d new Timer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return manager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Initialise this AutoRescheduleManager with all the events that can be rescheduled, in the given event list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update event times to the latest upcoming one, given their period."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param eventList of all events in the storage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model containing the events"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void initStorageEvents(EventList eventList, ItemModel model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (Item item : eventList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (item.hasEvent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                updateEvent(item, model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Updates the start time of the event and creates a RescheduleTask based on the updated event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * If the current start time is already over, update to the next upcoming time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Else, start time remains the same."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item whose event is to be updated"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model where the item is stored in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void updateEvent(Item item, ItemModel model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (event.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (event.getStartDateTime().compareTo(LocalDateTime.now()) \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // event date is after now"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // add event to Timer thread, add(newEvent)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                RescheduleTask task \u003d new RescheduleTask(item, event.getPeriod(), model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                getInstance().add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // event date is before now, but is reschedulable"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // modify the event date to the most upcoming one (Use modulo and add remainder)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // add(newEvent)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                LocalDateTime updatedDateTime \u003d getUpdatedDateTime(event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                Event updatedEvent \u003d event.changeStartDateTime(updatedDateTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // update the old event time to the new one in the itemModel"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                Item oldItem \u003d item;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                Item newItem \u003d item.changeEvent(updatedEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                RescheduleTask task \u003d new RescheduleTask(newItem, updatedEvent.getPeriod(), model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                model.replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                getInstance().add(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update the old event start time to the closest upcoming start time, using the event\u0027s auto-reschedule period"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param event whose start date we want to modify"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the modified time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static LocalDateTime getUpdatedDateTime(Event event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Use modulo to get the remaining time till the next reschedule time. Add that remaining time to the time now."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long period \u003d event.getPeriod().getPeriod();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime startDateTime \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime updatedDateTime \u003d ParserUtil.getUpdatedDateTime(startDateTime, period);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return updatedDateTime;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Adds a RescheduleTask that is to be rescheduled periodically, to this AutoRescheduleManager."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Requirements: task\u0027s start time is after current time. If not, use {@code updateEvent()} to add."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param task RescheduleTask to be carried out after reaching an event\u0027s startDateTime"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void add(RescheduleTask task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Duration delay \u003d Duration.between(LocalDateTime.now(), task.getStartTime());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (delay.getSeconds() \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                LocalDateTime updatedTime \u003d getUpdatedDateTime(task.getEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                //delay \u003d Duration.between(LocalDateTime.now(), updatedTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask.addToAllTasks(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            timer.scheduleAtFixedRate(task, delay.toMillis(), task.getLongPeriod());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            logger.warning(\"----------------[Failed to schedule Event][\" + task.getEvent() + \"]\" + e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Shutdown the AutoRescheduleManager"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void shutdown() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "mannggoo": 121
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/AutoReschedulePeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents the auto-reschedule period of an event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AutoReschedulePeriod {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_HOUR \u003d \"HOUR\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_DAY \u003d \"DAY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_WEEK \u003d \"WEEK\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long hourInMilliseconds \u003d Duration.ofHours(1).toMillis();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long dayInMilliseconds \u003d Duration.ofDays(1).toMillis();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long weekInMilliseconds \u003d Duration.ofDays(7).toMillis();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private long period;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AutoReschedulePeriod(long period) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one hour."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one hour."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byHour() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long hourPeriod \u003d hourInMilliseconds;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(hourPeriod);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one day."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one day."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byDay() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long dayPeriod \u003d dayInMilliseconds;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(dayPeriod);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one week."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one week."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byWeek() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long weekPeriod \u003d weekInMilliseconds;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(weekPeriod);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of this LocalDateTime {@code then} from now."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param then LocalDateTime of the time later"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object representing the time difference from now till then."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod from(LocalDateTime then) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Duration duration \u003d Duration.between(LocalDateTime.now(), then);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(duration.toMillis());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get the period of this AutoReschedulePeriod in Millis."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a long representation of this period in Millis."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public long getPeriod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!(other instanceof AutoReschedulePeriod)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AutoReschedulePeriod otherPeriod \u003d (AutoReschedulePeriod) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Long otherLongPeriod \u003d Long.valueOf(otherPeriod.getPeriod());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Long thisLongPeriod \u003d Long.valueOf(getPeriod());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return otherLongPeriod.equals(thisLongPeriod);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 83
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ElisaCommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * interface for state history"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public interface ElisaCommandHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushUndo(Command command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popUndo();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekUndo();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeUndo();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushRedo(Command command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popRedo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekRedo();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeRedo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void clearRedo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 28
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ElisaCommandHistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Stores the stack of all application states with current state at the top"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ElisaCommandHistoryManager implements ElisaCommandHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Stack\u003cUndoableCommand\u003e undoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Stack\u003cUndoableCommand\u003e redoStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistoryManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * push a command into undo stack"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushUndo(Command command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            undoStack.push((UndoableCommand) command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * empty the redo stack (for use when new command is executed)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void clearRedo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        redoStack.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * pop last command from undo stack"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popUndo() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        UndoableCommand command \u003d undoStack.pop();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        pushRedo(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * peek last command from undo stack"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekUndo() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * return stack size of undo stack"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushRedo(Command command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            redoStack.push((UndoableCommand) command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popRedo() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        UndoableCommand command \u003d redoStack.pop();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        pushUndo(command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekRedo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return redoStack.peek();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeRedo() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return redoStack.size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof ElisaCommandHistoryManager)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ElisaCommandHistoryManager hm \u003d (ElisaCommandHistoryManager) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return hm.redoStack.equals(this.redoStack)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 hm.undoStack.equals(this.undoStack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 89,
      "sianghwee": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemIndexWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Stores an item along with its indices in the separate item lists"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ItemIndexWrapper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item item; //the item"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int visual; //its index in VisualizeList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int storage; //index in ItemStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int task; //index in TaskList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int eve; //index in EventList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int rem; //index in ReminderList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int frem; //index in FutureReminders"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int arem; //index in ActiveReminders"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    //All indices are -1 if not in the respective list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper(Item item, int visual, int storage, int task, int eve, int rem, int frem, int arem) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.visual \u003d visual;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.eve \u003d eve;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.rem \u003d rem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.frem \u003d frem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.arem \u003d arem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getVisual() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return visual;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getStorage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getEve() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return eve;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getRem() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return rem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getFrem() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return frem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getArem() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return arem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 62
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ActiveRemindersList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.FutureRemindersList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface ItemModel {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemStorageFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setItemStorageFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setItemStorage(ItemStorage itemStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage getItemStorage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem(Item item);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addItem(ItemIndexWrapper wrapper);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem(Item item, Item newItem);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deleteItem(int index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item deleteItem(Item item);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList(String listString) throws IllegalValueException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void emptyLists();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList findItem(String[] searchStrings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setVisualizeList(VisualizeList list);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort(Comparator\u003cItem\u003e comparator);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasItem(Item item);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(Item item);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(ItemIndexWrapper wrapper);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper getIndices(int index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void repopulateLists();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistory getElisaCommandHistory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean togglePriorityMode() throws IllegalListException;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void scheduleOffPriorityMode(LocalDateTime localDateTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void closePriorityModeThread();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item markComplete(int index, boolean status) throws IllegalListException;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList getJokeList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    ActiveRemindersList getActiveReminderListProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    FutureRemindersList getFutureRemindersList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    void updateCommandHistory(Command command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EventList getEventList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item getItem(int index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    SimpleBooleanProperty getPriorityMode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    boolean isSystemToggle();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item editItem(Item oldItem, Item newItem);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    Item getLatestOccurredReminder() throws NoSuchElementException;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    PriorityExitStatus getExitStatus();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    boolean isFocusMode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void toggleOnFocusMode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    SimpleBooleanProperty getFocusMode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 11,
      "lrchema": 30,
      "sianghwee": 93,
      "mannggoo": 4
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ActiveRemindersList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.CalendarList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.FutureRemindersList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ReminderList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.TaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents the model for ELISA"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemModelManager implements ItemModel {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ReminderList reminderList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private CalendarList calendarList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    // The list to be used for visualizing in the Ui"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private VisualizeList visualList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemStorage itemStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private final ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private final JokeList jokeList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private SimpleBooleanProperty priorityMode \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean systemToggle \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private PriorityExitStatus priorityExitStatus \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private PriorityQueue\u003cItem\u003e sortedTask \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private SimpleBooleanProperty focusMode \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //These three lists must be synchronized"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ReminderList pastReminders;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ActiveRemindersList activeReminders;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private FutureRemindersList futureReminders;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Timer timer \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemModelManager(ItemStorage itemStorage, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.eventList \u003d new EventList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.reminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemStorage \u003d itemStorage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.jokeList \u003d new JokeList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        pastReminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ActiveRemindersList(new ReminderList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        futureReminders \u003d new FutureRemindersList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        repopulateLists();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Repopulate item lists from storage"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void repopulateLists() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c itemStorage.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            addToSeparateList(itemStorage.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /* Bryan Reminder"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Referenced: https://docs.oracle.com/javafx/2/binding/jfxpub-binding.htm"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * for property naming conventions."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Function to get property"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ActiveRemindersList getActiveReminderListProperty() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return activeReminders;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final FutureRemindersList getFutureRemindersList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return futureReminders;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void updateCommandHistory(Command command) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        elisaCommandHistory.pushUndo(command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Deals with Storage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemStorageFilePath() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs.getItemStorageFilePath();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorageFilePath(Path itemStorageFilePath) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(itemStorageFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(itemStorageFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorage(ItemStorage itemStorage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemStorage \u003d itemStorage;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage getItemStorage() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Above deals with storage"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Edits state of model"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds an item to the respective list. All items will be added to the central list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * It will also be added to the respective list depending on whether it is a task, event or a reminder."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added to the program"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem (Item item) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        addToSeparateList(item);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemStorage.add(item);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add given item into specified index"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addItem(ItemIndexWrapper wrapper) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (visualList.belongToList(wrapper.getItem())) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            visualList.addToIndex(wrapper.getVisual(), wrapper.getItem());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        addToSeparateList(wrapper);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemStorage.add(wrapper.getStorage(), wrapper.getItem());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to add an item to it\u0027s respective list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added into the lists"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(Item item) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (visualList.belongToList(item)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            visualList.add(item);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasTask()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            taskList.add(item);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (priorityMode.getValue()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                sortedTask.offer(item);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                getNextTask();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasEvent()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            eventList.add(item);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            calendarList.add(item);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasReminder()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            reminderList.add(item);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if ((!futureReminders.contains(item))"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    \u0026\u0026 item.getReminder().get().getOccurrenceDateTime().isAfter(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                futureReminders.add(item);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item to separate lists into given index"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(ItemIndexWrapper wrapper) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getTask() !\u003d -1) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            taskList.addToIndex(wrapper.getTask(), wrapper.getItem());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getEve() !\u003d -1) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            eventList.addToIndex(wrapper.getEve(), wrapper.getItem());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarList.addToIndex(wrapper.getEve(), wrapper.getItem());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getRem() !\u003d -1) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            reminderList.addToIndex(wrapper.getRem(), wrapper.getItem());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getFrem() !\u003d -1) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            futureReminders.add(wrapper.getFrem(), wrapper.getItem());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistory getElisaCommandHistory() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return elisaCommandHistory;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList getJokeList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokeList;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokeList.getJoke();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Deletes an item from the program."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be deleted."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that was deleted from the program"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deleteItem(int index) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item item \u003d visualList.remove(index);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return deleteItem(item);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Deletes an item from the program."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param item the item to be deleted."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return the item that was deleted from the program"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item deleteItem(Item item) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        visualList.remove(item);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        taskList.remove(item);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        eventList.remove(item);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarList.remove(item);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        reminderList.remove(item);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        futureReminders.remove(item);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        activeReminders.remove(item);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        itemStorage.remove(item);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode.getValue() \u0026\u0026 sortedTask !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask.remove(item);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            getNextTask();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper getIndices(int index) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new ItemIndexWrapper(item, index, itemStorage.indexOf(item), taskList.indexOf(item),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                eventList.indexOf(item), reminderList.indexOf(item),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                futureReminders.indexOf(item), activeReminders.indexOf(item));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Set a new item list to be the visualization list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param listString the string representation of the list to be visualized"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList(String listString) throws IllegalValueException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch(listString) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(taskList);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (priorityMode.getValue()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                getNextTask();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(eventList);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"R\":"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(reminderList);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            setVisualList(calendarList);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalValueException(String.format(\"%s is no a valid list\", listString));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void setVisualList(VisualizeList il) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d il;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces one item with another item."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be replace"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the item that will replace the previous item"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem(Item item, Item newItem) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        int index \u003d itemStorage.indexOf(item);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemStorage.setItem(index, newItem);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d taskList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasTask()) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                taskList.setItem(index, newItem);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                taskList.remove(index);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d eventList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasEvent()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                eventList.setItem(index, newItem);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.setItem(index, newItem);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                eventList.remove(index);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.remove(index);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d calendarList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasEvent()) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.setItem(index, newItem);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.remove(index);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d reminderList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasReminder()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                reminderList.setItem(index, newItem);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                reminderList.remove(index);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (!item.getReminder().equals(newItem.getReminder())) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                if (newItem.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    if (activeReminders.contains(item)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        activeReminders.remove(item);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    if (futureReminders.contains(item)) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        futureReminders.remove(item);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    //means that newItem has a reminder that is diff from old reminder"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    //if old had nothing just add to corresponding"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    //if old had a reminder, remove it"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    if (item.getReminder().isPresent()) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        if (activeReminders.contains(item)) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            activeReminders.remove(item);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        if (futureReminders.contains(item)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            futureReminders.remove(item);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    Reminder newReminder \u003d newItem.getReminder().get();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    if (newReminder.getOccurrenceDateTime().isAfter(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        //Add to futureReminders if it is to occur later."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        futureReminders.add(newItem);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        //Otherwise do not add"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if ((index \u003d visualList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (visualList.belongToList(newItem)) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                visualList.setItem(index, newItem);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                visualList.remove(index);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode.getValue()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask.remove(item);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasTask()) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                sortedTask.offer(newItem);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            getNextTask();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Edits an item with another item."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param oldItem the item to be edited"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the edited item"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the edited item"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item editItem(Item oldItem, Item newItem) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        addToSeparateList(newItem);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Find an item based on its description."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchStrings the string to search for within the description"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list containing all the items that contain the search string"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList findItem(String[] searchStrings) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d visualList.find(searchStrings);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setVisualizeList(VisualizeList list) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.visualList \u003d list;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Clears the storage for the current ELISA run."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        setItemStorage(new ItemStorage());"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        emptyLists();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Clears the 3 lists for re-populating"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void emptyLists() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        eventList.clear();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        reminderList.clear();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarList.clear();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        futureReminders.clear();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sort the current visual list."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d visualList.sort();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the current visual list based on a comparator."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param comparator the comparator to sort the current list by."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort(Comparator\u003cItem\u003e comparator) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList tempList \u003d visualList.deepCopy();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tempList.sort(comparator);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d tempList;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Checks if the item storage already contains this item."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item to check"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return true if the item storage contains this item, false otherwise"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return itemStorage.contains(item);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Enable and disable the priority mode"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean value. If true, means priority mode is on, else returns false."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalListException if the visualList is not a task list."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean togglePriorityMode() throws IllegalListException {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode.getValue()) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            toggleOffPriorityMode();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            toggleOnPriorityMode();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return priorityMode.getValue();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Schedule a timer to off the priority mode."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param localDateTime the time at which the priority mode should be turned off."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void scheduleOffPriorityMode(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ZonedDateTime zdt \u003d localDateTime.atZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Date date \u003d Date.from(zdt.toInstant());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                systemToggle \u003d true;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                priorityExitStatus \u003d PriorityExitStatus.PRIORITY_TIMEOUT;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                toggleOffPriorityMode();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }, date);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void getNextTask() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item head \u003d sortedTask.peek();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (sortedTask.isEmpty() || head.getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            systemToggle \u003d true;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            priorityExitStatus \u003d PriorityExitStatus.ALL_TASK_COMPLETED;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            toggleOffPriorityMode();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (visualList instanceof TaskList) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            result.add(head);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            visualList \u003d result;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Method to close the priority mode thread."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void closePriorityModeThread() {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (timer !\u003d null) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            timer \u003d null;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Turns off the priority mode."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void toggleOffPriorityMode() {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        closePriorityModeThread();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        sortedTask \u003d null;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        focusMode.set(false);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (visualList instanceof TaskList) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        priorityMode.setValue(false);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Turns on the priority mode."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void toggleOnPriorityMode() {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        systemToggle \u003d false;"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        priorityExitStatus \u003d null;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        priorityMode.setValue(true);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        populateQueue();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // should not be null as it is populated by the previous method"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(sortedTask);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (sortedTask.isEmpty()) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            priorityExitStatus \u003d PriorityExitStatus.ALL_TASK_COMPLETED;"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            priorityMode.setValue(false);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            getNextTask();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper method to create the priority queue and fill it up."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void populateQueue() {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        sortedTask \u003d new PriorityQueue\u003cItem\u003e((item1, item2) -\u003e {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            int result;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if ((result \u003d TaskList.COMPARATOR.compare(item1, item2)) !\u003d 0) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int index1 \u003d taskList.indexOf(item1);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int index2 \u003d taskList.indexOf(item2);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return Integer.compare(index1, index2);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        sortedTask.addAll(taskList.filtered(x -\u003e !x.getTask().get().isComplete()));"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Mark an item with a task as done or not done."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be marked as done or not done"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param status the status of the item. True means that it is done and false mean it is not done."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that is marked as done or not done."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalListException if the operation is not done on a task list."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item markComplete(int index, boolean status) throws IllegalListException {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Task task \u003d item.getTask().get();"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task newTask \u003d status ? task.markComplete() : task.markIncomplete();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item newItem \u003d item.changeTask(newTask);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        editItem(item, newItem);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EventList getEventList() {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.eventList;"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item getItem(int index) {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList.get(index);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item getLatestOccurredReminder() throws NoSuchElementException {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return activeReminders.getLatestOccurredReminder();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SimpleBooleanProperty getPriorityMode() {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.priorityMode;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isSystemToggle() {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return systemToggle;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityExitStatus getExitStatus() {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return priorityExitStatus;"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void toggleOnFocusMode() {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        focusMode.set(true);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isFocusMode() {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return focusMode.get();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SimpleBooleanProperty getFocusMode() {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return focusMode;"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 99,
      "lrchema": 98,
      "sianghwee": 446,
      "mannggoo": 12,
      "Icesiolz": 6
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The central storage of all the items in the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ItemModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds an item to the item list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added to the item list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void add(Item item) throws DuplicateItemException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (items.contains(item)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item into specified index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void add(int targetIndex, Item item) throws DuplicateItemException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (items.contains(item)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        items.add(targetIndex, item);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Retrieve the item list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cItem\u003e getItems() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.items;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Gets the item at the index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be retrieved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item at that index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item get(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Return the size of the storage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the size of the storage as an integer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns if the storage already contains the item."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be searched for"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean contains(Item item) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Remove the item from within the storage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be removed from the storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item remove(Item item) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        items.remove(item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the index of the item in the storage. If the item is not in the storage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * a index of -1 is returned."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be searched for."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the index of the item in the storage."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int indexOf(Item item) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.indexOf(item);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Set the item at the specific index to a new item."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be replaced."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the item to replace the old item."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item setItem(int index, Item newItem) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.set(index, newItem);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the storage into a JSON string."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the JSON representation of the storage."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws JsonProcessingException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toJson() throws JsonProcessingException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return JsonUtil.toJsonString(items);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates the item storage from a json string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the string representation of the item storage."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item storage with all items added"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the file cannot be read from"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws DataConversionException when the item is not in a proper format"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemStorage fromJson(String jsonString) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Iterator\u003cJsonNode\u003e it \u003d node.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String json \u003d it.next().toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Item item \u003d Item.fromJson(json);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                itemStorage.add(item);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                throw new DataConversionException(e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                logger.log(Level.INFO, String.format(\"%s already exists. Skipping.\", json));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                logger.log(Level.WARNING, String.format(\"%s is corrupted and will be skipped.\", json));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!(other instanceof ItemStorage)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return this.items.equals(((ItemStorage) other).items);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns a deep copy of this item storage."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return deep copy of the item storage"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage deepCopy() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : items) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                itemStorage.add(i.deepCopy());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                // not supposed to happen"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 3,
      "lrchema": 13,
      "sianghwee": 159
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/JokeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * List of jokes to pick and display"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class JokeList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private InputStream jokeFile \u003d JokeList.class.getResourceAsStream(\"/documents/jokes.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ArrayList\u003cString\u003e jokes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Random rng;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        jokes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        rng \u003d new Random();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        BufferedReader r \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            r \u003d new BufferedReader(new InputStreamReader(jokeFile, \"UTF-8\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            String l;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            while ((l \u003d r.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                jokes.add(l);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Returns random joke from list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        rng.setSeed(System.currentTimeMillis());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        int index \u003d rng.nextInt(jokes.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokes.get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 49
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/PriorityExitStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Enumeration containing the different ways in which one can exit the priority mode."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Helps to personalize the feed back messages to the users."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public enum PriorityExitStatus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ALL_TASK_COMPLETED, PRIORITY_TIMEOUT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 9
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemStorageFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/RescheduleTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Task to reschedule an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class RescheduleTask extends TimerTask {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static LinkedList\u003cRescheduleTask\u003e allTasks \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private AutoReschedulePeriod period;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Creates a RescheduleTask to reschedule this item automatically, in intervals of the given period."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Requirements: Item must have an Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item who\u0027s event is to be rescheduled"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period interval of rescheduling"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model which consist of this item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public RescheduleTask(Item item, AutoReschedulePeriod period, ItemModel model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Adds this {@code task} to the list of allTasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param task to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void addToAllTasks(RescheduleTask task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        allTasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Removes the RescheduleTask of this event from the list of allTasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param event to be removed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void removeFromAllTasks(Event event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (RescheduleTask task : RescheduleTask.allTasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (task.getEvent().equals(event)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                task.cancel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                RescheduleTask.allTasks.remove(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event.getStartDateTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public long getLongPeriod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return period.getPeriod();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.event;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Executes this task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update this event\u0027s startDateTime with the new startDateTime, given the period of reccurence."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update the model with the new item."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Refreshes the view on the Ui to reflect the new startDateTime of this event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        logger.info(\"----------[INFO] \" + \"Reschedule runs again. Old event: \" + event.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item oldItem \u003d item;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long period \u003d event.getPeriod().getPeriod();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime newStart \u003d LocalDateTime.now().plusNanos(Duration.ofMillis(period).toNanos());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event newEvent \u003d event.changeStartDateTime(newStart);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem \u003d item.changeEvent(newEvent);;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                model.replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                model.repopulateLists();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                model.setVisualizeList(model.getVisualList()); // to refresh the view"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d newItem;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.event \u003d newEvent;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        logger.info(\"-----------[INFO] \" + \"End of run. New event: \" + newEvent.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 5,
      "mannggoo": 95
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"itemstorage.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        setItemStorageFilePath(newUserPrefs.getItemStorageFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemStorageFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorageFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 4,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/exceptions/IllegalListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The exception thrown when a command is executed on a list that it is not able to execute on."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class IllegalListException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "sianghwee": 6
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/ActiveRemindersList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * TODO: Make this javadoc prettier."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * An ActiveReminderList that extends from ListPropertyBase in order to be observable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ActiveRemindersList extends ListPropertyBase\u003cItem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ActiveRemindersList (ReminderList reminderList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        super(reminderList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Object getBean() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Adds a reminder to ActiveRemindersList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param reminders Collection of reminders to be added to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public synchronized void addReminders(Collection\u003cItem\u003e reminders) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        for (Item item:reminders) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            add(item);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item getLatestOccurredReminder() throws NoSuchElementException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            throw new NoSuchElementException(\"No reminders have occurred yet!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return get(size() - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 44,
      "lrchema": 2
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/CalendarList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are part of the calendars within the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class CalendarList extends VisualizeList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CalendarList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.find(searchString, new CalendarList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(new CalendarList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // calendar list is used in the panel and so their sorting will have no value"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasEvent();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "sianghwee": 11,
      "Icesiolz": 21
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are events within the program"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class EventList extends VisualizeList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public EventList(List\u003cItem\u003e list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(list);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the event list based on the date of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a sorted EventList of the current list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        EventList el \u003d new EventList(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        el.sort((item1, item2) -\u003e item1.getEvent().get().getStartDateTime()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .compareTo(item2.getEvent().get().getStartDateTime()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return el;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new EventList only containing the items that have the search string in their description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return find(searchString, new EventList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(new EventList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasEvent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 45
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/FutureRemindersList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.ItemReminderDateTimeComparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * A data structure to hold Items with Reminders that have not yet been prompted to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class FutureRemindersList extends ArrayList\u003cItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean add(Item item) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        boolean result \u003d super.add(item);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        super.sort(new ItemReminderDateTimeComparator());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 18
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/ReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are reminders within the program"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ReminderList extends VisualizeList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReminderList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReminderList(List\u003cItem\u003e list) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(list);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the Reminders by the date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new ReminderList with the reminders within sorted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ReminderList rl \u003d new ReminderList(list);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        rl.sort((item1, item2) -\u003e item1.getReminder().get().getDefaultDateTime()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .compareTo(item2.getReminder().get().getDefaultDateTime()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return rl;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new ReminderList only containing the items that have the search string in their description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.find(searchString, new ReminderList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy () {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(new ReminderList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasReminder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 2,
      "sianghwee": 45
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are task within the program"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class TaskList extends VisualizeList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final Comparator\u003cItem\u003e COMPARATOR \u003d (item1, item2) -\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task task1 \u003d item1.getTask().get();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task task2 \u003d item2.getTask().get();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (task1.isComplete() \u0026\u0026 !task2.isComplete()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else if (!task1.isComplete() \u0026\u0026 task2.isComplete()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return item1.getPriority().compareTo(item2.getPriority());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public TaskList(List\u003cItem\u003e list) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sort the items in the task list. The items are first sorted by whether they are"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * done or not and then by their priority."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an VisualizeList of all the items sorted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tl \u003d new TaskList(list);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tl.sort(COMPARATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return tl;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new TaskList containing only the items that have the search string in their description"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return find(searchString, new TaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(new TaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasTask();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 58
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/VisualizeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ModifiableObservableListBase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An object to hold items. Parent class for TaskList, EventList and ReminderList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public abstract class VisualizeList extends ModifiableObservableListBase\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected ArrayList\u003cItem\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList(List\u003cItem\u003e list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.list.addAll(list);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Add an item into the list. The item will not be added if it is already in the list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * or it does not belong to the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added into the list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean add(Item item) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (hasItem(item) || !belongToList(item)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return super.add(item);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item into specified index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToIndex(int targetIndex, Item item) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (hasItem(item) || !belongToList(item)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            super.add(targetIndex, item);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Check if the list contains the item."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be checked for."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return true if the item is in the list, else return false."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.contains(item);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void doAdd(int index, Item item) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        list.add(index, item);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item doSet(int index, Item item) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.set(index, item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item doRemove(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Get the list of the item list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ArrayList of all the items in the VisualizeList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cItem\u003e getList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList find(String[] searchString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to find an item based on their description."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchStrings an array of string to be search for within the description of an item"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param il the item list that will hold the items that contain the string within its description"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list that was given with the found items added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected VisualizeList find(String[] searchStrings, VisualizeList il) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (String searchString : searchStrings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (Item i : list) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (il.contains(i)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (i.getItemDescription().getDescription()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        .toLowerCase().contains(searchString.toLowerCase())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    il.add(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return il;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Deep copy a list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a list with all the items within it a deep copy of their original item."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList deepCopy();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to return a deep copy of the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param vl the list to be returned"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected VisualizeList deepCopy(VisualizeList vl) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : list) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vl.add(i.deepCopy());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                // not supposed to happen"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return vl;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int indexOf(Item item) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.indexOf(item);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item setItem(int index, Item item) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.set(index, item);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the item at the index within the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item within the list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that has that index in the list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item get(int index) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * The size of the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the integer value of the size of the list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!(other instanceof VisualizeList)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VisualizeList otherIl \u003d (VisualizeList) other;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return this.list.equals(otherIl.list);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the items in the list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list in the sorted order"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList sort();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super.clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Checks if an item belongs to this list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean true if the item belong to this list and false otherwise"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract boolean belongToList(Item item);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 14,
      "sianghwee": 170
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/GameStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Game Storage class to store high score of game."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class GameStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TreeSet\u003cInteger\u003e scorelist;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public GameStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.filePath \u003d filePath.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scorelist \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TreeSet\u003cInteger\u003e getScorelist() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.scorelist;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Method to update scorelist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void updateScoreList(int score) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scorelist.add(score);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Methods to save to file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void save() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            for (Integer score: scorelist) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                writer.write(score + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            // This is not supposed to happen."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Method to load the file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void load() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            file \u003d new File(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            String str;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            while ((str \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                int score \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scorelist.add(score);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 78
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/ItemListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents a storage for ELISA."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface ItemListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void saveItemStorage(ItemStorage itemStorage) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #saveItemStorage(ItemStorage itemStorage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage toModelType() throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/JsonItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * A class that contains all the JSON representation of the string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class JsonItemStorage implements ItemListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Items list contains duplicate items\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItemStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Path itemListFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public JsonItemStorage (Path path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemListFilePath \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.itemListFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        saveItemStorage(itemStorage, itemListFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param filePath the path of the save file. Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(itemStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        FileUtil.writeToFile(filePath, itemStorage.toJson());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts this JSON item storage into the model\u0027s storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ItemStorage with all the items"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there are any problem with reading from the string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage toModelType() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String jsonString \u003d FileUtil.readFromFile(itemListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return ItemStorage.fromJson(jsonString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.info(\"Data from save file corrupted.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "sianghwee": 70
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface Storage extends ItemListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "sianghwee": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemListStorage itemListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public StorageManager(ItemListStorage itemListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemListStorage \u003d itemListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        saveItemStorage(itemStorage, itemListStorage.getItemListFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemListStorage.saveItemStorage(itemStorage, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage toModelType() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemListStorage.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "sianghwee": 13,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Represents a storage for {@link seedu.elisa.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Saves the given {@link seedu.elisa.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/CalendarPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The calendar panel for Elisa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Label monthAndYear;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a calendar panel base on the current date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param visualList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CalendarPanel(ObservableList\u003cItem\u003e visualList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.month \u003d currentTime.getMonthValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.year \u003d currentTime.getYear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        monthAndYear.setText(String.format(\"%s, %s\", Month.of(month), String.valueOf(year)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        initializeCalendarGrid();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        loadData(visualList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        visualList.addListener(new ListChangeListener\u003cItem\u003e() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            public void onChanged(Change\u003c? extends Item\u003e c) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                System.out.println(\"Change\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                clearCells();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                generateDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                loadData(visualList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void initializeCalendarGrid() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        generateHeader();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        generateDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Load the events from the visualization list to the calendar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param visualList the list containing all the data to be loaded from."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void loadData(ObservableList\u003cItem\u003e visualList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        HashMap\u003cInteger, ArrayList\u003cItem\u003e\u003e monthEvents \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item item : visualList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!isMonth(item)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int day \u003d getDate(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (!monthEvents.containsKey(day)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    monthEvents.put(day, new ArrayList\u003cItem\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                monthEvents.get(day).add(item);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Integer i : monthEvents.keySet()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            ArrayList\u003cItem\u003e temp \u003d monthEvents.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            int size \u003d temp.size() - 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Label lbl \u003d new Label();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            lbl.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Item item \u003d temp.get(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (size \u003e 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setText(String.format(\"%s + %d event(s)\", item.getItemDescription().getDescription(), size));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setText(String.format(\"%s\", item.getItemDescription().getDescription()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            switch (priority) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            case \"HIGH\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-background-color: red; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            case \"MEDIUM\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-background-color: orange; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            case \"LOW\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-background-color: green; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox pane \u003d (VBox) node;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            pane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cItem\u003e eventList \u003d visualList.filtered(x -\u003e x.hasEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        System.out.println(\"check here?\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cItem\u003e monthEvent \u003d eventList.filtered(x -\u003e x.getEvent()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .get().getStartDateTime().getMonthValue() \u003d\u003d month);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e checker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!monthEvent.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (Item item: monthEvent) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int date \u003d item.getEvent().get().getStartDateTime().getDayOfMonth();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                if (checker.containsKey(date)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    checker.put(date, checker.get(date) + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    if (checker.get(date) \u003e 2) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    checker.put(date, 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(date));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                VBox pane \u003d (VBox) node;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                Label lbl \u003d new Label();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                lbl.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                lbl.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                switch (priority) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                case \"HIGH\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    lbl.setStyle(\"-fx-background-color: red; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                case \"MEDIUM\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    lbl.setStyle(\"-fx-background-color: orange; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                case \"LOW\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    lbl.setStyle(\"-fx-background-color: green; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (node instanceof VBox) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    pane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Check if an item belongs to the current month."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be checked for."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean value if the item is happening within the month."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean isMonth(Item item) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!item.hasEvent()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return item.getEvent().get().getStartDateTime().getMonthValue() \u003d\u003d month;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int getDate(Item item) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.getEvent().get().getStartDateTime().getDayOfMonth();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Generates the header of the calendar"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void generateHeader() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            GridPane.setVgrow(vPane, Priority.NEVER);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Label day \u003d new Label();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            day.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            day.setText(DayOfWeek.of(i + 1).getDisplayName(TextStyle.SHORT, Locale.ENGLISH));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getChildren().add(day);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarGrid.add(vPane, i, 0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Generates the date on the calendar base on the current month."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void generateDate() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime startOfMonth \u003d LocalDateTime.of(year, month, 1, 0, 0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int firstDay \u003d startOfMonth.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int daysInMonth \u003d startOfMonth.getMonth().maxLength();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (year % 4 !\u003d 0 \u0026\u0026 (startOfMonth.getMonth() \u003d\u003d Month.FEBRUARY)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            daysInMonth \u003d 28;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        double height \u003d calendarGrid.getHeight();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        double maxHeight \u003d height / 7;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int offset \u003d firstDay - 1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int lblCount \u003d 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            GridPane.setVgrow(vPane, Priority.ALWAYS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (i \u003c offset) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.setStyle(\"-fx-background-color: #E9F2F5\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.setId(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Label lbl \u003d new Label(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-text-fill:darkslategray\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lblCount++;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarGrid.add(vPane, i, 1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 2; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                GridPane.setVgrow(vPane, Priority.ALWAYS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (lblCount \u003c\u003d daysInMonth) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.setId(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    Label lbl \u003d new Label(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lbl.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lbl.setStyle(\"-fx-text-fill:darkslategray\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lblCount++;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.setStyle(\"-fx-background-color: #E9F2F5\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarGrid.add(vPane, j, i);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper method to clear all the cells so that it can be updated."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void clearCells() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cNode\u003e allCells \u003d calendarGrid.getChildren();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Node cell: allCells) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (GridPane.getRowIndex(cell) !\u003d 0) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                VBox pane \u003d (VBox) cell;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                pane.getChildren().clear();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 228,
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": "         * @see seedu.elisa.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "-": 71,
      "Icesiolz": 3
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ElisaDialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "class ElisaDialogBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ElisaDialogBox(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ElisaDialogBox.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialog.setText(text); }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    static ElisaDialogBox getElisaDialog(String text) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new ElisaDialogBox(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 33
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ElisaReminderBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class ElisaReminderBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ElisaReminderBox(String text) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ElisaReminderBox.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        dialog.setText(text); }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    static ElisaReminderBox getElisaDialog(String text) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ElisaReminderBox(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/EventListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class EventListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priorityLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public EventListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Event event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        date.setText(String.valueOf(event.getStartDateTime().getDayOfMonth())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                + \" \" + String.valueOf(event.getStartDateTime().getMonth()).substring(0, 3));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        time.setText(String.valueOf(event.getStartDateTime().format(DateTimeFormatter.ofPattern(\"HH:mm\"))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setText(priority);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setPadding(new Insets(5, 10, 5, 10));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(priority) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: red; \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: orange; \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setText(\"MED\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: green; \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        EventListCard card \u003d (EventListCard) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "Icesiolz": 94
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/EventListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e eventListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public EventListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d eventListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class EventListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasEvent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new EventListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 78
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ItemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ItemListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        name.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //person.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //       .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //        .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemCard card \u003d (ItemCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 14,
      "-": 55,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ItemListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e itemListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ItemListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.scrollTo(itemList.size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 45
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.canvas.Canvas;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.canvas.GraphicsContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.effect.GaussianBlur;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.effect.Glow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.scene.media.AudioClip;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.game.GameLoop;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.game.Grid;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.game.Painter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.game.Snake;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.Logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.ClearScreenCommandResult;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.CloseCommandResult;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DownCommandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.GameCommandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.GameHardCommandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.OpenCommandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.PriorityCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.ThemeCommandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UpCommandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.FocusModeException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.CalendarList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ReminderList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.TaskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.storage.GameStorage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int WIDTH \u003d 500;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int HEIGHT \u003d 500;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Image redElisa \u003d new Image(getClass().getClassLoader()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            .getResource(\"images/FocusElisa.PNG\").toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Image blueElisa \u003d new Image(getClass().getClassLoader()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            .getResource(\"images/ElisaImageWithoutWords.PNG\").toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Path gamefilePath \u003d Paths.get(\"data\", \"gamescore.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    // Elements for Game"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private GameStorage gameStorage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private GameLoop loop;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Grid grid;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private GraphicsContext context;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TreeSet\u003cInteger\u003e scorelist;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Popup popup;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String reminderAlarmUrl \u003d getClass().getClassLoader().getResource(\"sounds/alertChime.mp3\").toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private AudioClip reminderAlarm \u003d new AudioClip(reminderAlarmUrl);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private StackPane calendarPanelPlaceholder;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private StackPane openItemPlaceholder;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TabPane viewsPlaceholder;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ImageView elisaImage;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Text elisaText;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Text elisaDescription;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Text elisaDescription2;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaTextBlueColor \u003d elisaText.getFill();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaDescBlueColor \u003d elisaDescription.getFill();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaTextRedColor \u003d Paint.valueOf(\"ff8080\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaDescRedColor \u003d Paint.valueOf(\"ffb4b4\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gameStorage \u003d new GameStorage(gamefilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            gameStorage.load();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scorelist \u003d gameStorage.getScorelist();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scorelist.add(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Listen to changes in focus of stage"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            primaryStage.focusedProperty().addListener(new ChangeListener\u003cBoolean\u003e() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                public void changed(ObservableValue\u003c? extends Boolean\u003e o, Boolean old, Boolean n) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    if (!primaryStage.focusedProperty().get() \u0026\u0026 popup !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        popup.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    } else if (popup !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        popup.show(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        // do nothing to the popup"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            });"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Throwable t) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            logger.warning(\"Error with adding listener to primary stage for popup\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        //Listen to changes in tab selection"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        viewsPlaceholder.getSelectionModel().selectedItemProperty().addListener("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                new ChangeListener\u003cTab\u003e() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    public void changed(ObservableValue\u003c? extends Tab\u003e ov, Tab t, Tab t1) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            if (logic.isFocusMode() \u0026\u0026 !t1.getId().equalsIgnoreCase(\"T\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                throw new FocusModeException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            logic.getModel().setVisualList(t1.getId());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            updatePanels(logic.getVisualList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        } catch (FocusModeException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            viewsPlaceholder.getSelectionModel().select(t);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        logic.getPriorityMode().addListener(new ChangeListener\u003cBoolean\u003e() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Boolean\u003e observable, Boolean oldValue, Boolean newValue) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (newValue) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    setRed();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    setBlue();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    if (logic.isSystemToggle()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            String feedback;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            switch (logic.getExitStatus()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            case PRIORITY_TIMEOUT: feedback \u003d PriorityCommand.TIME_OUT;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            case ALL_TASK_COMPLETED: feedback \u003d PriorityCommand.FINISHED_ALL_TASKS;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            default:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                // will never reach here as there are only two cases"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                feedback \u003d \"\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            resultDisplay.setFeedbackToUser(feedback);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            updatePanels(logic.getVisualList());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void setRed() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaImage.setImage(redElisa);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setFill(elisaTextRedColor);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setEffect(new Glow(0.2));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setStroke(elisaDescRedColor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription.setFill(elisaDescRedColor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription2.setFill(elisaDescRedColor);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void setBlue() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaImage.setImage(blueElisa);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setFill(elisaTextBlueColor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setEffect(null);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription.setFill(elisaDescBlueColor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription2.setFill(elisaDescBlueColor);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        updatePanels(logic.getVisualList());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Create a ListChangeListener for activeReminders"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        ListChangeListener\u003cItem\u003e activeRemindersListener \u003d new ListChangeListener\u003cItem\u003e() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public void onChanged(Change\u003c? extends Item\u003e c) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                while (c.next()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    createReminders(c);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            private void createReminders(Change\u003c? extends Item\u003e c) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                if (c.getAddedSize() \u003e 0) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    //Plays sound"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    reminderAlarm.play(30);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    for (Item newItem : c.getAddedSubList()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            //Populate resultDisplay with reminder textbox"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            resultDisplay.setReminderToUser(newItem.getReminderMessage());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Binds a ListChangeListener to activeRemindersList"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logic.getActiveRemindersListProperty().addListener(activeRemindersListener);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Switches the view."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void handleSwitchView(VisualizeList list) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (list instanceof TaskList) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof EventList) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof ReminderList) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof CalendarList) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls the target pane up"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param pane"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void scrollUp(String pane) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(pane) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"resultDisplay\":"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.scrollUp();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"tabPane\":"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (logic.getVisualList() instanceof TaskList) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                taskListPanel.scrollUp();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else if (logic.getVisualList() instanceof EventList) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                eventListPanel.scrollUp();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else if (logic.getVisualList() instanceof ReminderList) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                reminderListPanel.scrollUp();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls the target pane down"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param pane"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void scrollDown(String pane) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(pane) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"resultDisplay\":"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.scrollDown();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"tabPane\":"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (logic.getVisualList() instanceof TaskList) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                taskListPanel.scrollDown();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else if (logic.getVisualList() instanceof EventList) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                eventListPanel.scrollDown();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else if (logic.getVisualList() instanceof ReminderList) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                reminderListPanel.scrollDown();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Generates an appropriate popup with the given item, formatted accordingly"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item details to fill in the popup with"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private void openUp(Item item) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.getContent().add(new OpenItem(item).getRoot());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.setHeight(1000);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.setWidth(500);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.setHideOnEscape(false);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.popup \u003d popup;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.show(primaryStage);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Carries out the operations to generate a popup which expands the view of the given item"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param cr containing the item to open"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the result of executing this command"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private CommandResult executeOpen(CommandResult cr) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        CommandResult commandResult \u003d cr;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (popup !\u003d null) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Previous popup still exists"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            commandResult \u003d new CommandResult(\"Hey, close the previous one first!\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Open new popup to show the item"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            OpenCommandResult result \u003d (OpenCommandResult) commandResult;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            openUp(result.getItem());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            viewsPlaceholder.setEffect(new GaussianBlur());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Carries out operations to close the current popup."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param cr to carry out"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return result of executing this command"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private CommandResult executeClose(CommandResult cr) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        CommandResult commandResult \u003d cr;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (popup \u003d\u003d null) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Nothing to close"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            commandResult \u003d new CloseCommandResult(CloseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            popup.hide();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.popup \u003d null;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            viewsPlaceholder.setEffect(null);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Updates the panels to display the correct list of item."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void updatePanels(VisualizeList targetList) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (targetList instanceof TaskList) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            taskListPanel \u003d new TaskListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (targetList instanceof EventList) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            eventListPanel \u003d new EventListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (targetList instanceof ReminderList) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            reminderListPanel \u003d new ReminderListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else { }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public EventListPanel getEventListPanel() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return reminderListPanel;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Changes the theme"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param theme"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void changeTheme(String theme) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scene.getStylesheets().remove(0);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scene.getStylesheets().remove(0);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(theme.trim()) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"white\":"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/WhiteTheme.css\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/Extensions.css\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"black\":"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/Extensions.css\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * @see seedu.elisa.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws Exception {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.setMessageFromUser(commandText);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            handleSwitchView(logic.getVisualList());"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof UpCommandResult) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scrollUp(commandResult.getPane());"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof DownCommandResult) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scrollDown(commandResult.getPane());"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof ThemeCommandResult) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                changeTheme(commandResult.getTheme());"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (commandResult instanceof OpenCommandResult) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                commandResult \u003d executeOpen(commandResult);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (commandResult instanceof CloseCommandResult) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                commandResult \u003d executeClose(commandResult);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof ClearScreenCommandResult) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                resultDisplay.clear();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof GameCommandResult) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                startgame(primaryStage);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof GameHardCommandResult) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                startgameHard(primaryStage);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            updatePanels(logic.getVisualList());"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Starts easy mode of the game"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param primaryStage"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void startgame(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        StackPane root \u003d new StackPane();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Canvas canvas \u003d new Canvas(WIDTH, HEIGHT);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        context \u003d canvas.getGraphicsContext2D();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        canvas.setFocusTraversable(true);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gameCheck(canvas);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        resetgame();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        root.getChildren().add(canvas);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Scene gamescene \u003d new Scene(root);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setResizable(true);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setHeight(HEIGHT + 100);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setWidth(WIDTH + 100);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setTitle(\"Snake Game\");"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setOnCloseRequest(e -\u003e System.exit(0));"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setScene(gamescene);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Thread t \u003d new Thread(loop);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        t.start();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Checks the key pressed in the game."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param canvas"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void gameCheck(Canvas canvas) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        canvas.setOnKeyPressed(e -\u003e {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            Snake snake \u003d grid.getSnake();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (loop.isKeyPressed()) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (loop.isPaused()) {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scorelist.add(loop.getCurrentScore());"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                gameStorage.updateScoreList(loop.getCurrentScore());"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    gameStorage.save();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                } catch (Exception e1) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    e1.printStackTrace();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            switch (e.getCode()) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                snake.setUp();"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                snake.setDown();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case LEFT:"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                snake.setLeft();"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case RIGHT:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                snake.setRight();"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case ENTER:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                if (loop.isPaused()) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    resetgame();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    Thread thread \u003d new Thread(loop);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    thread.start();"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case ESCAPE:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                exitgame();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case E:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                if (loop.isPaused()) {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    resetgameEasy();"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    Thread thread \u003d new Thread(loop);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    thread.start();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            case H:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                if (loop.isPaused()) {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    resetgameHard();"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    Thread thread \u003d new Thread(loop);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    thread.start();"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Starts hard mode of the game"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param primaryStage"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void startgameHard(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        StackPane root \u003d new StackPane();"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Canvas canvas \u003d new Canvas(WIDTH, HEIGHT);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        context \u003d canvas.getGraphicsContext2D();"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        canvas.setFocusTraversable(true);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        gameCheck(canvas);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        resetgameHard();"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        root.getChildren().add(canvas);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Scene gamescene \u003d new Scene(root);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setResizable(true);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setHeight(HEIGHT + 100);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setWidth(WIDTH + 100);"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setTitle(\"Snake Game\");"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setOnCloseRequest(e -\u003e System.exit(0));"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setScene(gamescene);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Thread t \u003d new Thread(loop);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        t.start();"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void resetgame() {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        grid \u003d new Grid(WIDTH, HEIGHT);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        loop \u003d new GameLoop(grid, context, scorelist);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Painter.paint(grid, context);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void resetgameEasy() {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        resetgame();"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void resetgameHard() {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        grid \u003d new Grid(WIDTH, HEIGHT, true);"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        loop \u003d new GameLoop(grid, context, scorelist);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Painter.paint(grid, context);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void exitgame() {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setHeight(primaryStage.getMinHeight());"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        primaryStage.setWidth(primaryStage.getMinWidth());"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 30,
      "lrchema": 24,
      "mannggoo": 91,
      "sianghwee": 98,
      "-": 101,
      "Icesiolz": 356
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/OpenItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Serves as a controller for the OpenItem.fxml."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenItem extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String FXML \u003d \"OpenItem.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label itemdetails;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label completed;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label startdate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label enddate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label reminderdate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenItem(Item item) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemdetails.setText(item.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenItem(ObservableList\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d items.get(0); // only 1 item"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        priority.setText(\"Priority: \" + item.getPriority().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        startdate.setText(\"Start Date: \" + item.getEvent().get().getStartDateTime().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        enddate.setText(\"End Date: \" + item.getEvent().get().getEndDateTime().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 57
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ListView\u003cItem\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PersonListPanel(ObservableList\u003cItem\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code ItemCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 8,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ReminderListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ReminderListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ReminderListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Reminder reminder \u003d item.getReminder().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        date.setText(String.valueOf(reminder.getOccurrenceDateTime().getDayOfMonth())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                + \" \" + String.valueOf(reminder.getOccurrenceDateTime().getMonth()).substring(0, 3));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        time.setText(String.valueOf(reminder.getOccurrenceDateTime().format(DateTimeFormatter.ofPattern(\"HH:mm\"))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        ReminderListCard card \u003d (ReminderListCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 2,
      "Icesiolz": 64
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ReminderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e reminderListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d reminderListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasReminder()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new ReminderListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 78
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                ElisaDialogBox.getElisaDialog(feedbackToUser)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void setReminderToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                ElisaReminderBox.getElisaDialog(feedbackToUser)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setMessageFromUser(String messageFromUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(messageFromUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                UserDialogBox.getUserDialog(messageFromUser)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.getChildren().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scrollPane.setVvalue(scrollPane.getVvalue() + 5);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        System.out.println(scrollPane.getVvalue());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 7,
      "lrchema": 1,
      "-": 24,
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/TaskListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class TaskListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priorityLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ImageView statusIcon;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (item.getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Completed.PNG\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Uncompleted.PNG\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setText(priority);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setPadding(new Insets(5, 10, 5, 10));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(priority) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: red; \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: orange; \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setText(\"MED\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: green; \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        TaskListCard card \u003d (TaskListCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "Icesiolz": 91
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e taskListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d taskListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasTask()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new TaskListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 78
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ElisaIcon.PNG\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/UserDialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "class UserDialogBox extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private UserDialogBox(String text) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    static UserDialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new UserDialogBox(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 33
    }
  },
  {
    "path": "src/main/resources/documents/jokes.txt",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "You."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I used to breed rabbits. Then I realized they can handle it themselves."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "My dog is an awesome fashion adviser. Every time I ask him what I look like in my clothes, he says “WOW!”"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why are eggs not very much into jokes? Because they could crack up."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Barkeep: I’m sorry, we never serve time travelers. A time traveler walks into a bar."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What is written on a dentist’s grave? He’s filling his last cavity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Meanwhile in a parallel universe: “Oh for God’s sake! Where are all these extra single socks coming from?!”"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a boomerang that doesn\u0027t come back? A stick."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How many tickles does it take to make an octopus laugh? 10-tickles."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How does Moses make coffee? Hebrews it."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I’m positive I just lost an electron. Better keep an ion that."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do you invite a dinosaur for lunch? Tea, Rex?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Who invented King Arthur’s round table? Sir Cumference."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I’m super friendly with 25 letters of the alphabet. I just don’t know why."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do turtles communicate with each other? With shell phones."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s so great about whiteboards? If you think about it, they’re pretty re-markable!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why did the mathematician work from home? Because he could only function in his domain."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Will glass coffins be a success? Remains to be seen."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "You know what really bugs me? Insect puns."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I was wondering why the ball was getting bigger. Then it hit me."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\"I have a split personality,\" said Tom, being frank."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s the difference between a hippo and a zippo? One is really heavy, and the other is a little lighter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Last night, I dreamed I was swimming in an ocean of orange soda. But it was just a Fanta sea."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I can’t believe I got fired from the calendar factory. All I did was take a day off!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a bee that can’t make up its mind? A maybe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I tried to sue the airline for losing my luggage. I lost my case."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "A mean crook going down stairs \u003d A condescending con, descending"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do you throw a space party? You planet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "what did the astronaut say when he was interviewed? No comet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What washes up on tiny beaches? Microwaves."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I was going to make a chemistry joke, but all the good ones Argon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Sleeping comes so naturally to me, I could do it with my eyes closed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call an alligator in a vest? An investigator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I used to be indecisive; now I\u0027m not so sure."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I got a new thesaurus; not only is it bad, it’s bad."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why are ghost such bad liars? Because they are easy to see through."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "If I got 50 cents for every failed math exam, I’d have $ 6.30 now."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Do you know a tree’s favorite drink? Root beer!"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What happens to a frog\u0027s car when it breaks down? It gets toad away."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why couldn\u0027t the leopard play hide and seek? Because he was always spotted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What starts with E, ends with E, and has only 1 letter in it? Envelope."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Whoever invented knock knock jokes should get a no bell prize."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why is six afraid of seven? Now, I assume it\u0027s because seven is a prime number, and prime numbers can be intimidating."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What\u0027s the best thing about Switzerland? I don\u0027t know, but the flag is a big plus."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "My wife told me I had to stop acting like a flamingo. So I had to put my foot down."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What\u0027s the difference between a hippo and a Zippo? One is really heavy, and the other is a little lighter."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Doctor, there\u0027s a patient on line 1 that says he\u0027s invisible. Well, tell him I can\u0027t see him right now."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Don\u0027t trust atoms, they make up everything."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "To the mathematicians who thought of the idea of zero, thanks for nothing!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I named my dog 6 miles so I can tell people that I walk 6 miles every single day."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I ordered a chicken and an egg from Amazon. I\u0027ll let you know."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Pavlov walks into a bar. The phone rings, and he says, \"Damn, I forgot to feed the dog.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I heard you like bad girls. I\u0027m bad...at everything."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What\u0027s worse than raining cats and dogs? Hailing Taxis."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I hate Russian dolls, they\u0027re so full of themselves."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I recently decided to sell my vacuum cleaner as all it was doing was gathering dust."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "As I watched the dog chasing his tail I thought \"Dogs are easily amused\", then I realized I was watching the dog chasing his tail."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Hedgehogs, eh? Why can\u0027t they just share the hedge?"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Velcro - what a rip-off!"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a patronising criminal going down a staircase? A condescending con descending."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\"Dad, can you tell me what a solar eclipse is?\" No sun."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I tried to sue the airline for misplacing my luggage. I lost my case."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I, for one, like Roman numerals."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I came up with a new word yesterday. Plagiarism."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": "A sandwich walks into a bar. The barman says, ‘Sorry we don’t serve food in here.\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The depressing thing about tennis is that no matter how much I play, I\u0027ll never be as good as a wall. I played a wall once. They\u0027re relentless."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Escalators don’t break down… they just turn into stairs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I intend to live forever… or die trying."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I used to think the brain was the most important organ. Then I thought, look what’s telling me that."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why aren’t koalas actual bears? They don’t meet the koalafications."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "As a scarecrow, people say I’m outstanding in my field. But hay, it’s in my jeans."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s a pirates favorite letter? You think it’s R but it be the C."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Knowledge is knowing a tomato is a fruit; Wisdom is not putting it in a fruit salad."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Haikus are easy. But sometimes they don’t make sense. Refrigerator."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I don’t have an attitude; I have a personality you can’t handle."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Hippopotomonstrosesquippedaliophobia: Fear of long words."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Discretion is being able to raise your eyebrow instead of your voice."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I have to exercise early in the morning before my brain figures out what I’m doing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": "If the number 2 pencil is the most popular, why is it still number 2?"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "We are all time travelers moving at the speed of exactly 60 minutes per hour"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "There are three types of people: those who can count and those who can’t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Leopards are terrible at hide-and-seek because they’re always spotted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "There was a kidnapping on a school bus but it’s fine. He woke up."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lrchema"
        },
        "content": "One bird can’t make a pun. But toucan."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Thanks for explaining the word “many” to me — it means a lot."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s purple and 5,000 miles long? The Grape Wall of China."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lrchema"
        },
        "content": "When does a joke become a Dad joke? When it’s fully groan."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I applied for a job at the local restaurant. I’m still waiting."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Did you hear about those new reversible jackets? I’m excited to see how they turn out."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Do I like wind turbines? Yes, I’m a big fan."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a pile of kittens A meowntain."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a baby monkey? A Chimp off the old block."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why can\u0027t you give Elsa a balloon? Because she will \u0027Let it go\u0027 \u0027Into the unknown\u0027."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call an alligator in a vest? An Investigator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a laughing jar of mayonnaise? LMAYO"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What did the baby corn say to the mama corn? \"Where\u0027s Popcorn?\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why did the birdie go to the hospital? To get a tweetment."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Can a kangaroo jump higher than the Empire State Building? Of course. The Empire State Building can\u0027t jump."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Instead of \"the John,\" I call my toilet \"the Jim.\" That way it sounds better when I say I go to the Jim first thing every morning."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The energizer bunny was arrested on a charge of battery."
      }
    ],
    "authorContributionMap": {
      "lrchema": 100
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"anchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cLabel fx:id\u003d\"monthAndYear\" alignment\u003d\"CENTER\" text\u003d\"Label\" textFill\u003d\"#fffefe\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendarGrid\" layoutY\u003d\"117.0\" AnchorPane.bottomAnchor\u003d\"20.0\" AnchorPane.leftAnchor\u003d\"40.0\" AnchorPane.rightAnchor\u003d\"40.0\" AnchorPane.topAnchor\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 38
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #00A5F0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".event_label {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Arial Black\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #00A5F0 !important;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".eventtime_label {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Arial Black\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #8de7fd !important;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\" !important;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".dialog-container {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".calendar_pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-background-color:  white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-width: .5;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-color: gray;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".calendar_label {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".elisa_dialog {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #00A5F0;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".user_dialog {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7,
      "-": 168,
      "Icesiolz": 52
    }
  },
  {
    "path": "src/main/resources/view/ElisaDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_LEFT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" styleClass\u003d\"elisa_dialog\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"elisa_dialog\" maxHeight\u003d\"1.7976931348623157E308\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/resources/view/ElisaReminderBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: rgba(238, 148, 148, 0.85); -fx-background-radius: 20,20,20,20;\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "blimyj": 31
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"64.0\" AnchorPane.leftAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cLabel fx:id\u003d\"priorityLabel\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_priority\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cLabel fx:id\u003d\"description\" maxWidth\u003d\"150.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"64.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cVBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"date\" prefWidth\u003d\"100.0\" styleClass\u003d\"event_label\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003cFont name\u003d\"Titan One\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"time\" prefWidth\u003d\"100.0\" styleClass\u003d\"eventtime_label\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003cFont name\u003d\"Titan One\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 76
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/ItemListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 36
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"900.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ELISA\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        \u003cImage url\u003d\"@/images/ElisaImageWithoutWords.PNG\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cScene fx:id\u003d\"scene\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cPane maxHeight\u003d\"110.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"110.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"110.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cImageView fx:id\u003d\"elisaImage\" fitHeight\u003d\"80.0\" fitWidth\u003d\"90.0\" layoutX\u003d\"12.0\" layoutY\u003d\"9.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/ElisaImageWithoutWords.PNG\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cText fx:id\u003d\"elisaDescription\" fill\u003d\"#8de7fd\" layoutX\u003d\"80.0\" layoutY\u003d\"65.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Exceptionally Loud n\u0027 Intelligent\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                        \u003cFont name\u003d\"HP Simplified Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cText fx:id\u003d\"elisaText\" fill\u003d\"#10b3d7\" layoutX\u003d\"80.0\" layoutY\u003d\"45.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"ELISA\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                        \u003cFont name\u003d\"Franklin Gothic Demi\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cText fx:id\u003d\"elisaDescription2\" fill\u003d\"#8de7fd\" layoutX\u003d\"80.0\" layoutY\u003d\"80.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Student Assistant \"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                              \u003cFont name\u003d\"HP Simplified Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/Pane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" layoutY\u003d\"110.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"440.0\" minWidth\u003d\"300.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"result-display\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"110.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" layoutY\u003d\"550.0\" maxHeight\u003d\"50.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"50.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"300.0\" layoutY\u003d\"-1.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"300.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cTabPane fx:id\u003d\"viewsPlaceholder\" styleClass\u003d\"tab-pane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"T\" text\u003d\"(T)ask\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"E\" text\u003d\"(E)vent\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"R\" text\u003d\"(R)eminder\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"C\" text\u003d\"(C)alendar\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"23.200000000000045\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"19.200000000000045\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 8,
      "-": 25,
      "Icesiolz": 93
    }
  },
  {
    "path": "src/main/resources/view/OpenItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #383838;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    \u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" style\u003d\"-fx-text-fill: #00A5F0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u003cLabel fx:id\u003d\"itemdetails\" style\u003d\"-fx-text-fill: white\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$itemdetails\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 31,
      "sianghwee": 9
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"64.0\" AnchorPane.leftAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cLabel fx:id\u003d\"priorityLabel\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_priority\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cLabel fx:id\u003d\"description\" maxWidth\u003d\"150.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"64.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cImageView fx:id\u003d\"statusIcon\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cVBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"date\" prefWidth\u003d\"100.0\" styleClass\u003d\"event_label\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003cFont name\u003d\"Titan One\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"time\" prefWidth\u003d\"100.0\" styleClass\u003d\"eventtime_label\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003cFont name\u003d\"Titan One\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 82
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "           styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "  \u003cScrollPane fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              prefHeight\u003d\"392.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              prefWidth\u003d\"435.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  prefHeight\u003d\"441.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  prefWidth\u003d\"507.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  styleClass\u003d\"dialog-container\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Icesiolz": 24
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "         \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"64.0\" AnchorPane.leftAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                         \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                             \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                 \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                 \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                             \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                         \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003cLabel fx:id\u003d\"priorityLabel\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_priority\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003cLabel fx:id\u003d\"description\" maxWidth\u003d\"150.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cHBox alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"64.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003cImageView fx:id\u003d\"statusIcon\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003cInsets bottom\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 64
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/UserDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" styleClass\u003d\"user_dialog\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/resources/view/WhiteTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    background-color: white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #00A5F0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #f2f2f2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #d9d9d9;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background: white;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".event_label {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Arial Black\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #00A5F0 !important;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(whitesmoke, 20%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\" !important;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".dialog-container {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 30%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: derive(white, 30%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(grey, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(whitesmoke, 50%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".calendar_pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color:  white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: .5;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: gray;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".calendar_label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".elisa_dialog {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #00A5F0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".user_dialog {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #4d4d4d;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: white white white white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: #383838 #383838 black #383838;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 221
    }
  },
  {
    "path": "src/main/resources/view/tabpane.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 1
    }
  },
  {
    "path": "src/test/java/seedu/elisa/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/item/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.core.item.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.PNG\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistoryManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonItemStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage jsonItemStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                new JsonItemStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jsonItemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        ElisaCommandHistory historyManager \u003d new ElisaCommandHistoryManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model \u003d new ItemModelManager(storage.toModelType(), userPrefsStorage.readUserPrefs().get(), historyManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage jsonItemStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                new JsonItemStorageIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                                      ItemModel expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        ItemModel expectedModel \u003d new ItemModelManager(model.getItemStorage(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                new UserPrefs(), model.getElisaCommandHistory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @see #assertCommandSuccess(String, String, ItemModel)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                      String expectedMessage, ItemModel expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static class JsonItemStorageIoExceptionThrowingStub extends JsonItemStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        private JsonItemStorageIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 23,
      "mannggoo": 3,
      "sianghwee": 16,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model \u003d new ItemModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item validItem \u003d new TestItemBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemModel expectedModel \u003d new ItemModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        expectedModel.addItem(validItem);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assertCommandSuccess(new AddCommand(validItem), model,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validItem), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Can\u0027t test for this yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 11,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "//import seedu.address.model.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //SHOULD BE --\u003e private class ModelStub implements ItemModel {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Currently I just put this so that i don\u0027t have to implement all the methods in ItemModel."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private class ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        public void updateViewList(String targetList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 6,
      "mannggoo": 21,
      "-": 161,
      "Icesiolz": 4
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DESCRIPTION_1 \u003d \"homework\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DESCRIPTION_2 \u003d \"do all my homework\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_EVENT_1 \u003d \"2018-12-30T19:34:50.63\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_EVENT_2 \u003d \"2018-12-30T19:34\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_REMINDER_1 \u003d \"2018-12-30T19:34:50.63\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_REMINDER_2 \u003d \"2018-12-30T19:34\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_HIGH \u003d \"hIgH\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_MEDIUM \u003d \"mEDIUM\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_LOW \u003d \"low\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_TAG_1 \u003d \"necessary\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_TAG_2 \u003d \"123necessary\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DURATION_NULL \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DESCRIPTION_DESC_1 \u003d VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DESCRIPTION_DESC_2 \u003d VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_DESC_1 \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_DESC_2 \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_DESC_1 \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER_1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_DESC_2 \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER_2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_HIGH \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_MEDIUM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MEDIUM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_LOW \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TAG_DESC_1 \u003d \" \" + PREFIX_TAG + VALID_TAG_1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TAG_DESC_2 \u003d \" \" + PREFIX_TAG + VALID_TAG_2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_EVENT_DESC \u003d \"monday\"; // must be of the LocalDateTime.parse() format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_REMINDER_DESC \u003d \"01/02/2018\"; // must be of the LocalDateTime.parse() format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \"very very high\"; // must be a single word high/medium/low"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \"@prepare-ahead\"; // \"@\"/\"-\" symbols not allowed. Only alphanumeric."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"-d  -r  -p  -t \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final EditCommand.EditItemDescriptor ITEM_1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final EditCommand.EditItemDescriptor ITEM_2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ITEM_1 \u003d new EditItemDescriptorBuilder().withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_1, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_1)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ITEM_2 \u003d new EditItemDescriptorBuilder().withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_2, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItemModel actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            ItemModel expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ItemModel, CommandResult, ItemModel)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItemModel actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            ItemModel expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandFailure(Command command, ItemModel actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage expectedAddressBook \u003d actualModel.getItemStorage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        List\u003cItem\u003e expectedVisualList \u003d new ArrayList\u003c\u003e(actualModel.getVisualList().getList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getItemStorage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assertEquals(expectedVisualList, actualModel.getVisualList().getList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "lrchema": 11,
      "mannggoo": 48,
      "sianghwee": 2,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private ItemModel model \u003d new ItemModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Updates {@code model}\u0027s filtered list to show no one"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 6,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     //Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     //but smaller than size of address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 7,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 3,
      "lrchema": 3,
      "mannggoo": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 7,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel expectedModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 5,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_COMMAND_FORMAT, ()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 65,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Also covers: Reusing of the tokenizer multiple times"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Also covers: testing for prefixes not specified as a prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 8,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 6,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/elisa/model/ItemModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.ReminderList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.TaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.testutil.TypicalItems;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemModelManager testModel \u003d new ItemModelManager(new ItemStorage(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            new UserPrefs(), new ElisaCommandHistoryManager());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item task \u003d TypicalItems.ITEM_WITH_TASK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item event \u003d TypicalItems.ITEM_WITH_EVENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item reminder \u003d TypicalItems.ITEM_WITH_REMINDER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item.ItemBuilder template \u003d new Item.ItemBuilder().setItemDescription(new ItemDescription(\"test\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item validItem \u003d TypicalItems.ITEM_WITH_ALL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper method to check all the sizes of the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param size the expected size of all the lists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void checkAllList(int size) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(size, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(size, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(size, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"C\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(size, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testConstructor() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(new ItemStorage(), testModel.getItemStorage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(new UserPrefs(), testModel.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(new ElisaCommandHistoryManager(), testModel.getElisaCommandHistory());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.setUserPrefs(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.setGuiSettings(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(guiSettings, testModel.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.setItemStorageFilePath(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setItemStorageFilePath(path);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(path, testModel.getItemStorageFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_taskList_changeToTaskList() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.getVisualList() instanceof TaskList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_eventList_changeToEventList() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.getVisualList() instanceof EventList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_reminderList_changeToReminderList() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.getVisualList() instanceof ReminderList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_invalidValue_throwIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e testModel.setVisualList(\"B\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.addItem((Item) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validTask_addedToTaskList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validEvent_addedToEventList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(event);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validReminder_addedToReminderList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(reminder);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_itemDoesNotBelongInVisualList_visualListEmpty() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(reminder);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validItem_addedToAllList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(validItem);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        checkAllList(1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void deleteItem_validIndex_deletedFromAllList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validItem);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(validItem, testModel.deleteItem(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        checkAllList(0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem_validItem_itemReplaced() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validItem);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item newItem \u003d template.setTask(new Task(true)).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.replaceItem(validItem, newItem);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.hasItem(newItem));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_priorityModeCurrentlyOff_priorityModeOn() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertTrue(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_priorityModeCurrentlyOn_priorityModeOff() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_noTaskInList_priorityModeOff() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_noIncompleteTaskInList_priorityModeOff() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(true)).build());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_onIncorrectList_throwsIllegalListException() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertThrows(IllegalListException.class, () -\u003e testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void markComplete_incompleteTask_markTaskAsComplete() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.markComplete(0, true);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertTrue(testModel.getItem(0).getTask().get().isComplete());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void markIncomplete_completeTask_markTaskAsIncomplete() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(true)).build());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.markComplete(0, false);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.getItem(0).getTask().get().isComplete());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void markComplete_invalidList_throwsInvalidListException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(IllegalListException.class, () -\u003e testModel.markComplete(0, true));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void done_inPriorityMode_finishAllTask() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.markComplete(0, true);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.getPriorityMode().getValue());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void delete_inPriorityMode_finishAllTask() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.deleteItem(0);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.getPriorityMode().getValue());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void done_inPriorityMode_getNextTask() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item lowPriority \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemPriority(Priority.LOW)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemDescription(new ItemDescription(\"Low priority\"))"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setTask(new Task(false))"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(lowPriority);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.markComplete(0, true);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(lowPriority, testModel.getVisualList().get(0));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void delete_inPriorityMode_getNextTask() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(task);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item lowPriority \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemPriority(Priority.LOW)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemDescription(new ItemDescription(\"Low priority\"))"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setTask(new Task(false))"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(lowPriority);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.deleteItem(0);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(lowPriority, testModel.getVisualList().get(0));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void emptyList_allListsEmpty() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validItem);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.emptyLists();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        checkAllList(0);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void clear_newItemStorageAndAllListsEmpty() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validItem);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.clear();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(testModel.getItemStorage(), new ItemStorage());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        checkAllList(0);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort_ensureListsAreDifferent() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validItem);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList original \u003d testModel.getVisualList();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.sort();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList newList \u003d testModel.getVisualList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertFalse(original \u003d\u003d newList);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 360
    }
  },
  {
    "path": "src/test/java/seedu/elisa/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        differentUserPrefs.setItemStorageFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 3,
      "lrchema": 1,
      "sianghwee": 3,
      "mannggoo": 1,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/elisa/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setItemStorageFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/elisa/model/item/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.testutil.TypicalItems;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item validTask \u003d TypicalItems.ITEM_WITH_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item invalidTask \u003d TypicalItems.ITEM_WITH_EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void add_validTask_returnTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testList.add(validTask));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void add_invalidTask_returnFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertFalse(testList.add(invalidTask));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void add_repeatedItem_returnFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(validTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertFalse(testList.add(validTask));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void deepCopyTest () {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(validTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tempList \u003d (TaskList) testList.deepCopy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(testList, tempList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertFalse(testList \u003d\u003d tempList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(validTask, tempList.get(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertFalse(validTask \u003d\u003d tempList.get(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort_returnNewList () {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(validTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertFalse(testList \u003d\u003d testList.sort());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(testList, testList.sort());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to easily create an item with a task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param value the description of the item"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an item with a task and the description."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item generateTask(String value) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item template \u003d new Item.ItemBuilder().setTask(new Task(false))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemDescription(new ItemDescription(value))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return template;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void find_randomTaskList_findRelevantTasks() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String valueString \u003d Double.toString(Math.random());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(generateTask(\"CS2101\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(generateTask(\"CS2101 PPP\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(generateTask(\"CS2103 PPP\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(generateTask(\"CS2103 demo\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(generateTask(\"CS2105 assignment\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testList.add(generateTask(\"CS2101 pitch\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(3, testList.find(new String[] {\"CS2101\"}).size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 75
    }
  },
  {
    "path": "src/test/java/seedu/elisa/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "lrchema": 4,
      "mannggoo": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/elisa/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "sianghwee": 1,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/elisa/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage itemStorage \u003d new JsonItemStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storageManager \u003d new StorageManager(itemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void itemStorageReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage original \u003d new ItemStorage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storageManager.saveItemStorage(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage retrieved \u003d storageManager.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertNotNull(storageManager.getItemListFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "sianghwee": 18,
      "mannggoo": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 5,
      "lrchema": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/EditItemDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class EditItemDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private EditItemDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder(EditItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.descriptor \u003d new EditItemDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder(Item item) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setDescription(item.getItemDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTask(item.getTask().orElse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setEvent(item.getEvent().orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setReminder(item.getReminder().orElse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTags(item.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setDescription(new ItemDescription(description));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withTask(boolean complete) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        descriptor.setTask(new Task(complete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withEvent(String start, String duration) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event processedEvent \u003d getEvent(start, duration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setEvent(processedEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder processedReminder \u003d getReminder(dateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setReminder(processedReminder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the {@code priority} into a {@code priority} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Priority newPriority \u003d Priority.fromJson(priority);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        descriptor.setPriority(newPriority);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptor build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Priority getPriority(String p) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority priority \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(p).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as priority given is valid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Event getEvent(String start, String duration) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            event \u003d ParserUtil.parseDateTime(start).get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as start format should be valid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Leave empty as of now, currently we don\u0027t deal with parsing duration"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //event \u003d event.changeDuration(Duration.of(...) );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder getReminder(String itemReminder) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reminder \u003d ParserUtil.parseReminder(itemReminder).get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Should not enter here as itemReminder format should be valid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 15,
      "lrchema": 10,
      "mannggoo": 113,
      "sianghwee": 1
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TestItemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "//import seedu.elisa.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class TestItemBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Do 2103T Quiz\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_EVENT \u003d \"2019-09-26T23:59\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_REMINDER \u003d \"2019-09-25T23:59\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"HIGH\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_EVENT_DURATION \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemDescription description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Priority priority; // priority of the Item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description \u003d new ItemDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority \u003d Priority.valueOf(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        event \u003d processEvent(DEFAULT_EVENT, DEFAULT_EVENT_DURATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        reminder \u003d processReminder(DEFAULT_REMINDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Initializes the TestItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description \u003d itemToCopy.getItemDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority \u003d itemToCopy.getPriority();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        event \u003d itemToCopy.getEvent().orElse(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        reminder \u003d itemToCopy.getReminder().orElse(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(itemToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code desc} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.description \u003d new ItemDescription(desc);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the {@code priority} into a {@code Priority} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public TestItemBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.priority \u003d Priority.fromJson(priority);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code itemEvent} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public TestItemBuilder withEvent(String itemEvent, String duration) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.event \u003d processEvent(itemEvent, duration);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code itemReminder} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withReminder(String itemReminder) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.reminder \u003d processReminder(itemReminder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Builds a new Item object with the given descriptions"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Item with the given descriptors"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        itemBuilder.setItemPriority(priority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setEvent(event);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setReminder(reminder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Should not enter here as all the arguments are valid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes a {@code datetime}, a {@code duration} and a {@code itemPriority} to generate an appropriate Event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param datetime start DateTime of this Event"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param duration of this Event"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event with the given parameters"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Event processEvent(String datetime, String duration) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            event \u003d ParserUtil.parseDateTime(datetime).get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // should not enter here as DEFAULT_EVENT are of the correct format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the {@code itemReminder} given to generate an appropriate Reminder with the dateTime given."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param itemReminder representing the DateTime of the reminder"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Reminder with the given date and time"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder processReminder(String itemReminder) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reminder \u003d ParserUtil.parseReminder(itemReminder).get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as DEFAULT_REMINDER is of the correct format"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 20,
      "lrchema": 9,
      "mannggoo": 116,
      "sianghwee": 1
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 10,
      "lrchema": 4,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TypicalItems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_DURATION_NULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_EVENT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_EVENT_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_REMINDER_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_REMINDER_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_TAG_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_TAG_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class TypicalItems {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final Item ITEM_WITH_TASK \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setItemDescription(new ItemDescription(\"test\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setTask(new Task(false)).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final Item ITEM_WITH_EVENT \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setItemDescription(new ItemDescription(\"test\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setEvent(new Event(LocalDateTime.now(), Duration.ZERO)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final Item ITEM_WITH_REMINDER \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setItemDescription(new ItemDescription(\"test\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setReminder(new Reminder(LocalDateTime.now())).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final Item ITEM_WITH_ALL \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setItemDescription(new ItemDescription(\"test\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setTask(new Task(false))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setEvent(new Event(LocalDateTime.now(), Duration.ZERO))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setReminder(new Reminder(LocalDateTime.now())).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item HOMEWORK \u003d new TestItemBuilder().withDescription(\"Do all homework\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(\"2018-12-30T19:34:50.63\", null)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(\"2018-12-29T19:34:50.63\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item EXAM \u003d new TestItemBuilder().withDescription(\"Final Exam\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(\"2019-10-30T12:00\", null)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(\"2019-10-29T12:00\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Manually added - Item\u0027s detail found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item ITEM_1 \u003d new TestItemBuilder().withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_1, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_1)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item ITEM_2 \u003d new TestItemBuilder().withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(VALID_EVENT_2, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(VALID_REMINDER_2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private TypicalItems() {} //prevents instantiation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns an {@code ItemStorage} with all the typical persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemStorage getTypicalItemList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (Item item : getTypicalItems()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemStorage.add(item);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static List\u003cItem\u003e getTypicalItems() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HOMEWORK, EXAM));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 14,
      "mannggoo": 42,
      "sianghwee": 29
    }
  },
  {
    "path": "src/test/java/seedu/elisa/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/elisa/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003c?import seedu.elisa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003cfx:root type\u003d\"seedu.elisa.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 5
    }
  }
]
