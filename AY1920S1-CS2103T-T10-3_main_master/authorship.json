[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d ELISA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T10-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-T10-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Extremely Loud and Intelligent Student Assistant (ELISA) is for students who *want to have an intelligent companion that keeps track of tasks and give friendly reminders on when to take breaks*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* More importantly, ELISA is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ELISA can get your tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Built on AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 1,
      "mannggoo": 4,
      "-": 30
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "mainClassName \u003d \u0027seedu.elisa.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    archiveName \u003d \u0027ELISA_v1.3.5.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "sianghwee": 2,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA _(Exceptionally Loud and Intelligent Student Assistant)_ - Was developed by the https://github.com/AY1920S1-CS2103T-T10-3[T10-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA is a student assistant made for college students who need constant reminders to complete their daily tasks. More importantly, ELISA is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "We are a student team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Bryan Lim"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::blimyj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/blimyj[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Commons"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Hema"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::lrchema.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/lrchema[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Functionality"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lim Yu Hui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::mannggoo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/mannggoo[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Low Cheng Yi"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::Icesiolz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/Icesiolz[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Ng Siang Hwee"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::sianghwee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/sianghwee[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 21,
      "-": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T10-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* *Email us* : You can also reach us at `holmescordelia8 [at] gmail.com`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d ELISA - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ":icons-cdn: https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T10-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "By: `AY1920S1-CS2103T-T10-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Item` : Used by classes to represent a task, event, reminder or any combination of the three."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Task` : Used by classes to store, access and modify details regarding tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Events` : Used by classes to store, access and modify details regarding events."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Reminders` : Used by classes to store, access and modify details regarding reminders."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::LogicComponentUML.png[]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::LogicComponentUML.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  `Logic` uses the `ElisaParser` class to parse the user command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  The command execution can affect the `ItemModel` (e.g. adding a person)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  More instructions for the `Ui` can be given through implementing `ScrollCommand`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* stores the Item Storage data"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* exposes four observable lists that can be viewed by the Ui and will cause an update in the Ui when it is updated"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The reason for using four observable list as opposed to having one observable list that is filtered every time we update the list is because we believe that this will lead to faster loading time every time we switch view as it is just a change in the Visualization List pointer. This is better than the O(n) method of filtering a single VisualizeList as it will require going through all the items in the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* can save the Item Storage data in json format and read it back."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::undobyreverse[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d [Implemented] Undo Feature"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation Logic"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The undo function uses the revert command method without using states and history, unlike the proposed method."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lrchema"
        },
        "content": "This is because an issue was encountered with referencing lists and firing reminders multiple times when the state history method was used."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lrchema"
        },
        "content": "In this implementation, the commands that can be undone; that is, all the commands except `UndoCommand`, `ExitCommand`,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lrchema"
        },
        "content": "`UpCommand` and `DownCommand` now extend from an abstract class `UndoableCommand`, which is a subclass of Command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Subclasses of `UndoableCommand` must implement a method `reverse(ItemModel model)`, which should do the exact opposite"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lrchema"
        },
        "content": "of the `execute(ItemModel model)` in that Command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The command execution history is stored in a stack, which is maintained in `ElisaCommandHistory`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Below is a possible usage scenario and the app behaviour."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 1. The user executes `task eat`. A task with description \"eat\" is added and then the command is pushed into the commands stack."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::UndoStackStep1.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 2. The user realises that adding the task was a mistake, and decides to undo by entering `undo` into ELISA. The `undo` command"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lrchema"
        },
        "content": "will pop the `AddTaskCommand` from the stack and reverse the effects of that command, in this case by deleting the task \"eat\" from the `TaskList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::UndoStackStep2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 3. After successful execution of the `UndoCommand` a confirmation message is displayed in the chat box."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "// tag:: priority[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Priority Mode"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The priority mode is used to aid the user in focusing on the most pressing task that they have especially when they have many tasks in their list. As priority mode is only for clearing of tasks, the priority mode can only be activated at the task pane of the application."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The priority mode is mainly controlled in the ```ItemModelManager``` and the following are the methods it implements within the ```ItemModelManager```:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#togglePriorityMode()``` - Toggle the priority mode depending on whether it is on or off."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#toggleOnPriorityMode()``` - Helper function to toggle on the priority mode."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#toggleOffPriorityMode()``` - Helper function to toggle off the priority mode."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "There are two variants to the priority mode, a normal priority mode that is controlled fully by the user and a scheduled priority mode that is triggered by the user but is scheduled to turn off after a specific amount of time. In addition to using the above three methods, the ```ScheduledPriorityMode``` also uses the following method:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#startTimer(LocalDateTime)``` - Starts a timer to turn off the priority mode."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Example run of code"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "In the following section, we will be showing a run of the priority mode and the behaviour of the mechanism at each step. In particular, we will be showing how the ```ScheduledPriorityMode``` works as it has a more complicated implementation than the normal ```PriorityMode```."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 1. The user opens his ELISA software. The first screen that he observes will be the task screen which contains all the task of the user based on the time they were added into the list."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 2. The user types ```priority 30.min.later``` into the command box of ELISA and hits enter. The list is instantly shrink to show only the most pressing task (i.e. the task with the highest priority). If two tasks have the same priority, either of the task will be shown as there is no other way for ELISA to compare between the two task."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 3. The user can type ```done 1``` when he is done with the current task to retrieve the next task. This will carry on until there is no more undone task left to do. This is shown in the activity diagram below."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityModeActivityDiagram.png[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 4. ELISA will automatically disable the priority mode after 30 minutes and show *all* the task that the user have in his task list currently."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Internal working of the command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The figure below shows the sequence diagram on what happens from a simple execution of the ```priority 30.min.later``` command. We will be going through step by step the internal mechanism of the execution of the ```ScheduledPriorityCommand```."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Sequence diagram for priority mode"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityMode.png[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 1. When the user types in the command, the ```LogicManager``` takes in the command as a string and pass it to the ```AddressBookParser```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 2. The ```AddressBookParser``` parses the string and determine whether the command is that of a normal ```PriorityCommand``` or a ```ScheduledPriorityCommand```. In this case, the command is that of a ```ScheduledPriorityCommand``` and so a new ```ScheduledPriorityCommand``` is created. This ```ScheduledPriorityCommand``` is passed back to the ```LogicManager```."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "(Despite the fact that this is a ```ScheduledPriorityCommand```, the following steps marked with a * are also applicable to a normal ```PriorityCommand```)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 3*. Within the ```LogicManager```, the ```ScheduledPriorityCommand#execute()``` method is called and the command is executed."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 4. The ```ScheduledPriorityCommand``` calls the ```ItemModel#scheduleOffPriorityMethod()``` which creates a new ```Timer``` object and a new ```TimerTask``` object. The ```TimerTask``` object will be scheduled to fire off at a specific time, which in this case is 30 minutes later (as defined by the user)."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 5*. The ```SchedulePriorityCommand``` then calls ```ItemModel#togglePriorityMode()``` which calls the private method ```ItemModel#toggleOnPriorityMode()``` (since the current state of the priority mode is false)."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 6*. This creates a new ```TaskList``` which will be the visualization list for the Task Panel throughout the entire priority mode period."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 7*. A ```CommandResult``` is passed to the ```ScheduledPriorityCommand``` and then back to the ```LogicManager``` to be passed into the ```Ui```, informing the user that the priority mode is activate."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "(At this point, a normal ```PriorityCommand``` will end the sequence diagram here and will only be deactivated by the user\u0027s input of ```priority``` again.)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Sequence diagram for the scheduled turning off of priority mode"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityMode2.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 8. As the ```Timer``` within the ```ItemModelManager``` is still running on a separate thread, it will trigger the ```TimerTask#run()``` when the user defined time is reached."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 9. The ```TimerTask``` will call ```ItemModelManager#toggleOffPriorityMode()``` which will cancel the ```Timer``` and destroy the ```Timer```. This is to ensure that the program can be closed properly."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 10. The items are all added back into the ```TaskList``` and the priority mode is considered deactivated."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Aspect: How to turn off the priority mode after a fixed time"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* **Alternative 1:** Having two different classes for activating the priority mode, a normal ```PriorityCommand``` and a ```ScheduledPriorityCommand``` that extends from the ```PriorityCommand```. The timer will be activated in the ```ScheduledPriorityCommand```."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Pros: Adhere to the SLAP principle with each class having it\u0027s own implementation of the ```Command#execute(ItemModel)```. This makes it easier to maintain the code and prevents from overloading the ItemModel by keeping the timer there."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Cons: There is no way to end the ```ScheduledPriorityCommand``` as the timer is kept within the command and so cannot be cancelled prematurely as there is no way to access the command after that."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* **Alternative 2 (Current choice)**: Having a timer within the ```ItemModelManager``` and having a specific method within the ```ItemModelManager``` to handle this creation of the timer."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Pros: The scheduled priority mode can be controlled within the ```ItemModelManager``` and can then be controlled within the class such that it can be cancelled when it is done."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Cons: This implementation will clutter the ```ItemModelManager``` further and make it harder for maintaining the code."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Alternative 2 was chosen as we believe that the functionality of the ```ScheduledPriorityMode``` takes priority over the maintainability of the code and should be used first until a better method can be created."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Possible extension"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "As of this moment, there is no way to display the status of the priority mode within the ```Ui``` other than through the visualization list. One possible extension is changing the colour of Elisa to signify that the user is in the priority mode."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "At the moment, there is also no way to inform the user that the priority mode is disabled when it is scheduled to be off. However, this can be solved if the above extension is implemented as it will trigger the message when the mode switches."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "// end:: priority[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Add Task/Event feature"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Task, Events and Reminders are all Items and can be added using the *same* command. Adding of Items is facilitated by ItemModel#add(Item). +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "A Task with a deadline flag `-d` will be considered an Event. A Task with a reminder flag `-r` will be considered a Reminder. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The following activity diagram shows the how a task can be added, depending on the flags present:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Activity Diagram of adding a Task"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddTaskActivity.png[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This shows how we can easily add Task, Event and Reminder with a _single_ command."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "However, in this section, we will only show how Task and Event is added. Adding of Reminders is shown in a separate section as it includes other steps."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings of the command"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Given below is an example usage scenario of how add behaves at each step: +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 1. The user enters the command `\"task shower -d 1.hour.later\"`. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 2. The LogicManager creates an AddressBookParser to parse the user input. +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 3. AddressBookParser creates a AddTaskCommandParser which parses the input and returns an AddCommand. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 4. LogicManager will execute the AddCommand. AddCommand will then invoke `ItemModel#add(Item)`, which adds Task to its TaskList and Event to its EventList. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 5. AddCommand will also trigger a change in view by calling `ItemModel#setVisualList(taskList)`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 6. Upon the successful execution of AddCommand, a CommandResult is returned to the LogicManager, which will then be returned to the Ui to render the appropriate view."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The figures below shows the sequence diagram on what happens from a simple execution of `task shower -d 1.min.later` user command: +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Calling execute in LogicManager"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddCommandPart_1.png[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This diagram shows how `execute` is carried out in the `Logic` component."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The following diagram shows how the same command is continued onto the `Model` component:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".LogicManager executing the command and returns CommandResult"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddCommandPart_2.png[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This shows how `execute(model)` affects the `Model` component. It then returns a `CommandResult` r, which is the result of calling LogicManager#execute(\"task shower -d 1.hour.later\")."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The design considerations for the classes are shown below:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Alternatives: |Pros: |Cons:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|1. Placing all fields into an Item object and retrieving the specific fields when needed. | Easy to implement. Reduce dependencies between classes as everything is in one class. Editing can be done all in one object.| Does not separate out the different functionalities of Task, Event and Reminder."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|2. Having separate classes for Task, Event, Reminder | Reduce dependencies as well as having functionalities separated. | Some attributes and methods overlap. Repetition of code for same functionality. Have to add all three objects individually. Editing of an item would require searching, obtaining and individually editing all 3 objects."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|3. *(Current)* Having a general Item class which comprise of `Optional\u003c\u003e` fields Task, Event, Reminder | Similar fields such as description and priority can be placed in Item. This makes adding an Item more convenient. Related task/event/reminder can have access to each other. | Increase coupling and dependency amongst Task, Event, Reminder classes."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "As of now, these are the considered designs and the current design seems to work well for our purpose. However, there could be better designs which are unexplored that could mitigate our cons and we welcome them. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This is end of the section of adding a Task and Event. As mentioned above, adding of Reminder will be shown in a separate section due it having extra features. Do look out for it if you\u0027re interested."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Rescheduling of recurring Events automatically"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This section talks about how the `autoReschedule` function is implemented. This feature aims to provide users with greater convenience when scheduling events that occur periodically (eg. weekly deadlines, monthly appointments)."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To reschedule a task, we need a deadline as we need to be able to calculate the next date. Recall that any Task with a deadline is considered an Event. As such, *only Events can be rescheduled.*"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To automatically reschedule an Event, when creating the Event, include the `-auto` flag along with its reschedule period (eg `-auto day` for daily rescheduling) +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The accepted parameters for `-auto` is `day`, `week`, `month` and the format of `10.min.later`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The following diagram shows the process of adding an Event with -auto flag:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Activity diagram of adding an Event with -auto flag"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AutoRescheduleActivity.png[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "In the diagram, when we add the Event initially, we would check the start time of the Event and update it accordingly."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "However, this is not the only place where rescheduling occurs."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "*3 places where rescheduling can occur:* +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ". When the event is created, as shown in the diagram above."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ". While the app is running, the Event\u0027s start time will be continuously updated when it has passed. +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This is done using `Timer` and `TimerTask`, using `Timer#scheduleAtFixedRate()`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ". When the app is started and Events are loaded from the storage. The stored Event time might already be over, as such the time has to be updated to the latest upcoming one."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To illustrate how they work, first we need to know what classes are involved before we can understand the sequence of actions carried out. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The classes involved in the above rescheduling are: +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `AutoReschedulePeriod` -- Represents the period of every reschedule (eg day/week/month)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `RescheduleTask` -- Represents the action to perform when rescheduling its associated event."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `AutoRescheduleManager` -- Manages all the rescheduling tasks. There is only one of such manager."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To better understand its underlying structure, we can look at the class diagram below:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "_{insert class diagram here}_"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Internal workings of the command"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Now we are ready to look at the sequence of actions. Given below is an example usage scenario of how add behaves at each step: +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 1. The user enters the command `event CS2103T Quiz -d 23/09/2019 2359 -auto week`. +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 2. The Event is created, following the sequence of steps in the section _Adding Task/Event_. However there are now some extra steps from Step 3 onwards that occur concurrently from the object creation of Event. +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 3. ... _{work in progress}_"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "_{insert sequence diagram here}_ +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "_explain the above diagram_ +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The design considerations for the classes are shown below:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Alternatives: |Pros: |Cons:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Creating a AutoRescheduleManager for every RescheduleTask | Easy for the Timer in AutoRescheduleManager to keep track of its TimerTask. | There could potentially be many Timer threads."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|*(Current)* Singleton pattern for AutoRescheduleManager |Ensure that only one instance can be instantiated as there should only be one manager for all the RescheduleTask. If there are multiple managers, it would be hard to keep track of all of them and it would be difficult to coordinate all the tasks. | Difficult to create tests for AutoResheduleManager. Could have many hidden dependencies, which makes code harder to maintain."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* has a need to manage a large number of tasks"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* needs reminders to take breaks or move on to finish all their work"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* prefers to be more organized with their time and tasks"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* prefer desktop apps over other types of apps"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Value proposition*: manage time and tasks more efficiently than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |add a new task | record tasks that need to be done \u0027some day\u0027"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |mark a task as done | keep track of my remaining tasks"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |delete a task |remove tasks that I no longer need"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |student |add deadline to a task |remember my task deadlines"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |find upcoming tasks |decide what needs to be done"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |find a task by description |find only the tasks that are relevant to me at that point in time"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |new user |view more information about a command |learn how to use various commands"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |forgetful student |be reminded of deadlines |remember to complete them before they are due"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |type my commands in the text |use the app without needing the mouse"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |use the undo function |reverse any changes I made by mistake"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* *` |busy student |see my reminders as notifications|be reminded of them even in other applications"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* *` |user with many tasks |sort tasks by priority |identify which tasks require my immediate attention"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |student |turn on priority mode |focus on only one pressing issue at a time"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |have a software that saves after every action |will not lose information even if I close the program by accident"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |look at a summary of all deadlines in the calendar |see when I am free"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |edit the date of a deadline |fix my mistakes if I type the wrong command"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`*` |stressed student |ask ELISA to tell a joke |feel less stressed when my assistant has a sense of humour"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`*` |user |colour code my calendar events |easily categorise and differentiate between them"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "(For all use cases below, the *System* is `ELISA` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 001: Marking a task as done"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the task list to the user."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User marks the task as done by using the index of the task."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA updates the task list."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "5. ELISA shows the updated task list to the user."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 2a. The task list is empty."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 3a1. ELISA shows an error message."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 002: Adding a task"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User creates a new task with a description."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA informs the user that the task has been added."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1a. User can add deadline."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1a1. ELISA informs the user that a deadline has been added to that task."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1b. User can add a reminder date."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1b1. ELISA informs the user that a reminder has been added to that task."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1c. User enters an empty description."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1c1. ELISA informs the user that the description cannot be empty."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1c2. User enters a non-empty description"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* a. At any time, User can view the task from the task list or the calendar view."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* b. At any time, User can add a deadline to the task"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* c. At any time, User can add a reminder to the task"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 003: Deleting a task"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the task list."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User request to delete a task based on its index."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA deletes the task from the task list."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "5. ELISA shows the updated task list."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 2a. The task list is empty."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 3a1. ELISA shows an error message."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 004: Find upcoming reminders."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the reminder list."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the reminder list."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User enters command to sort reminders by date and time."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA shows the updated list of reminders sorted by date and time."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 005: Search for a task by its description"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA shows the reminder list."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. User enters command to find all matching tasks with the given search term(s)"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lrchema"
        },
        "content": "4. ELISA shows a list of tasks with descriptions matching the search term(s)"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 4a. There are no matching tasks"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 4a1. ELISA shows that there are 0 items listed"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 006: Undo the last command"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the undo command."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA reverts the last executed command."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. ELISA displays a confirmation message."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 2a. There are no commands to be undone"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 2a1. ELISA displays an error message."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 007: Using Priority Mode"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the command to enter priority mode."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA hides all tasks except the one with the highest priority."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. User enters command to set that task as done once they finish it."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lrchema"
        },
        "content": "4. ELISA shows the next highest priority task."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 1a. User is not viewing the task list"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 1a1. ELISA displays an error message"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "blimyj": 8,
      "lrchema": 102,
      "sianghwee": 179,
      "mannggoo": 110,
      "-": 397,
      "Icesiolz": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ":repoURL: https://github.com/ay1920s1-cs2103t-t10-3/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d ELISA - User Guide"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_title.png[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "By: `AY1920S1-CS2103T-T10-3`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Since: `Sep 2019`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Licence: `NUS`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_introduction.png[]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Hello, I am an Extremely Loud and Intelligent Student Assistant (ELISA)!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "I am here to be *your intelligent companion that keeps track of your tasks and remind you to take breaks*."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Although I am *optimized for those who prefer to work with a Command Line Interface* (CLI), I also have a Graphical User Interface (GUI). If you can type fast, I can get your tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Enjoy!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_quickstart.png[]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Have you installed Java `11` ?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Find me, `elisa.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Double-click me to start the app. See you in a few seconds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::MainWindow.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Tell me what to do in the command box!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Want to know more about me? A detailed explanation of me is at \u003c\u003cFeatures\u003e\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d\u003d Legend"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_legend.png[]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Now we\u0027ll be presenting what you\u0027ve been waiting for... our features! +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "But hold on, to fully appreciate our features, you might want to go through some of the command guidelines first. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "These are some mistakes that our users(and even us) would make initially, and they can be really unpleasant, so we hope that you won\u0027t have to go though them."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For your viewing pleasure, we\u0027ve collated it nicely into a quick starter pack below, let\u0027s start!"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::ug_features.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This table shows the basic rules for the formatting the input:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Command Guidelines"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Guidelines: |Description: |Correct usage:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Words in UPPER_CASE are the parameters to be supplied by the user | If given `task DESCRIPTION` description is to be provided. |`task shower`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|All flags *MUST* have a _space_ after them | `task shower -d10.min.later` is *incorrect*. It should be `task shower -d 10.min.later` | `task shower -d 10.min.later`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flags in square brackets are optional | If given `task DESCRIPTION [-t TAG]` tag is optional | `task shower` `task shower -t clean`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flags can be in any order, given that they are accepted by the command | If given `task DESCRIPTION [-d DATETIME] [-r REMINDER]` -r can come before -d | `task shower -d 1.hour.later -r 30.min.later` `task shower -r 30.min.later -d 1.hour.later`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flags must not be repeated in the same input | `task shower -p high -p low` is *incorrect* as -p appears twice | `task shower -p high`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This is a quick summary of all our flags. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For *first time* users: +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* You can choose to skip through this first as it may seem overwhelming now."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* But as you go along the different sections and see new flags, it might be useful to refer to this as it can help you understand it\u0027s accepted parameters."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "For *more experienced* users: +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* This can be your best buddy! We understand that sometimes it can be troublesome to look through the entire guide just to find the flag you want."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Flags Overview"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flag: |Parameter: |Parameter Format: |Possible Parameters: | Example Usage:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-d | DATETIME | yyyy-MM-ddTHHmm or dd/MM/yyyy HHmm or mm.min.later or HH.hour.later or dd.day.later |2019-09-25T19:34 or 25/09/2019 1934 or 10.min.later| -d 25/09/2019 1934"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-r | REMINDER |yyyy-MM-ddTHHmm or dd/MM/yyyy HHmm or mm.min.later or HH.hour.later or dd.day.later |2019-09-25T19:34 or 25/09/2019 1934 or 10.min.later| -r 25/09/2019 1934"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-p | PRIORITY |high, medium, low| HIGH, medium, LOW | -p high"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-t | TAG |alphanumeric only | happy123 | -t happy123"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-desc | DESCRIPTION | alphanumeric only | drink 5 litres of water | -desc"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-auto| PERIOD | day or month or week or mm.min.later or HH.hour.later or dd.day.later | day or week or month or 10.min.later | -auto 10.min.later"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--tk | _none_ | _none_ | _none_ | --tk"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--e | _none_ | _none_ | _none_ | --e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--r | _none_ | _none_ | _none_ | --r"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Not all tags work for every command. Please check the specific command for more details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Here are the icons that will be used in the app:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image:Completed.PNG[Done, title\u003d\"Done\"] shows that you\u0027ve completed this task. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image:Uncompleted.PNG[Not done, title\u003d\"Not done\"] shows that you have yet to complete this task. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image:EventIcon.PNG[Event, title\u003d\"Event\"] shows that this is an Event with the date shown in its eyes. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "All time dependent elements such as deadline, reminder and calendar time are dependent on the *system time*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "If you face any issues, please check the \u003c\u003cAdditional Notes\u003e\u003e. If it is not mentioned there, then feel free to bring it up to us!"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Now we are ready to jump into the features itself!"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Adding a task: `task`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds a task to the task list +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `task DESCRIPTION [-d DATETIME] [-r REMINDER] [-p PRIORITY] [-t TAG]`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To create a task quickly, just include the description as Task can have no flags (ie `task shower`)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins -r 5.hour.later`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins -d 10.hour.later -p low -t healthy`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Adding an event: `event`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds an event to events list and calendar +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `event DESCRIPTION -d DATETIME [-r REMINDER] [-p PRIORITY] [-t TAG] [-auto PERIOD]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 20/09/2019 1800`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 20/09/2019 1800 -r 19/09/2019 1800`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 3.day.later -r 2.day.later -p high -t friend`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event CS2013T Quiz -d 11/11/2019 2359 -auto week`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Adding a reminder: `reminder`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds a reminder to the reminder list +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `reminder DESCRIPTION -r REMINDER [-t TAG]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John’s Birthday -r 19/09/2019 14:00`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John’s Birthday -r 2019-09-19T14:00 -t friend`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John\u0027s Birthday -r 3.day.later`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003d\u003d\u003d Snoozing a reminder: `snooze`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Snoozes a reminder that occurred since the application was open. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blimyj"
        },
        "content": "If an index is not provided, the most recently occurred reminder will be snoozed. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blimyj"
        },
        "content": "If a snooze duration is not specified, the reminder will be snoozed at the default duration of 5 min. +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Format: \u0027snooze [INDEX] [-s SNOOZE_DURATION]\u0027 +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `snooze 1`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `snooze 3 -s 10.min.later`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `snooze -s 10/10/2020`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blimyj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blimyj"
        },
        "content": "It is not possible to snooze if no reminder has occurred yet."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Show the specified category : `show`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Shows the specified category by switching the view to the given list. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `show [t] [e] [c] [r] (Exactly one flag must be used with this command)\u0027\u0027"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show t`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show e`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show r`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show c`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Editing an item : `edit`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This command is used to edit any of the items that you might have. +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d *Limitations* +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* You are only able to edit the item currently shown in your view. For example, when you\u0027re on the task list, you can only edit the tasks shown. You will not be able to edit events or reminders."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* The new item with the edited fields must not already exist."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `edit INDEX [-desc DESCRIPTION] [-d DATETIME] [-r REMINDER] [-p PRIORITY] [-t TAG]...`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in currently viewed list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `edit 1 -desc read books -d 3.day.later -p low` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Edits item 1 of the current list. Changes the description to `read books`, deadline to `3.day.later` and priority to `low`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `edit 3 -desc CS2103 team meeting -r 3.hour.later -p high` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Edits item 2 of the current list. Changes the description to `CS2103 team meeting`, reminder to `3.hour.later` and priority to `high`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Deleting a reminder/task/event : `delete`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Deletes the reminder/task/event from ELISA. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Deletes the item at the specified `INDEX` of the current list shown."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* The index refers to the index number shown in the list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* No flags should be given with this command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show r` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Deletes the 2nd reminder in the shown reminder list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::undo[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Undoing the latest modification(s) : `undo`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Reverts the latest commands given on the ELISA. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `undo` can only be done if commands have been executed"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `undo` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Undoes the last command"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::redo[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Redoing the latest undone command(s) : `redo`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Re-executes the latest undone commands given on the ELISA. +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `redo` can only be done if undo has already been executed"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* After `undo`, if a new command is executed then `redo` cannot be executed"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `redo` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Sorting ELISA out: `sort`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Is ELISA getting too cluttered and disorganized? Do you want to sort your task by their priority? Or the events by their start date?"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ELISA comes in-built with a sort feature that allows you to sort your items within the different panel. And the best part of it? YOU can decide how you want to sort it."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The simple sort command on the different panel sorts the list differently (just another sign of how smart ELISA is) and they are as follows:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* task panel - tasks are sorted from those that are incomplete to those that are completed. Within the two groups, they are sorted based on their priority, from high to medium and to low."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* event panel - events are sorted based on their start date and time."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* reminder - reminders are sorted based on their firing off date and time."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "But why stop there? You are also able to sort by priority and description within all the panels and even combine different sorting together! You are only limited by your imagination (and the items within your lists)."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Format: `sort` or `sort \u003ccriteria\u003e`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `sort` - a simple sort that follows the criteria mentioned above for the different panel."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `sort priority` - sorts the item within the panel by their priority (from high to low)."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `sort desc` - sorts the item within the panel by their description (lexicographic order)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Finding a task: `find`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Is your task list getting too long and you are not able to find what you are looking for? Introducing the `find` function which will allow you to find what you want within the specific panel. Just type `find` and the keyword that you want to search for within the command box and ELISA will find the relevant items for you."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `find CS2101` - find all items that have CS2101 in their description within that panel"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `find CS2101 CS2103` - find items that contains either CS2101 or CS2103 within their description."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Entering priority mode: `priority`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Feeling stress? Too much task on your task list? Enter priority mode, a mode which will help you narrow down the most pressing task to be done."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "By simply typing `priority` into the command box, you will be given one single task of the highest priority among your task list. This task is chosen by ELISA base on priority and the order in which the task was added to the list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Feeling less stress? You can type `priority` again to bring you out of the priority mode and back into the normal task view. Or even better, finish all your undone task and you will be automatically brought out of priority mode."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Feeling lazy? You can also opt to turn off priority mode at a specific time by typing `priority dd/mm/yyyy hh:mm` and ELISA will turn it off at that specific time for you."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Format: `priority` or `priority dd/mm/yyyy hh:mm`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `priority` - activates or deactivates the priority mode"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `priority 30/10/2019 1200` - activates the priority mode and ask ELISA to turn it off on 30/10/2019 at noon"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* `priority 2.hours.later` - activates the priority mode and ask ELISA to turn it off 2 hours later"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "****"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Note that this command can only be called in the task panel."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* Note that all command such as `edit`, `undo` and `redo` still works in priority mode."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "****"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Expanding an item in the view: `open` \u0026 `close`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Want to see all the details of an item at one glance? Lazy to go to event list or reminder list to find them? We got you!"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "You can now open up an item to see all its details, regardless of what list you are on."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "But remember to close it before opening another item!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `open INDEX`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Example sequence:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show T` - to switch to the task view"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `open 2` - opens the second item on the list"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `close` - closes the item"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `open 3` - opens the third item on the list (Note: If you forgot to close previously, no worries as ELISA will prompt you to!)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `close` - closes the item"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Although, the ESC key can close too, we do not advise doing so as ELISA may be confused later on :("
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA saves the data in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d Additional Notes"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Input"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Currently, an empty input can be entered, but ELISA will show an invalid command."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Currently, it only shows *2 events* on each date due to limited space on the calendar. If there are more events on that date, to find them all, you can go to the event list and sort through it."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Currently, it only shows the *current* month. We are still working to bring the next month to you."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Please keep a full screen. If you resize, we are unable to guarantee the view of the calendar."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blimyj": 15,
      "lrchema": 31,
      "mannggoo": 130,
      "sianghwee": 53,
      "-": 99,
      "Icesiolz": 30
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteItem(index)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveItemStorage(itemStorage, filepath)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "Icesiolz": 2
    }
  },
  {
    "path": "docs/diagrams/ItemClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam arrowColor ITEM_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam classBackgroundColor ITEM_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Commons {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Core {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Item {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Item"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Reminder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class ItemDescription"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "enum Priority {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    HIGH"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    MEDIUM"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    LOW"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u0027/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "blimyj": 54
    }
  },
  {
    "path": "docs/diagrams/PriorityMode.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"p:ScheduledPriorityCommand\" as ScheduledPriorityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"timer:Timer\" as Timer MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":TimerTask\" as Task MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[-\u003e LogicManager : execute(priority 30.min.later)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(priority 30.min.later)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create ScheduledPriorityCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "AddressBookParser -\u003e ScheduledPriorityCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "AddressBookParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "LogicManager -\u003e ScheduledPriorityCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand -\u003e Model : scheduleOffPriorityMode(LocalDateTime)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create Timer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : new Timer()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Timer --\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Timer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Task : new TimerTask()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Task --\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : schedule(TimerTask, LocalDateTime)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand -\u003e Model : togglePriorityMode()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Model: toggleOnPriorityMode()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e ScheduledPriorityCommand: CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand --\u003e LogicManager: CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy ScheduledPriorityCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[\u003c--LogicManager : CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 70
    }
  },
  {
    "path": "docs/diagrams/PriorityMode2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"timer:Timer\" as Timer MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":TimerTask\" as Task MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Timer -\u003e Task : run()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Task -\u003e Model : toggleOffPriorityMode()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : cancel()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy Timer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 21
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class TaskListCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class EventListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class EventListCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ReminderListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ReminderListCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ElisaDialogBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class UserDialogBox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e EventListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e ReminderListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ResultDisplay *-down-\u003e ElisaDialogBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ResultDisplay *-down-\u003e UserDialogBox"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListPanel -down-\u003e TaskListCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListPanel -down-\u003e EventListCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListPanel -down-\u003e ReminderListCard"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListCard ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListCard ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListCard ..\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "Icesiolz": 31
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR #3333C4"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T4 #101086"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "blimyj": 7,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/elisa/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/elisa/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/elisa/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistoryManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.ItemListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonItemStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    protected ItemModel model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    protected ElisaCommandHistory commandHistory;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemListStorage itemListStorage \u003d new JsonItemStorage(userPrefs.getItemStorageFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage \u003d new StorageManager(itemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        commandHistory \u003d new ElisaCommandHistoryManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemModel initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, ElisaCommandHistory stateHistory) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d storage.toModelType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Item Storage\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d new ItemStorage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Item Storage\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d new ItemStorage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new ItemModelManager(initialData, userPrefs, stateHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Bryan Reminder"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logic.shutdown();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 34,
      "mannggoo": 1,
      "sianghwee": 8,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"I have no clue what you just said\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The item index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_ITEM_LISTED_OVERVIEW \u003d \"Here you go, %1$d items listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_UNDO \u003d \"Nothing to undo, buddy.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            + \" Maybe try actually doing something first\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_REDO \u003d \"Why fix your mistakes when you didn\u0027t make any?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_FAST_REMINDER_FORMAT \u003d \"Don\u0027t you remember?\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"It should be in the format of \\\"(Positive Integer).(Time unit).later\\\"\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Eg. \\\"3.hour.later\\\" or \\\"10.min.later\\\"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_NO_PREVIOUS_REMINDER \u003d \"There ain\u0027t no recent reminder to snooze buddy...\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 6,
      "mannggoo": 4,
      "-": 9,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Event in ELISA."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Duration of Event is 0 by default."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Priority of Event is medium by default."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Duration chosen over Period as Events are unlikely to exceed a day."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final boolean isAutoReschedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final AutoReschedulePeriod period;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs an {@code Event}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param startDateTime A valid LocalDateTime object that denotes the start of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param duration A Duration of the event. Defaults to Duration.ZERO if null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this(startDateTime, duration, false, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration, boolean isAutoReschedule)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this(startDateTime, duration, isAutoReschedule, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration, boolean isAutoReschedule,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                 AutoReschedulePeriod period) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.duration \u003d Duration.ZERO;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.endDateTime \u003d startDateTime.plus(this.duration);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.isAutoReschedule \u003d isAutoReschedule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasAutoReschedule() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return isAutoReschedule;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Set auto reschedule to true if the event should recur/auto-reschedule, false otherwise"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param bool true if event can be auto-rescheduled"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event object with the updated parameters"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event setAutoReschedule(boolean bool) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), getDuration(), bool);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get the reschedule period of this event"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedule period of this event"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AutoReschedulePeriod getPeriod() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Set the reschedule period of this event. This would also set isAutoReschedule of this event to true."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period to set to this event"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event object with the updated parameters"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event setReschedulePeriod(AutoReschedulePeriod period) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), getDuration(), true, period);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event changeStartDateTime(LocalDateTime newStartDateTime) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(newStartDateTime, getDuration(), this.isAutoReschedule, this.period);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event changeDuration(Duration newDuration) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), newDuration, this.isAutoReschedule, this.period);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nStart DateTime: \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getStartDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(\"\\nEnd DateTime: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getEndDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Removed duration portion of string as requested in team meeting."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Creates a string for UI display."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return A string containing only the start DateTime of the Event."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toDisplay() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nDateTime: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getStartDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherEvent.getDuration().equals(getDuration());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(startDateTime, endDateTime, duration);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an event object from a JSON string."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the event"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the event object that is created"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Event fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String startDateTimeString \u003d node.get(\"startDateTime\").asText();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime.parse(startDateTimeString);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String durationString \u003d node.get(\"duration\").asText();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Duration duration \u003d Duration.parse(durationString);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String periodString \u003d node.get(\"period\").toString(); // in the format of {\"period\": 60000}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!periodString.isEmpty() \u0026\u0026 !periodString.equals(\"null\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            periodString \u003d node.get(\"period\").get(\"period\").asText(); // get the long value"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Long periodMillis \u003d Long.valueOf(periodString);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AutoReschedulePeriod period \u003d new AutoReschedulePeriod(periodMillis);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new Event(startDateTime, duration, true, period);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Event(startDateTime, duration);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 102,
      "lrchema": 4,
      "sianghwee": 24,
      "mannggoo": 54
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item in Elisa."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: ItemDescription is present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * At least one of the following three fields (Task, Event, Reminder) is present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Reminder reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final ItemDescription itemDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param priority A Priority of the event. Defaults to Priority.MEDIUM if null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item(Task task, Event event, Reminder reminder,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                 ItemDescription itemDescription, Set\u003cTag\u003e tags, Priority priority) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(itemDescription);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.itemDescription \u003d itemDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (priority !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasTask() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return task !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasEvent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return event !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasReminder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return reminder !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cTask\u003e getTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.task \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cEvent\u003e getEvent() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.event \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.reminder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ItemDescription getItemDescription() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return itemDescription;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change ItemDescription"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeItemDescription(ItemDescription newItemDescription) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(newItemDescription)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Task referenced"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeTask(Task newTask) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(newTask)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Event referenced"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeEvent(Event newEvent) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(newEvent)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Reminder referenced"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeReminder(Reminder newReminder) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(newReminder)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Tags referenced"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeTags(HashSet\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(newTags)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the priority of the item."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newPriority the new priority for the item."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return new Item with the new priority."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changePriority(Priority newPriority) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(newPriority)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same task referenced."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameTask(Item otherItem) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getTask().equals(otherItem.getTask());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same Event referenced."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameEvent(Item otherItem) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getEvent().equals(otherItem.getEvent());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same Reminder referenced."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameReminder(Item otherItem) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getReminder().equals(otherItem.getReminder());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same identity and data fields."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherItem.getTask().equals(getTask())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getReminder().equals(getReminder())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getEvent().equals(getEvent())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getItemDescription().equals(getItemDescription())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getPriority().equals(getPriority());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(task, event, reminder, itemDescription, tags, priority);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(itemDescription.toString());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getTask().isPresent()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nTask Details: \")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getTask().get().toString());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getEvent().isPresent()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nEvent Details: \")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getEvent().get().toString());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getReminder().isPresent()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nReminder Details: \")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getReminder().get().toString());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (tags.size() \u003e 0) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nTags: \");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getReminderMessage() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(itemDescription.toString())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(\"\\nReminder! \")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getReminder().get().toString());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nPriority: \")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(priority.toString());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Checks the event in the item to see if it is auto reschedulable."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Requirements: item definitely has an event."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return true if it is auto reschedule, false otherwise."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasAutoReschedule() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (getEvent().isPresent()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return getEvent().get().hasAutoReschedule();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Builder class for Item."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static class ItemBuilder {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // Identity fields"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Task task \u003d null;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Event event \u003d null;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // Data fields"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private ItemDescription itemDescription \u003d null;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Priority priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder() {}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setTask(Task task) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setEvent(Event event) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setItemDescription(ItemDescription descriptor) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            requireNonNull(descriptor);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.itemDescription \u003d descriptor;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Consider using a defensive copy of tags, similar to EditCommand in AB3"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            requireNonNull(tags);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setItemPriority(Priority priority) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        /**Validates arguments of Item before initialising it"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         * @return A valid Item."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         * @throws IllegalArgumentException If description not provided or task, event and reminder fields are null."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public Item build() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            Item newItem \u003d new Item(task, event, reminder, itemDescription, tags, priority);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Validation of parameters of object after object has been created."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Validate after object has been created as per StackOverflow link"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //https://stackoverflow.com/questions/38173274/builder-pattern-validation-effective-java"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //However this seems to be contrary to the answer in the following link"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //https://stackoverflow.com/questions/12930852/clearing-doubts-about-the-builder-pattern"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //However it seems safer to follow the first as the object fields could be mutated after it has been copied"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // from the builder to the object."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (newItem.getItemDescription() \u003d\u003d null) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new IllegalArgumentException(\"Description must be provided!\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (newItem.getTask().isEmpty() \u0026\u0026 newItem.getEvent().isEmpty() \u0026\u0026 newItem.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new IllegalArgumentException(\"Task, Event \u0026 Reminder cannot all be empty!\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Resetting all constructing parameters back to null, so a new object doesn\u0027t use the parameters of the"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // previous object."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            task \u003d null;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            event \u003d null;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            reminder \u003d null;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemDescription \u003d null;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return newItem;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the item object into a json string."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return string representation of the item"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws JsonProcessingException when the item cannot be converted into a JSON string"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toJson() throws JsonProcessingException {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return JsonUtil.toJsonString(this);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an item object from a JSON string."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the item"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item object that is created"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Item fromJson(String jsonString) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemBuilder temp \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String itemDescriptionString \u003d node.get(\"itemDescription\").toString();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemDescription id \u003d ItemDescription.fromJson(itemDescriptionString);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        temp.setItemDescription(id);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String priorityString \u003d node.get(\"priority\").asText();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Priority newPriority \u003d Priority.fromJson(priorityString);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        temp.setItemPriority(newPriority);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"task\")) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String taskString \u003d node.get(\"task\").toString();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task t \u003d Task.fromJson(taskString);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setTask(t);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"event\")) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String eventString \u003d node.get(\"event\").toString();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Event e \u003d Event.fromJson(eventString);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setEvent(e);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"reminder\")) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String reminderString \u003d node.get(\"reminder\").toString();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Reminder r \u003d Reminder.fromJson(reminderString);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setReminder(r);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Set\u003cTag\u003e tagsSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode tags \u003d node.get(\"tags\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Iterator\u003cJsonNode\u003e it \u003d tags.elements();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            tagsSet.add(new Tag(it.next().get(\"tagName\").asText()));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return temp.setTags(tagsSet).build();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deepCopy() throws IOException {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return Item.fromJson(this.toJson());"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 368,
      "lrchema": 3,
      "sianghwee": 63,
      "mannggoo": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/ItemDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s description in ELISA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidItemDescription(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ItemDescription {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \"ItemDescription should only contain characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs an {@code ItemDescription}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param description A valid item description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ItemDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checkArgument(isValidItemDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if a given string is a valid item description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static boolean isValidItemDescription(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                || (other instanceof ItemDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 getDescription().equals(((ItemDescription) other).getDescription())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an item description object from a JSON string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the item description"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item description object that is created"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemDescription fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new ItemDescription(node.get(\"description\").asText());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 54,
      "lrchema": 3,
      "sianghwee": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/ItemReminderDateTimeComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * A comparator to compare the datetime between the Reminders of two Items."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ItemReminderDateTimeComparator implements Comparator\u003cItem\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int compare(Item firstItem, Item secondItem) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        int comparisonResult \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (firstItem.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            comparisonResult \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else if (secondItem.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            comparisonResult \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            comparisonResult \u003d firstItem.getReminder().get().getOccurrenceDateTime().compareTo("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    secondItem.getReminder().get().getOccurrenceDateTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return comparisonResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 22
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Available priority levels for tasks and events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    HIGH, MEDIUM, LOW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Creates a Priority object from a string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param priorityString the string that represents the Priority"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return the Priority object that is created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static Priority fromJson(String priorityString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return valueOf(priorityString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 15,
      "lrchema": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Reminder in ELISA."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime defaultDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime occurrenceDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Reminder}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param defaultDateTime A valid LocalDateTime object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder(LocalDateTime defaultDateTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(defaultDateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.defaultDateTime \u003d defaultDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        occurrenceDateTime \u003d defaultDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Reminder}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param defaultDateTime A valid LocalDateTime object that stores the original DateTime is intended to occur."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param occurrenceDateTime A valid LocalDateTime object for the reminder to occur."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Reminder(LocalDateTime defaultDateTime, LocalDateTime occurrenceDateTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireAllNonNull(defaultDateTime, occurrenceDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.defaultDateTime \u003d defaultDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.occurrenceDateTime \u003d occurrenceDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getDefaultDateTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return defaultDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getOccurrenceDateTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return occurrenceDateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the dateTime that the reminder occurs. Removes the previous reminder so it does not occur."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param dateTime A LocalDateTime object which dictates the dateTime the reminder occurs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return A new Reminder with the new dateTime for the reminder."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder changeOccurrenceDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //When Reminder is implemented, the previous reminder notification should also be removed here"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Reminder(defaultDateTime, dateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the default dateTime of the reminder."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param dateTime A LocalDateTime object which dictates the default dateTime of the Reminder."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return A new Reminder with the new default dateTime for the reminder."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder changeDefaultDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Reminder(dateTime, dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (defaultDateTime.isEqual(occurrenceDateTime)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nReminder DateTime: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getDefaultDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nOriginal Reminder DateTime: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getDefaultDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nReminder DateTime: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getOccurrenceDateTime().format(DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherReminder.getDefaultDateTime().equals(getDefaultDateTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Possibility of high number of hash collisions and as a result slower performance"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(defaultDateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a reminder object from a JSON string."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the reminder"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the reminder object that is created"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Reminder fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String defaultDateTimeString \u003d node.get(\"defaultDateTime\").asText();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(defaultDateTimeString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String occurrenceDateTimeString \u003d node.get(\"occurrenceDateTime\").asText();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime occurenceDateTime \u003d LocalDateTime.parse(occurrenceDateTimeString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Reminder(dateTime, occurenceDateTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 111,
      "lrchema": 2,
      "sianghwee": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Task in ELISA."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Completion state of Event is false by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Priority of Event is medium by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Boolean complete;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param complete Denotes whether the task has been completed or not. Defaults to false if null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task(Boolean complete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (complete !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.complete \u003d complete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.complete \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Boolean isComplete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return complete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task markIncomplete() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nCompleted: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(isComplete().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Problematic as the details of the task might be the same while the Item/actual task being referred to is not the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //same due to description"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherTask.isComplete().equals(isComplete());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //hashCode is problematic as I believe that there are only 3*2 permutations of priority and Boolean"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Possibility of high number of hash collisions and as a result slower performance"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(complete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a task object from a JSON string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the task object that is created"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Task fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final Priority p;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final boolean complete;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        complete \u003d node.get(\"complete\").asBoolean();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(complete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 73,
      "lrchema": 3,
      "sianghwee": 19
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/core/item/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.core.item.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/exceptions/DuplicateItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "sianghwee": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return objectMapper;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/elisa/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/CheckTaskRunnable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.FutureRemindersList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * A runnable that checks if the nearest reminder in futureReminders has a datetime that exceeds now."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class CheckTaskRunnable implements Runnable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CheckTaskRunnable.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ArrayList\u003cItem\u003e activeReminders;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private FutureRemindersList futureReminders;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public CheckTaskRunnable(ItemModel model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        futureReminders \u003d model.getFutureRemindersList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        while (futureReminders.size() \u003e 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 futureReminders.get(0).getReminder().get().getOccurrenceDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            futureReminders.remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ArrayList\u003cItem\u003e(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        reminder \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Method that checks if the nearest reminder in futureReminders has a datetime that exceeds current datetime.."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logger.info(\"----------------[LOGIC MANAGER][\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                + \"Checking for pending reminders\" + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (futureReminders.size() \u003e 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            reminder \u003d futureReminders.get(0).getReminder().get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            while (reminder !\u003d null \u0026\u0026 reminder.getOccurrenceDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                logger.info(\"----------------[LOGIC MANAGER][\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        + \"Transferring reminder from futureReminders to activeReminders\" + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                item \u003d futureReminders.remove(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                activeReminders.add(item);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                if (futureReminders.size() \u003e 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    reminder \u003d futureReminders.get(0).getReminder().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    reminder \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            model.getActiveReminderListProperty().addReminders(activeReminders);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 63
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.PriorityExitStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * @see seedu.elisa.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage getItemStorage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    VisualizeList getVisualList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    ItemModel getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    void shutdown();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    ListPropertyBase\u003cItem\u003e getActiveRemindersListProperty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    SimpleBooleanProperty getPriorityMode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    boolean isSystemToggle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    PriorityExitStatus getExitStatus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 5,
      "lrchema": 13,
      "sianghwee": 10,
      "mannggoo": 5,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.concurrent.ScheduledThreadPoolExecutor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.ElisaParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.PriorityExitStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final ItemModel model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private final ElisaParser addressBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final ScheduledThreadPoolExecutor checker;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final AutoRescheduleManager autoRescheduleManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public LogicManager(ItemModel model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        addressBookParser \u003d new ElisaParser(model.getElisaCommandHistory());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager \u003d AutoRescheduleManager.getInstance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager.initStorageEvents(model.getEventList(), model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Runnable checkTask \u003d new CheckTaskRunnable(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker \u003d new ScheduledThreadPoolExecutor(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker.scheduleAtFixedRate(checkTask, 0, 5, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final ListPropertyBase\u003cItem\u003e getActiveRemindersListProperty() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return model.getActiveReminderListProperty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Shutdown threads for Reminders, PriorityMode and AutoRescheduleManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final void shutdown() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker.shutdown();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager.shutdown();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.offPriorityMode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Logging"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            storage.saveItemStorage(model.getItemStorage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.updateCommandHistory(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage getItemStorage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getItemStorage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return model.getVisualList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemModel getModel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getItemStorageFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SimpleBooleanProperty getPriorityMode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getPriorityMode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isSystemToggle() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.isSystemToggle();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityExitStatus getExitStatus() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getExitStatus();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 16,
      "lrchema": 24,
      "sianghwee": 24,
      "mannggoo": 10,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.RescheduleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Add an Item to the item list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public abstract class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final AutoRescheduleManager AUTO_RESCHEDULE_MANAGER \u003d AutoRescheduleManager.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Task to the Task List. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"description \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_DATETIME + \"Deadline \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_REMINDER + \"Reminder \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_PRIORITY + \"Priority \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_TAG + \"Tag \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Item added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    protected final Item toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand(Item item) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        toAdd \u003d item;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public abstract CommandResult execute(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.deleteItem(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (toAdd.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Event event \u003d toAdd.getEvent().get(); // if autoReschedule is present, item definitely has an event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask.removeFromAllTasks(toAdd.getEvent().get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lrchema": 14,
      "mannggoo": 27,
      "sianghwee": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.FocusModeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.RescheduleTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds an Event to the item model."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_EVENT_VIEW \u003d \"E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Oh great, new Event added: %1$s \\nDon\u0027t forget about it!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddEventCommand(Item item) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (model.isFocusMode()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new FocusModeException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Check if item already exists, else, add it to the model."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.addItem(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (toAdd.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Event event \u003d toAdd.getEvent().get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask task \u003d new RescheduleTask(toAdd, event.getPeriod(), model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AUTO_RESCHEDULE_MANAGER.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Notify Ui to change the view the that of the newly added item."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(SHOW_EVENT_VIEW);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 16,
      "mannggoo": 41,
      "sianghwee": 4,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.FocusModeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds a Reminder to the item model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddReminderCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_REMINDER_VIEW \u003d \"R\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fine, I\u0027ll remind you. New Reminder added: %1$s\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            + \"\\nIt\u0027s like you need a keeper\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddReminderCommand(Item item) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (model.isFocusMode()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new FocusModeException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Check if item already exists, else, add it to the model."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.addItem(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Notify Ui to change the view the that of the newly added item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(SHOW_REMINDER_VIEW);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 15,
      "mannggoo": 36,
      "sianghwee": 4,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds a Task to the item model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_TASK_VIEW \u003d \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\\nDon\u0027t just watch it pile up!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddTaskCommand(Item item) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Check if item already exists, else, add it to the model."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.addItem(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Notify Ui to change the view the that of the newly added item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(SHOW_TASK_VIEW);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 14,
      "mannggoo": 36,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item list has been cleared! (About time, isn\u0027t it?)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemStorage beforeClear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeClear \u003d model.getItemStorage().deepCopy();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setItemStorage(beforeClear);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        model.repopulateLists();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 22,
      "mannggoo": 1,
      "sianghwee": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/CloseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates a command to close the expanded view of an item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class CloseCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"close\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"I\u0027ve closed it\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"There\u0027s nothing to close\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Carries out the operations of this close command on the given model."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the result of executing this command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CloseCommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CloseCommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 24
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/CloseCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates the command result of CloseCommand."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class CloseCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CloseCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public abstract CommandResult execute(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String pane \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String theme \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.theme;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 7,
      "-": 65,
      "Icesiolz": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemIndexWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.RescheduleTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Finally! Deleted Item: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemIndexWrapper deleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        deleted \u003d model.getIndices(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item itemDeleted \u003d model.deleteItem(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemDeleted.hasAutoReschedule()) { // also ensures that itemDeleted has an Event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask.removeFromAllTasks(itemDeleted.getEvent().get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, itemDeleted));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.addItem(deleted);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if deleted item is autoReschedulable, add item back to thread with an updated DateTime."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (deleted.getItem().hasAutoReschedule()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Item item \u003d deleted.getItem();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AutoRescheduleManager.updateEvent(item, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 26,
      "mannggoo": 18,
      "sianghwee": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Mark a task as done using it\u0027s index in ELISA."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class DoneCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \": Mark the item identified by the index number used in the displayed item list as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Can only be used on task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_COMPLETE_ITEM_SUCCESS \u003d \"Finally! Completed Item: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item itemDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            oldItem \u003d model.getItem(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemDone \u003d model.markComplete(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            if (!isExecuted()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                setExecuted(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COMPLETE_ITEM_SUCCESS, itemDone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(\"Done can only be done on the task list.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.replaceItem(itemDone, oldItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lrchema": 23,
      "sianghwee": 52
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DownCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command for scrolling down."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class DownCommand extends ScrollCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"down\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scrolling down...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"down L / down R\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public DownCommand(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (pane.equals(\"Illegal\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new DownCommandResult(MESSAGE_SUCCESS, pane);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 27
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/DownCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to identify when a command result is a down command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class DownCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public DownCommandResult(String feedbackToUser, String pane) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.pane \u003d pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 17
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Edits the details of an existing item in the item list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item in the shown list \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \" DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_REMINDER + \"REMINDER] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DRINK WATER \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + PREFIX_PRIORITY + \"HIGH\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Item: %1$s,\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            + \" because someone couldn\u0027t make up their mind\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the item list.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final EditItemDescriptor editItemDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item editedItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index              of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param editItemDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditCommand(Index index, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(editItemDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item oldItem \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.oldItem \u003d oldItem; //Is this line of code necessary?"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item editedItem \u003d createEditedItem(oldItem, editItemDescriptor, lastShownList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.editedItem \u003d editedItem; //Is this line of code necessary?"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(editedItem)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(\"Edit failed! Don\u0027t you remember that this item already exists?\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model.editItem(oldItem, editedItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.editItem(editedItem, oldItem);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Create a new Item with the new edited details."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param itemToEdit         old item to edit"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param editItemDescriptor details to edit the item with"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param lastShownList      the last list shown to the user, set by the model"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Item with the edited details"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws CommandException representing failure to create new edited item"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static Item createEditedItem(Item itemToEdit, EditItemDescriptor editItemDescriptor,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                         VisualizeList lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription updatedDescription \u003d editItemDescriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getDescription()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit.getItemDescription());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cTask\u003e updatedTask \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getTask()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getTask()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cEvent\u003e updatedEvent \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getEvent()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getEvent()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e updatedReminder \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getReminder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getReminder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editItemDescriptor.getTags().orElse(itemToEdit.getTags());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority updatedPriority \u003d editItemDescriptor.getPriority().orElse(itemToEdit.getPriority());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(updatedDescription);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(updatedTags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemPriority(updatedPriority);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedTask.isPresent()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setTask(updatedTask.get());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedEvent.isPresent()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(updatedEvent.get());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedReminder.isPresent()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(updatedReminder.get());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteTask()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setTask(null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteEvent()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteReminder()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item updatedItem;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            updatedItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return updatedItem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Create a new EditItemDescriptor that edits the details of an item."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static class EditItemDescriptor {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private ItemDescription description;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Task task;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Event event;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Reminder reminder;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteTask \u003d false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteEvent \u003d false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteReminder \u003d false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        public EditItemDescriptor() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setTask(toCopy.task);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setEvent(toCopy.event);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setReminder(toCopy.reminder);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteTask(toCopy.hasDeleteTask);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteEvent(toCopy.hasDeleteEvent);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteReminder(toCopy.hasDeleteReminder);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, task, event, reminder, priority, tags);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setDescription(ItemDescription description) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cItemDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setTask(Task task) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cTask\u003e getTask() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(task);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setEvent(Event event) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cEvent\u003e getEvent() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(event);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean hasAnyDelete() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return (hasDeleteEvent || hasDeleteReminder || hasDeleteTask);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteTask(boolean bool) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteTask \u003d bool;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteTask() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteTask;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteEvent(boolean bool) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteEvent \u003d bool;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteEvent() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteEvent;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteReminder(boolean bool) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteReminder \u003d bool;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteReminder() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteReminder;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "lrchema": 39,
      "mannggoo": 159,
      "sianghwee": 3,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"ELISee you again!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class FindCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final String[] searchString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeFilter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FindCommand(String[] searchString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeFilter \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.findItem(searchString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                String.format(Messages.MESSAGE_ITEM_LISTED_OVERVIEW, model.getVisualList().size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeFilter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 searchString.equals(((FindCommand) other).searchString)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 23,
      "sianghwee": 9,
      "mannggoo": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/JokeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * This commands asks Elisa to give user a joke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class JokeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"joke\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new CommandResult(model.getJoke());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 19
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/OpenCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates an open command to expand the view of an item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"opening up item %d\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Opens up the desired item to view more details.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: INDEX (Must be a positive integer within the current list) \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private VisualizeList beforeOpen;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenCommand(Index index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Executes this command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the command result of executing this command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws CommandException if the index given is invalid"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        beforeOpen \u003d model.getVisualList().deepCopy(); // for undo. Undo action is technically close."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList(); //shallow copy just to get item"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item toOpen \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new OpenCommandResult(String.format(MESSAGE_SUCCESS, index.getOneBased()), toOpen);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 50
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/OpenCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Creates a command result for open the view of a given item."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenCommandResult(String feedbackToUser, Item item) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 20
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/PriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Toggle the state of ELISA between priority and non-priority mode."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class PriorityCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"priority\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Activates the priority mode of this application.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"It can be activated indefinitely by using \\\"priority\\\" or \\\"priority 10.min.later\\\"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Include the flag -f or -focus to enter a more focus mode i.e. \\\"priority -f\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String FINISHED_ALL_TASKS \u003d \"Congrats! You have finished all your tasks.\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \" Taking you out of priority mode now.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String TIME_OUT \u003d \"Oops, guess you are out of time. Hope you have done enough!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String PRIORITY_MODE_OFF \u003d \"Priority mode deactivated! Not so stressed anymore, are you?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private static final String PRIORITY_MODE_ON \u003d \"Priority mode activated, just manage this one task, that\u0027ll do.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String FOCUS_MODE_ON \u003d \"Let\u0027s focus on this one task!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String NO_TASK_TO_DO \u003d \"You have no incomplete task. Go out and enjoy the sun.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String PRIORITY_MODE_ERROR \u003d \"Priority mode can only be activated on task pane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean focusMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityCommand(boolean focusMode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.focusMode \u003d focusMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            boolean status \u003d model.togglePriorityMode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (focusMode \u0026\u0026 status) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                model.toggleOnFocusMode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(status ? (focusMode ? FOCUS_MODE_ON : PRIORITY_MODE_ON)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    : (model.getExitStatus() \u003d\u003d null ? PRIORITY_MODE_OFF : NO_TASK_TO_DO));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(PRIORITY_MODE_ERROR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.togglePriorityMode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 25,
      "sianghwee": 37
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Class for redoing a previously undone command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public RedoCommand(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (elisaCommandHistory.sizeRedo() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTHING_TO_REDO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            UndoableCommand lastDone \u003d elisaCommandHistory.popRedo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            lastDone.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new CommandResult(\"Redo [\" + lastDone.getCommandWord() + \"] command successful!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 32
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ScheduledPriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Create a priority command that will turn off after a certain time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ScheduledPriorityCommand extends PriorityCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"priority\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private LocalDateTime ldt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Constructor to create the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ldt the time at which the priority mode will end."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ScheduledPriorityCommand(LocalDateTime ldt, boolean focusMode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(focusMode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ZonedDateTime zdt \u003d ldt.atZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.ldt \u003d ldt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.scheduleOffPriorityMode(ldt);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ScrollCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Abstract class for scrolling."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public abstract class ScrollCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String pane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ScrollCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(input.trim()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"L\":"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.pane \u003d \"resultDisplay\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"R\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.pane \u003d \"tabPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.pane \u003d \"Illegal\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(\"Scrolling\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "Icesiolz": 28
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.FocusModeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Switches the current view to the desired view."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ShowCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TASK_VIEW_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_VIEW_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_VIEW_COMMAND \u003d \"R\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String CALENDAR_VIEW_COMMAND \u003d \"C\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Shows the desired view.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: KEYWORD (T,E,R,C)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" E\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched view to %1$s, because somebody couldn\u0027t use the mouse\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final String targetView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final String targetList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeSwitch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public ShowCommand(String unprocessedView) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String targetView \u003d unprocessedView.toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.targetView \u003d targetView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(targetView) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case TASK_VIEW_COMMAND:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d TASK_VIEW_COMMAND; //\"TASK\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case EVENT_VIEW_COMMAND:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d EVENT_VIEW_COMMAND; //\"EVENT\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case CALENDAR_VIEW_COMMAND:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.targetList \u003d CALENDAR_VIEW_COMMAND; //\"CALENDAR\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case REMINDER_VIEW_COMMAND:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d REMINDER_VIEW_COMMAND; //\"REMINDER\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (model.isFocusMode()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new FocusModeException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeSwitch \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(targetList); // should be T/E/R"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(\"Show command format is incorrect. It should be \\\"show T\\\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetView));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeSwitch);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 20,
      "sianghwee": 6,
      "mannggoo": 23,
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_SNOOZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Edits the details of an existing item in the item list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class SnoozeCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"snooze\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Snoozes the reminder \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"by the index number used in the reminder list \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"or the most recent occurred reminder if no index is provided.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"Parameters: [INDEX] (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"[\" + PREFIX_SNOOZE + \"SNOOZE TIME]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + PREFIX_SNOOZE + \"1.min.later\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_SNOOZED_REMINDER_SUCCESS \u003d \"Snoozed Reminder: %1$s,\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            + \" because someone is real lazy...\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private static final String SHOW_REMINDER_VIEW \u003d \"R\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final boolean hasIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime newReminderOccurrence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item snoozedItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param hasIndex              boolean that indicates if an index was specified."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param index                 of the item to edit."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newReminderOccurrence LocalDateTime of new occurrence of reminder."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *                              \u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param index                 of the item to edit."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newReminderOccurrence LocalDateTime of new occurrence of reminder"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *                              \u003e\u003e\u003e\u003e\u003e\u003e\u003e Halfway adding SnoozeCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *                              \u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param hasIndex              boolean that indicates if an index was specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param index                 of the item to edit."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newReminderOccurrence LocalDateTime of new occurrence of reminder."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *                              \u003e\u003e\u003e\u003e\u003e\u003e\u003e Add snooze command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *                              \u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param hasIndex              boolean that indicates if an index was specified."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param index                 of the item to edit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newReminderOccurrence LocalDateTime of new occurrence of reminder."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *                              \u003e\u003e\u003e\u003e\u003e\u003e\u003e 77beef877620bb25d68066b2550360272c1e9c07"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public SnoozeCommand(boolean hasIndex, Index index, LocalDateTime newReminderOccurrence) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireAllNonNull(hasIndex, newReminderOccurrence);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.hasIndex \u003d hasIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.newReminderOccurrence \u003d newReminderOccurrence;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            model.setVisualList(SHOW_REMINDER_VIEW);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (hasIndex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            oldItem \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            snoozedItem \u003d oldItem.changeReminder("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    oldItem.getReminder().get().changeOccurrenceDateTime(newReminderOccurrence));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                oldItem \u003d model.getLatestOccurredReminder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_PREVIOUS_REMINDER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            snoozedItem \u003d oldItem.changeReminder("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    oldItem.getReminder().get().changeOccurrenceDateTime(newReminderOccurrence));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        model.replaceItem(oldItem, snoozedItem);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SNOOZED_REMINDER_SUCCESS, snoozedItem));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        model.replaceItem(snoozedItem, oldItem);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 108,
      "lrchema": 14
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Sort the current list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class SortCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s has been sorted!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeSort;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Optional\u003cComparator\u003cItem\u003e\u003e comparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SortCommand(Optional\u003cComparator\u003cItem\u003e\u003e comparator) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeSort \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (comparator.isPresent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            model.sort(comparator.get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            model.sort();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!isExecuted()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.getElisaCommandHistory().clearRedo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            setExecuted(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, beforeSort.getClass().getSimpleName()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeSort);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 22,
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ThemeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Changes the theme."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ThemeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"theme\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Oh dumb dumb, choose only \u0027theme white\u0027 or \u0027theme black\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Oh you don\u0027t like the color? Lets switch it up!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String theme;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ThemeCommand(String theme) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(theme.trim()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"white\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"black\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new ThemeCommandResult(MESSAGE_SUCCESS, theme);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/ThemeCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class identifies when a command is a theme command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ThemeCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String theme;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ThemeCommandResult(String feedbackToUser, String theme) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getTheme() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.theme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 18
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Undoes last entered command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoCommand(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (elisaCommandHistory.sizeUndo() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            UndoableCommand lastDone \u003d elisaCommandHistory.popUndo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            lastDone.reverse(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new CommandResult(\"Undo [\" + lastDone.getCommandWord() + \"] command successful!\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                    + \" Try to do it right this time..\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 31,
      "mannggoo": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UndoableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Superclass of all commands that can be undone"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private boolean isExecuted \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public abstract void reverse(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public abstract String getCommandWord();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public boolean isExecuted() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return isExecuted;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setExecuted(boolean executed) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        isExecuted \u003d executed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 22
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command for scrolling up."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class UpCommand extends ScrollCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"up\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scrolling up...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"up L / up R\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public UpCommand(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (pane.equals(\"Illegal\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new UpCommandResult(MESSAGE_SUCCESS, pane);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 27
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/UpCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to identify when a command result is an up command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class UpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public UpCommandResult(String feedbackToUser, String pane) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.pane \u003d pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 17
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/commands/exceptions/FocusModeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Exception that is thrown when attempting to run some operation when in focus mode."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class FocusModeException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FocusModeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(\"Hey, stay focus on your task!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 10
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/AddEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_AUTO_RESCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        PREFIX_TAG, PREFIX_AUTO_RESCHEDULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Event must have a deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT)); // AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Event must be present."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e itemReminder \u003d ParserUtil.parseReminder("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.getValue(PREFIX_REMINDER).orElse(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d ParserUtil.parsePriority("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.getValue(PREFIX_PRIORITY).orElse(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Optional\u003cAutoReschedulePeriod\u003e reschedulePeriod \u003d ParserUtil.parseReschedule("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    argMultimap.getValue(PREFIX_AUTO_RESCHEDULE).orElse(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (reschedulePeriod.isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                event \u003d event.setAutoReschedule(true).setReschedulePeriod(reschedulePeriod.get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            System.out.println(\"Issue with parsing -auto \" + e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemBuilder.setItemPriority(priority.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setEvent(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemReminder.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(itemReminder.get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddEventCommand(newItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 17,
      "mannggoo": 82
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/AddReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddReminderCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddReminderCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Reminder must be present."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Reminder must be present."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder itemReminder \u003d ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).get()).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setReminder(itemReminder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddReminderCommand(newItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 13,
      "mannggoo": 58
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " *  Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cEvent\u003e dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).orElse(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e itemReminder \u003d ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).orElse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Task task \u003d new Task(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemBuilder.setItemPriority(priority.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (dateTime.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(dateTime.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemReminder.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(itemReminder.get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddTaskCommand(newItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 15,
      "mannggoo": 49
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix + \" \", fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (argPrefix.equals(CliSyntax.PREFIX_DELETE_TASK)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    || argPrefix.equals(CliSyntax.PREFIX_DELETE_EVENT)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    || argPrefix.equals(CliSyntax.PREFIX_DELETE_REMINDER)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.put(argPrefix, \"Dummy Value\"); // so that .isPresent() would return true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 8,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*ELISA prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_REMINDER \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final Prefix PREFIX_SNOOZE \u003d new Prefix(\"-s\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"-p\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"-desc\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_EVENT \u003d new Prefix(\"--e\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_TASK \u003d new Prefix(\"--tk\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_REMINDER \u003d new Prefix(\"--r\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_AUTO_RESCHEDULE \u003d new Prefix(\"-auto\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 1,
      "mannggoo": 10,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents a Parser that is able to parse DateTime input into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public interface DateTimeParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses {@code stringDateTime} into a LocalDateTime and returns it"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the given string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    LocalDateTime parseDateTime(String stringDateTime) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DefinedDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse string date time using a formatter dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class DefinedDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the string using the given format and returns a LocalDateTime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the format \"dd/MM/yyyy HHmm\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            String[] splitTime \u003d stringDateTime.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalDate processedDate \u003d LocalDate.parse(splitTime[0], dateFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalTime processedTime \u003d LocalTime.parse(splitTime[1], timeFormatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalDateTime processedDateTime \u003d LocalDateTime.of(processedDate, processedTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return processedDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \" Should be \\\"25/09/2019 2300\\\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public DeleteCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // flags should be empty in this case, focus on args only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "mannggoo": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DoneCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // flags should be empty in this case, focus on args only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "sianghwee": 25
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DELETE_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DELETE_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DELETE_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code description} and {@code args} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditCommand parse(String description, String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processArgs \u003d args + \" \"; // account for the possibility that --tk or --r or --e is given with no space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            argMultiMap \u003d ArgumentTokenizer.tokenize(processArgs, PREFIX_DESCRIPTION, PREFIX_DATETIME, PREFIX_REMINDER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    PREFIX_PRIORITY, PREFIX_TAG, PREFIX_DELETE_TASK, PREFIX_DELETE_REMINDER, PREFIX_DELETE_EVENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            logger.info(\"Failure to tokenize arguments: EditCommand\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Edit command format is incorrect.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        EditItemDescriptor editItemDescriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setDescription("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseDescription("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setEvent("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseDateTime("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_DATETIME).get()).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setReminder("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseReminder("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_REMINDER).get()).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setPriority("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parsePriority("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_PRIORITY).get()).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        parseTagsForEdit(argMultiMap.getAllValues(PREFIX_TAG)).ifPresent(editItemDescriptor::setTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if delete tag is present, even if edits are made above, relevant subitems should still be deleted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_TASK).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteTask(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteReminder(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_EVENT).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteEvent(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if ((!editItemDescriptor.isAnyFieldEdited()) \u0026\u0026 (!editItemDescriptor.hasAnyDelete())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new EditCommand(index, editItemDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 16,
      "mannggoo": 48,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ElisaParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DownCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.JokeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.PriorityCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ElisaParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003cdescription\u003e[^-]*)(?\u003cflags\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaParser(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String description \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String flags \u003d \" \" + matcher.group(\"flags\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddTaskCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddEventCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddReminderCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new EditCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new DeleteCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new FindCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new UndoCommand(elisaCommandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new RedoCommand(elisaCommandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new ShowCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new SortCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PriorityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new PriorityCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new DoneCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case JokeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new JokeCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case ThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new ThemeCommand(description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case UpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new UpCommand(description);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case DownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new DownCommand(description);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new OpenCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case CloseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new CloseCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        case SnoozeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return new SnoozeCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "lrchema": 35,
      "mannggoo": 25,
      "sianghwee": 13,
      "-": 44,
      "Icesiolz": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/FastReminderDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_FAST_REMINDER_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse stringDateTime in fast reminder format (ie 10.min.later) to a LocalDateTime object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class FastReminderDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String DAY_INDICATOR \u003d \"DAY\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String HOUR_INDICATOR \u003d \"HOUR\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String MIN_INDICATOR \u003d \"MIN\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Pattern BASIC_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Pattern.compile(\"(?\u003cquantity\u003e[1-9]\\\\d*)(\\\\.)(?\u003cunit\u003eMIN|HOUR|DAY)(\\\\.LATER)$\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse this stringDateTime into a LocalDateTime representation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the stringDateTime"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of stringDateTime is incorrect"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //stringDateTime should be of format \"10.min.later\" or \"3.hour.later\" or \"2.day.later\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processedString \u003d stringDateTime.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final Matcher matcher \u003d BASIC_INPUT_FORMAT.matcher(processedString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FAST_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String quantity \u003d matcher.group(\"quantity\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String unit \u003d matcher.group(\"unit\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final long longQuantity \u003d Long.valueOf(quantity).longValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime current \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime processedDateTime \u003d LocalDateTime.now(); // just to initialize"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            switch (unit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case DAY_INDICATOR:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusDays(longQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case HOUR_INDICATOR:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusHours(longQuantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case MIN_INDICATOR:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusMinutes(longQuantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // nothing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return processedDateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 63
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public FindCommand parse(String keywords, String empty) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String trimmedArgs \u003d keywords.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] keywordArray \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new FindCommand(keywordArray);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "mannggoo": 2,
      "sianghwee": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/OpenCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses the input to create an OpenCommand with the proper parameters."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code description} to generate an OpenCommand with the item at the given index of this list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param description index of item"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param flags should be empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the given string is not a positive integer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenCommand parse(String description, String flags) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // flags should be empty in this case, focus on description only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new OpenCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    T parse(String description, String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses {@code description} into a {@code ItemDescription} and returns it."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param description given for the item."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new item description that is processed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the description is invalid (empty description)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static ItemDescription parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!ItemDescription.isValidItemDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(ItemDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new ItemDescription(trimmedDescription);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code dateTime} into a {@code Optional\u003cEvent\u003e} and returns it."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts a String to a LocalDateTime object and creates a new event with it."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param dateTime representing the deadline of the event"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(event) if the Event created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of deadline provided is incorrect"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cEvent\u003e parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            formattedDateTime \u003d getFormattedDateTime(trimmedDateTime); //LocalDateTime.parse(trimmedDateTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect. \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Please follow this format: \\\"-d 2019-09-25T23:59:50.63\\\"\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"or \\\"-d 25/09/2019 2359\\\"\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"or \\\"-d 10.min.later\\\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event newEvent \u003d new Event(formattedDateTime, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(newEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code reminder} into a {@code Optional\u003cReminder\u003e} and returns it."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts the string time into a LocalDateTime object and create a Reminder with it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param reminder representing the time of the reminder"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(reminder) if the reminder created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of the reminder time is incorrect"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cReminder\u003e parseReminder(String reminder) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDateTime \u003d reminder.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            formattedDateTime \u003d getFormattedDateTime(trimmedDateTime); //LocalDateTime.parse(trimmedDateTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect. \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Please follow this format: \\\"-r 2019-09-25T23:59:50.63\\\"\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"or \\\"-r 25/09/2019 2359\\\"\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"of \\\"-r 10.min.later\\\"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder newReminder \u003d new Reminder(formattedDateTime);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(newReminder);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parse the {@code snoozeTillTime} into a {@code Optional\u003cLocalDateTime\u003e} and returns it."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Converts the string time into a LocalDateTime object/"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param snoozeTillTime representing the time of the next occurrence of the Reminder"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return Optional.of(formattedDateTime) if the occurenceDateTime created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @throws ParseException if the format of the reminder time is incorrect"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static Optional\u003cLocalDateTime\u003e parseSnooze(String snoozeTillTime) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (snoozeTillTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String trimmedDateTime \u003d snoozeTillTime.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            formattedDateTime \u003d getFormattedDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    + \"Please follow this format: \\\"-r 2019-09-25T23:59:50.63\\\"\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    + \"or \\\"-r 25/09/2019 2359\\\"\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    + \"of \\\"-r 10.min.later\\\"\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Checks if you are snoozing to a dateTime that is before now."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (formattedDateTime.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            throw new ParseException(\"You can\u0027t snooze backwards in time you lazy bird.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Optional.of(formattedDateTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code priority} into a {@code Optional\u003cPriority\u003e} and returns it."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts the string of priority into an enumeration priority object, is case-insensitive."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param priority of the task or event"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(priority) if the priority is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the priority given is not high/medium/low"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cPriority\u003e parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority processedPriority;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (trimmedPriority.equalsIgnoreCase(\"HIGH\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else if (trimmedPriority.equalsIgnoreCase(\"MEDIUM\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else if (trimmedPriority.equalsIgnoreCase(\"LOW\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Priority format given is incorrect. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Please follow this format \\\"-p High\\\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(processedPriority); //maybe use enum here"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses string {@code period} into an {@code Optional\u003cAutoReschedulePeriod\u003e} representation of the period."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period of the auto-reschedule. Expects \"hour\"/\"day\"/\"week\" or format \"10.min.later\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(AutoRechedulePeriod) if this period is valid. Optional.of(empty) otherwise."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of period given is incorrect."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cAutoReschedulePeriod\u003e parseReschedule(String period) throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processedPeriod \u003d period.trim().toUpperCase();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        boolean isFixedPeriod \u003d false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AutoReschedulePeriod reschedulePeriod \u003d new AutoReschedulePeriod(0); // just to initialise"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        switch(processedPeriod) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case(AutoReschedulePeriod.BY_HOUR):"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byHour();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case (AutoReschedulePeriod.BY_DAY):"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byDay();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case (AutoReschedulePeriod.BY_WEEK):"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byWeek();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // nothing"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!isFixedPeriod) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                DateTimeParser parser \u003d new FastReminderDateTimeParser();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                LocalDateTime temp \u003d parser.parseDateTime(processedPeriod);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                reschedulePeriod \u003d AutoReschedulePeriod.from(temp);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                throw new ParseException(\"Auto Reschedule format given is incorrect. \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        + \"Use either hour/day/week or 10.min.later format\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(reschedulePeriod);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the string by trying out different formats, and returns a LocalDateTime"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the date and time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a LocalDateTime representation of the given string"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws DateTimeParseException if the format of the string given is incorrect"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static LocalDateTime getFormattedDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        boolean invalidFormat \u003d false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ParseException parseException \u003d new ParseException(\"dummy\"); // just to initialize"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArrayList\u003cDateTimeParser\u003e allParsers \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new StandardDateTimeParser());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new DefinedDateTimeParser());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new FastReminderDateTimeParser());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime processedDateTime \u003d LocalDateTime.now(); // just to initialize"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (DateTimeParser parser : allParsers) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d parser.parseDateTime(stringDateTime);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d false;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (ParseException err) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                parseException \u003d err;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (invalidFormat) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw parseException;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return processedDateTime;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 35,
      "lrchema": 9,
      "mannggoo": 177,
      "sianghwee": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/PriorityCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.PriorityCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ScheduledPriorityCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parser to generate a priority command based on the user\u0027s input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class PriorityCommandParser implements Parser\u003cPriorityCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PriorityCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * and returns a PriorityCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String time \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        flags \u003d flags.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        boolean focusMode \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!flags.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (flags.equalsIgnoreCase(\"-f\") || flags.equalsIgnoreCase(\"-focus\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                focusMode \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, PriorityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (time.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new PriorityCommand(focusMode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            LocalDateTime ldt \u003d ParserUtil.getFormattedDateTime(time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new ScheduledPriorityCommand(ldt, focusMode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PriorityCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "sianghwee": 41
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/ShowCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TASK_VIEW_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_VIEW_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_VIEW_COMMAND \u003d \"R\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String CALENDAR_VIEW_COMMAND \u003d \"C\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code view} in the context of ShowCommand and returns a ShowCommand for execution"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param view of the view to show"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param empty an empty string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return appropriate ShowCommand to execute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of view string is incorrect"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public ShowCommand parse(String view, String empty) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(view);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String pane \u003d view.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (pane.equalsIgnoreCase(TASK_VIEW_COMMAND)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(EVENT_VIEW_COMMAND)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(REMINDER_VIEW_COMMAND)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(CALENDAR_VIEW_COMMAND)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new ShowCommand(pane);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"The format given for show command is incorrect. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Example usage: \\\"show T\\\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "mannggoo": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/SnoozeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_SNOOZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class SnoozeCommandParser implements Parser\u003cSnoozeCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Duration defaultSnoozeDuration \u003d Duration.of(5, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the given {@code description} and {@code args} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public SnoozeCommand parse(String description, String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String processArgs \u003d args + \" \"; // account for the possibility that --tk or --r or --e is given with no space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            argMultiMap \u003d ArgumentTokenizer.tokenize(processArgs, PREFIX_SNOOZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            logger.info(\"Failure to tokenize arguments: SnoozeCommand\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            throw new ParseException(\"Snooze command format is incorrect.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        boolean hasIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (!description.isBlank()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                index \u003d ParserUtil.parseIndex(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                hasIndex \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                //TODO: Auto snooze most recent reminder"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            index \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            hasIndex \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        LocalDateTime newReminderOccurrence \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_SNOOZE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            newReminderOccurrence \u003d ParserUtil.parseSnooze(argMultiMap.getValue(PREFIX_SNOOZE).get()).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            newReminderOccurrence \u003d LocalDateTime.now().plus(defaultSnoozeDuration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new SnoozeCommand(hasIndex, index, newReminderOccurrence);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 71
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parser to create a sort command with the right arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String DESC \u003d \"desc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String DESCRIPTION \u003d \"description\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String PRI \u003d \"pri\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String PRIORITY \u003d \"priority\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Create a sort command base on the flag that was passed in."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param args of the way in which"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param empty an empty string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return appropriate SortCommand to execute"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the argument string is incorrect"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SortCommand parse(String args, String empty) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String flag \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (flag.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new SortCommand(Optional.empty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Comparator\u003cItem\u003e comparator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch(flag.toLowerCase()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DESC:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            comparator \u003d (item1, item2) -\u003e item1.getItemDescription().getDescription()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    .compareToIgnoreCase(item2.getItemDescription().getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PRI:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PRIORITY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            comparator \u003d (item1, item2) -\u003e item1.getPriority().compareTo(item2.getPriority());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException(\"The parameter given for sort command is incorrect. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    + \"Example usage: \\\"sort desc\\\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new SortCommand(Optional.of(comparator));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "sianghwee": 49
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/StandardDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse string Date Time in the standard way using LocalDateTime.parse()."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class StandardDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse string using LocalDateTime.parse()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of this string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws DateTimeParseException if the format of this string is incorrect"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return LocalDateTime.parse(stringDateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 24
    }
  },
  {
    "path": "src/main/java/seedu/elisa/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/AutoRescheduleManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Manages all the events that are to be rescheduled automatically at each of their given interval period."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Uses a Timer to keep track of when to update the Event\u0027s startDateTime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AutoRescheduleManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static AutoRescheduleManager manager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static Timer timer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private AutoRescheduleManager() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * The only way to get an AutoRescheduleManager object. There should only be one AutoRescheduleManager at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the only instance of AutoRescheduleManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoRescheduleManager getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (manager \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            manager \u003d new AutoRescheduleManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            timer \u003d new Timer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return manager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Initialise this AutoRescheduleManager with all the events that can be rescheduled, in the given event list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update event times to the latest upcoming one, given their period."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param eventList of all events in the storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model containing the events"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void initStorageEvents(EventList eventList, ItemModel model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (Item item : eventList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (item.hasEvent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                updateEvent(item, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Updates the start time of the event and creates a RescheduleTask based on the updated event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * If the current start time is already over, update to the next upcoming time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Else, start time remains the same."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item whose event is to be updated"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model where the item is stored in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void updateEvent(Item item, ItemModel model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (event.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (event.getStartDateTime().compareTo(LocalDateTime.now()) \u003e 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // event date is after now"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // add event to Timer thread, add(newEvent)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                RescheduleTask task \u003d new RescheduleTask(item, event.getPeriod(), model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                getInstance().add(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // event date is before now, but is reschedulable"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // modify the event date to the most upcoming one (Use modulo and add remainder)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // add(newEvent)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                LocalDateTime updatedDateTime \u003d getUpdatedDateTime(event);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                Event updatedEvent \u003d event.changeStartDateTime(updatedDateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // update the old event time to the new one in the itemModel"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                Item oldItem \u003d item;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                Item newItem \u003d item.changeEvent(updatedEvent);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                RescheduleTask task \u003d new RescheduleTask(newItem, updatedEvent.getPeriod(), model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                model.replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                getInstance().add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update the old event start time to the closest upcoming start time, using the event\u0027s auto-reschedule period"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param event whose start date we want to modify"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the modified time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static LocalDateTime getUpdatedDateTime(Event event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Use modulo to get the remaining time till the next reschedule time. Add that remaining time to the time now."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long period \u003d event.getPeriod().getPeriod();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime startDateTime \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long millisDifference \u003d Duration.between(startDateTime, LocalDateTime.now()).toMillis(); // positive difference;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long millisRemainder \u003d millisDifference % period; //millisDifferenceBi.mod(periodBi).longValue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long tillNextStart \u003d period - millisRemainder;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime updatedDateTime \u003d LocalDateTime.now().plusNanos(Duration.ofMillis(tillNextStart).toNanos());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return updatedDateTime;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Adds a RescheduleTask that is to be rescheduled periodically, to this AutoRescheduleManager."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Requirements: task\u0027s start time is after current time. If not, use {@code updateEvent()} to add."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param task RescheduleTask to be carried out after reaching an event\u0027s startDateTime"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void add(RescheduleTask task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Duration delay \u003d Duration.between(LocalDateTime.now(), task.getStartTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (delay.getSeconds() \u003c 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                LocalDateTime updatedTime \u003d getUpdatedDateTime(task.getEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask.addToAllTasks(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            timer.scheduleAtFixedRate(task, delay.toMillis(), task.getLongPeriod());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            logger.warning(\"----------------[Failed to schedule Event][\" + task.getEvent() + \"]\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Shutdown the AutoRescheduleManager"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void shutdown() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "mannggoo": 123
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/AutoReschedulePeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents the auto-reschedule period of an event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AutoReschedulePeriod {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_HOUR \u003d \"HOUR\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_DAY \u003d \"DAY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_WEEK \u003d \"WEEK\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long hourInMilliseconds \u003d Duration.ofHours(1).toMillis();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long dayInMilliseconds \u003d Duration.ofDays(1).toMillis();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long weekInMilliseconds \u003d Duration.ofDays(7).toMillis();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private long period;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AutoReschedulePeriod(long period) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one hour."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one hour."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byHour() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long hourPeriod \u003d hourInMilliseconds;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(hourPeriod);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one day."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one day."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byDay() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long dayPeriod \u003d dayInMilliseconds;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(dayPeriod);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one week."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one week."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byWeek() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long weekPeriod \u003d weekInMilliseconds;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(weekPeriod);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of this LocalDateTime {@code then} from now."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param then LocalDateTime of the time later"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object representing the time difference from now till then."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod from(LocalDateTime then) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Duration duration \u003d Duration.between(LocalDateTime.now(), then);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(duration.toMillis());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get the period of this AutoReschedulePeriod in Millis."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a long representation of this period in Millis."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public long getPeriod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 67
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ElisaCommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * interface for state history"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public interface ElisaCommandHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushUndo(Command command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popUndo();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekUndo();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeUndo();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushRedo(Command command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popRedo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekRedo();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeRedo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void clearRedo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 28
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ElisaCommandHistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Stores the stack of all application states with current state at the top"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ElisaCommandHistoryManager implements ElisaCommandHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Stack\u003cUndoableCommand\u003e undoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Stack\u003cUndoableCommand\u003e redoStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistoryManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * push a command into undo stack"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushUndo(Command command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            undoStack.push((UndoableCommand) command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * empty the redo stack (for use when new command is executed)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void clearRedo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        redoStack.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * pop last command from undo stack"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popUndo() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        UndoableCommand command \u003d undoStack.pop();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        pushRedo(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * peek last command from undo stack"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekUndo() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * return stack size of undo stack"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushRedo(Command command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            redoStack.push((UndoableCommand) command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popRedo() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        UndoableCommand command \u003d redoStack.pop();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        pushUndo(command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekRedo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return redoStack.peek();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int sizeRedo() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return redoStack.size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof ElisaCommandHistoryManager)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ElisaCommandHistoryManager hm \u003d (ElisaCommandHistoryManager) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return hm.redoStack.equals(this.redoStack)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 hm.undoStack.equals(this.undoStack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 89,
      "sianghwee": 15
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemIndexWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Stores an item along with its indices in the separate item lists"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ItemIndexWrapper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item item; //the item"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int visual; //its index in VisualizeList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int storage; //index in ItemStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int task; //index in TaskList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int eve; //index in EventList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int rem; //index in ReminderList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int frem; //index in FutureReminders"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int arem; //index in ActiveReminders"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    //All indices are -1 if not in the respective list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper(Item item, int visual, int storage, int task, int eve, int rem, int frem, int arem) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.visual \u003d visual;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.eve \u003d eve;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.rem \u003d rem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.frem \u003d frem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.arem \u003d arem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getVisual() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return visual;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getStorage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getEve() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return eve;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getRem() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return rem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getFrem() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return frem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getArem() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return arem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 62
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ActiveRemindersList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.FutureRemindersList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface ItemModel {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemStorageFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setItemStorageFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setItemStorage(ItemStorage itemStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage getItemStorage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem(Item item);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addItem(ItemIndexWrapper wrapper);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem(Item item, Item newItem);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deleteItem(int index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item deleteItem(Item item);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList(String listString) throws IllegalValueException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void clear();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void emptyLists();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList findItem(String[] searchStrings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setVisualizeList(VisualizeList list);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort(Comparator\u003cItem\u003e comparator);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasItem(Item item);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(Item item);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(ItemIndexWrapper wrapper);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper getIndices(int index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void repopulateLists();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistory getElisaCommandHistory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean togglePriorityMode() throws IllegalListException;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void scheduleOffPriorityMode(LocalDateTime localDateTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void offPriorityMode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item markComplete(int index) throws IllegalListException;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item markIncomplete(int index) throws IllegalListException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList getJokeList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    ActiveRemindersList getActiveReminderListProperty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    FutureRemindersList getFutureRemindersList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    void updateCommandHistory(Command command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EventList getEventList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item getItem(int index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    SimpleBooleanProperty getPriorityMode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    boolean isSystemToggle();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item editItem(Item oldItem, Item newItem);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    Item getLatestOccurredReminder() throws NoSuchElementException;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    PriorityExitStatus getExitStatus();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    boolean isFocusMode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void toggleOnFocusMode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 11,
      "lrchema": 32,
      "sianghwee": 91,
      "mannggoo": 4
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ActiveRemindersList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.CalendarList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.model.item.FutureRemindersList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ReminderList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.TaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents the model for ELISA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemModelManager implements ItemModel {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ReminderList reminderList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private CalendarList calendarList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    // The list to be used for visualizing in the Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private VisualizeList visualList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemStorage itemStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private final ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private final JokeList jokeList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private SimpleBooleanProperty priorityMode \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean systemToggle \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private PriorityExitStatus priorityExitStatus \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private PriorityQueue\u003cItem\u003e sortedTask \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean focusMode \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //These three lists must be synchronized"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ReminderList pastReminders;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ActiveRemindersList activeReminders;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private FutureRemindersList futureReminders;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Timer timer \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemModelManager(ItemStorage itemStorage, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.eventList \u003d new EventList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.reminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemStorage \u003d itemStorage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.jokeList \u003d new JokeList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        pastReminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ActiveRemindersList(new ReminderList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        futureReminders \u003d new FutureRemindersList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        repopulateLists();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Repopulate item lists from storage"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void repopulateLists() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c itemStorage.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            addToSeparateList(itemStorage.get(i));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /* Bryan Reminder"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Referenced: https://docs.oracle.com/javafx/2/binding/jfxpub-binding.htm"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * for property naming conventions."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Function to get property"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ActiveRemindersList getActiveReminderListProperty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return activeReminders;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final FutureRemindersList getFutureRemindersList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return futureReminders;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void updateCommandHistory(Command command) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        elisaCommandHistory.pushUndo(command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Deals with Storage"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemStorageFilePath() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs.getItemStorageFilePath();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorageFilePath(Path itemStorageFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(itemStorageFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(itemStorageFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorage(ItemStorage itemStorage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemStorage \u003d itemStorage;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage getItemStorage() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Above deals with storage"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Edits state of model"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds an item to the respective list. All items will be added to the central list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * It will also be added to the respective list depending on whether it is a task, event or a reminder."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added to the program"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem (Item item) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        addToSeparateList(item);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemStorage.add(item);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add given item into specified index"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addItem(ItemIndexWrapper wrapper) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        visualList.addToIndex(wrapper.getVisual(), wrapper.getItem());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        addToSeparateList(wrapper);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemStorage.add(wrapper.getStorage(), wrapper.getItem());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to add an item to it\u0027s respective list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added into the lists"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(Item item) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (visualList.belongToList(item)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            visualList.add(item);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasTask()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            taskList.add(item);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasEvent()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            eventList.add(item);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            calendarList.add(item);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasReminder()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            reminderList.add(item);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (item.getReminder().get().getOccurrenceDateTime().isAfter(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                futureReminders.add(item);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item to separate lists into given index"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(ItemIndexWrapper wrapper) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getTask() !\u003d -1) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            taskList.addToIndex(wrapper.getTask(), wrapper.getItem());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getEve() !\u003d -1) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            eventList.addToIndex(wrapper.getEve(), wrapper.getItem());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarList.addToIndex(wrapper.getEve(), wrapper.getItem());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getRem() !\u003d -1) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            reminderList.addToIndex(wrapper.getRem(), wrapper.getItem());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getFrem() !\u003d -1) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            futureReminders.add(wrapper.getFrem(), wrapper.getItem());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistory getElisaCommandHistory() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return elisaCommandHistory;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList getJokeList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokeList;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokeList.getJoke();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Deletes an item from the program."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be deleted."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that was deleted from the program"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deleteItem(int index) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item item \u003d visualList.remove(index);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return deleteItem(item);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Deletes an item from the program."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param item the item to be deleted."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return the item that was deleted from the program"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item deleteItem(Item item) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        visualList.remove(item);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        taskList.remove(item);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        eventList.remove(item);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarList.remove(item);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        reminderList.remove(item);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        futureReminders.remove(item);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        activeReminders.remove(item);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        itemStorage.remove(item);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode.getValue() \u0026\u0026 sortedTask !\u003d null \u0026\u0026 visualList instanceof TaskList) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask.remove(item);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            visualList \u003d getNextTask();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper getIndices(int index) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new ItemIndexWrapper(item, index, itemStorage.indexOf(item), taskList.indexOf(item),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                eventList.indexOf(item), reminderList.indexOf(item),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                futureReminders.indexOf(item), activeReminders.indexOf(item));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Set a new item list to be the visualization list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param listString the string representation of the list to be visualized"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList(String listString) throws IllegalValueException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch(listString) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (priorityMode.getValue()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                setVisualList(getNextTask());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(taskList);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(eventList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"R\":"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(reminderList);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            setVisualList(calendarList);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalValueException(String.format(\"%s is no a valid list\", listString));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void setVisualList(VisualizeList il) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d il;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces one item with another item."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be replace"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the item that will replace the previous item"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem(Item item, Item newItem) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int index \u003d visualList.indexOf(item);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (visualList.belongToList(newItem)) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                visualList.setItem(index, newItem);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                visualList.remove(index);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d itemStorage.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemStorage.setItem(index, newItem);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d taskList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasTask()) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                taskList.setItem(index, newItem);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                taskList.remove(index);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d eventList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasEvent()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                eventList.setItem(index, newItem);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.setItem(index, newItem);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                eventList.remove(index);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.remove(index);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d calendarList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasEvent()) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.setItem(index, newItem);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarList.remove(index);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d reminderList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (newItem.hasReminder()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                reminderList.setItem(index, newItem);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                reminderList.remove(index);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Old reminder must be in active since it already rang."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Find the old reminder from activeReminders and remove it."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            activeReminders.remove(item);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Put the new reminder in futureReminders if it will be rung later."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            futureReminders.add(newItem);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode.getValue()) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask.remove(item);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask.offer(newItem);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            visualList \u003d getNextTask();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Edits an item with another item."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param oldItem the item to be edited"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the edited item"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the edited item"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item editItem(Item oldItem, Item newItem) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        addToSeparateList(newItem);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Find an item based on its description."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchStrings the string to search for within the description"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list containing all the items that contain the search string"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList findItem(String[] searchStrings) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d visualList.find(searchStrings);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setVisualizeList(VisualizeList list) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.visualList \u003d list;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Clears the storage for the current ELISA run."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        setItemStorage(new ItemStorage());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        emptyLists();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Clears the 3 lists for re-populating"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void emptyLists() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        eventList.clear();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        reminderList.clear();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarList.clear();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sort the current visual list."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d visualList.sort();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the current visual list based on a comparator."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param comparator the comparator to sort the current list by."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort(Comparator\u003cItem\u003e comparator) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList tempList \u003d visualList.deepCopy();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tempList.sort(comparator);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d tempList;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Checks if the item storage already contains this item."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item to check"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return true if the item storage contains this item, false otherwise"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return itemStorage.contains(item);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Enable and disable the priority mode"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean value. If true, means priority mode is on, else returns false."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalListException if the visualList is not a task list."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean togglePriorityMode() throws IllegalListException {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode.getValue()) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            toggleOffPriorityMode();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            toggleOnPriorityMode();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return priorityMode.getValue();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Schedule a timer to off the priority mode."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param localDateTime the time at which the priority mode should be turned off."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void scheduleOffPriorityMode(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ZonedDateTime zdt \u003d localDateTime.atZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Date date \u003d Date.from(zdt.toInstant());"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                systemToggle \u003d true;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                priorityExitStatus \u003d PriorityExitStatus.PRIORITY_TIMEOUT;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                toggleOffPriorityMode();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }, date);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private VisualizeList getNextTask() {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (sortedTask.isEmpty() || sortedTask.peek().getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            systemToggle \u003d true;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            priorityExitStatus \u003d PriorityExitStatus.ALL_TASK_COMPLETED;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            toggleOffPriorityMode();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return visualList;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.add(sortedTask.peek());"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Method to close the priority mode thread."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void offPriorityMode() {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (timer !\u003d null) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            timer \u003d null;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Turns off the priority mode."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void toggleOffPriorityMode() {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        offPriorityMode();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        sortedTask \u003d null;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        focusMode \u003d false;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (visualList instanceof TaskList) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        priorityMode.setValue(false);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Turns on the priority mode."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void toggleOnPriorityMode() {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        systemToggle \u003d false;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        priorityExitStatus \u003d null;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        priorityMode.setValue(true);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        sortedTask \u003d new PriorityQueue\u003cItem\u003e((item1, item2) -\u003e {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            int result;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if ((result \u003d TaskList.COMPARATOR.compare(item1, item2)) !\u003d 0) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int index1 \u003d taskList.indexOf(item1);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int index2 \u003d taskList.indexOf(item2);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return index1 \u003e index2 ? 1 : -1;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Item item \u003d taskList.get(i);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!item.getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                sortedTask.add(item);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (sortedTask.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            priorityExitStatus \u003d PriorityExitStatus.ALL_TASK_COMPLETED;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            priorityMode.setValue(false);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            this.visualList \u003d getNextTask();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Mark an item with a task as done."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be marked as done."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that is marked as done."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalListException if the operation is not done on a task list."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item markComplete(int index) throws IllegalListException {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item item;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task task \u003d item.getTask().get();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task newTask \u003d task.markComplete();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            newItem \u003d item.changeTask(newTask);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            editItem(item, newItem);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * mark a given task as not completed"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item markIncomplete(int index) throws IllegalListException {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item item;"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            Task task \u003d item.getTask().get();"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            Task newTask \u003d task.markIncomplete();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            newItem \u003d item.changeTask(newTask);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            editItem(item, newItem);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EventList getEventList() {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.eventList;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item getItem(int index) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList.get(index);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item getLatestOccurredReminder() throws NoSuchElementException {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return activeReminders.getLatestOccurredReminder();"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SimpleBooleanProperty getPriorityMode() {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.priorityMode;"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isSystemToggle() {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return systemToggle;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityExitStatus getExitStatus() {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return priorityExitStatus;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void toggleOnFocusMode() {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        focusMode \u003d true;"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isFocusMode() {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return focusMode;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 59,
      "lrchema": 111,
      "sianghwee": 445,
      "mannggoo": 12,
      "Icesiolz": 6
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The central storage of all the items in the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ItemModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds an item to the item list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added to the item list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void add(Item item) throws DuplicateItemException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (items.contains(item)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item into specified index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void add(int targetIndex, Item item) throws DuplicateItemException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (items.contains(item)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        items.add(targetIndex, item);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Retrieve the item list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cItem\u003e getItems() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.items;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Gets the item at the index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be retrieved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item at that index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item get(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Return the size of the storage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the size of the storage as an integer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns if the storage already contains the item."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be searched for"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean contains(Item item) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Remove the item from within the storage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be removed from the storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item remove(Item item) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        items.remove(item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the index of the item in the storage. If the item is not in the storage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * a index of -1 is returned."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be searched for."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the index of the item in the storage."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int indexOf(Item item) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.indexOf(item);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Set the item at the specific index to a new item."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be replaced."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the item to replace the old item."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item setItem(int index, Item newItem) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.set(index, newItem);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the storage into a JSON string."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the JSON representation of the storage."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws JsonProcessingException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toJson() throws JsonProcessingException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return JsonUtil.toJsonString(items);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates the item storage from a json string."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the string representation of the item storage."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item storage with all items added"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the file cannot be read from"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws DataConversionException when the item is not in a proper format"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemStorage fromJson(String jsonString) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Iterator\u003cJsonNode\u003e it \u003d node.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String json \u003d it.next().toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Item item \u003d Item.fromJson(json);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                itemStorage.add(item);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                throw new DataConversionException(e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                logger.log(Level.INFO, String.format(\"%s already exists. Skipping.\", json));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                logger.log(Level.WARNING, String.format(\"%s is corrupted and will be skipped.\", json));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!(other instanceof ItemStorage)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return this.items.equals(((ItemStorage) other).items);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns a deep copy of this item storage."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return deep copy of the item storage"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage deepCopy() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : items) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                itemStorage.add(i.deepCopy());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                // not supposed to happen"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 3,
      "lrchema": 13,
      "sianghwee": 159
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/JokeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * List of jokes to pick and display"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class JokeList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private InputStream jokeFile \u003d JokeList.class.getResourceAsStream(\"/documents/jokes.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ArrayList\u003cString\u003e jokes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Random rng;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        jokes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        rng \u003d new Random();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        BufferedReader r \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            r \u003d new BufferedReader(new InputStreamReader(jokeFile, \"UTF-8\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            String l;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            while ((l \u003d r.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                jokes.add(l);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Returns random joke from list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        rng.setSeed(System.currentTimeMillis());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        int index \u003d rng.nextInt(jokes.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokes.get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 49
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/PriorityExitStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Enumeration containing the different ways in which one can exit the priority mode."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Helps to personalize the feed back messages to the users."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public enum PriorityExitStatus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ALL_TASK_COMPLETED, PRIORITY_TIMEOUT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 9
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemStorageFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/RescheduleTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Task to reschedule an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class RescheduleTask extends TimerTask {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static LinkedList\u003cRescheduleTask\u003e allTasks \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private AutoReschedulePeriod period;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Creates a RescheduleTask to reschedule this item automatically, in intervals of the given period."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Requirements: Item must have an Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item who\u0027s event is to be rescheduled"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period interval of rescheduling"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model which consist of this item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public RescheduleTask(Item item, AutoReschedulePeriod period, ItemModel model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Adds this {@code task} to the list of allTasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param task to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void addToAllTasks(RescheduleTask task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        allTasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Removes the RescheduleTask of this event from the list of allTasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param event to be removed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void removeFromAllTasks(Event event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (RescheduleTask task : RescheduleTask.allTasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (task.getEvent().equals(event)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                task.cancel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                RescheduleTask.allTasks.remove(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event.getStartDateTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public long getLongPeriod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return period.getPeriod();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.event;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Executes this task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update this event\u0027s startDateTime with the new startDateTime, given the period of reccurence."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update the model with the new item."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Refreshes the view on the Ui to reflect the new startDateTime of this event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        logger.info(\"----------[INFO] \" + \"Reschedule runs again. Old event: \" + event.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item oldItem \u003d item;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long period \u003d event.getPeriod().getPeriod();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime newStart \u003d LocalDateTime.now().plusNanos(Duration.ofMillis(period).toNanos());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event newEvent \u003d event.changeStartDateTime(newStart);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem \u003d item.changeEvent(newEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                model.replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                model.repopulateLists();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                model.setVisualizeList(model.getVisualList()); // to refresh the view"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d newItem;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.event \u003d newEvent;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        logger.info(\"-----------[INFO] \" + \"End of run. New event: \" + newEvent.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 5,
      "mannggoo": 95
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"itemstorage.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        setItemStorageFilePath(newUserPrefs.getItemStorageFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemStorageFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorageFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 4,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/exceptions/IllegalListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The exception thrown when a command is executed on a list that it is not able to execute on."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class IllegalListException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "sianghwee": 6
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/ActiveRemindersList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * TODO: Make this javadoc prettier."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * An ActiveReminderList that extends from ListPropertyBase in order to be observable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ActiveRemindersList extends ListPropertyBase\u003cItem\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ActiveRemindersList (ReminderList reminderList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        super(reminderList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Object getBean() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Adds a reminder to ActiveRemindersList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param reminders Collection of reminders to be added to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public synchronized void addReminders(Collection\u003cItem\u003e reminders) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        for (Item item:reminders) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            add(item);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item getLatestOccurredReminder() throws NoSuchElementException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            throw new NoSuchElementException(\"No reminders have occurred yet!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return get(size() - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 44,
      "lrchema": 2
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/CalendarList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Object class to store all the items that are calendars within the program"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class CalendarList extends VisualizeList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CalendarList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasEvent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "sianghwee": 6,
      "Icesiolz": 25
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are events within the program"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class EventList extends VisualizeList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the event list based on the date of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a sorted EventList of the current list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        EventList el \u003d new EventList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item item: list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            el.add(item);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        el.list.sort((item1, item2) -\u003e item1.getEvent().get().getStartDateTime()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .compareTo(item2.getEvent().get().getStartDateTime()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return el;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new EventList only containing the items that have the search string in their description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        EventList el \u003d new EventList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return find(searchString, el);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        EventList el \u003d new EventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(el);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasEvent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 45
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/FutureRemindersList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.ItemReminderDateTimeComparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * A data structure to hold Items with Reminders that have not yet been prompted to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class FutureRemindersList extends ArrayList\u003cItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean add(Item item) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        boolean result \u003d super.add(item);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        super.sort(new ItemReminderDateTimeComparator());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 18
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/ReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are reminders within the program"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ReminderList extends VisualizeList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReminderList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the Reminders by the date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new ReminderList with the reminders within sorted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ReminderList rl \u003d new ReminderList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : list) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            rl.add(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        rl.list.sort((item1, item2) -\u003e item1.getReminder().get().getDefaultDateTime()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .compareTo(item2.getReminder().get().getDefaultDateTime()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return rl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new ReminderList only containing the items that have the search string in their description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ReminderList rl \u003d new ReminderList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.find(searchString, rl);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy () {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ReminderList rl \u003d new ReminderList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(rl);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasReminder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 2,
      "sianghwee": 43
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are task within the program"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class TaskList extends VisualizeList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final Comparator\u003cItem\u003e COMPARATOR \u003d (item1, item2) -\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task task1 \u003d item1.getTask().get();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task task2 \u003d item2.getTask().get();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (task1.isComplete() \u0026\u0026 !task2.isComplete()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else if (!task1.isComplete() \u0026\u0026 task2.isComplete()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return item1.getPriority().compareTo(item2.getPriority());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sort the items in the task list. The items are first sorted by whether they are"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * done or not and then by their priority."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an VisualizeList of all the items sorted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item item: list) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            tl.add(item);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tl.sort(COMPARATOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return tl;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new TaskList containing only the items that have the search string in their description"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return find(searchString, tl);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(tl);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean belongToList(Item item) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.hasTask();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 60
    }
  },
  {
    "path": "src/main/java/seedu/elisa/model/item/VisualizeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ModifiableObservableListBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An object to hold items. Parent class for TaskList, EventList and ReminderList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public abstract class VisualizeList extends ModifiableObservableListBase\u003cItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected ArrayList\u003cItem\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Add an item into the list. The item will not be added if it is already in the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * or it does not belong to the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added into the list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean add(Item item) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (hasItem(item) || !belongToList(item)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return super.add(item);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item into specified index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToIndex(int targetIndex, Item item) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (hasItem(item)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            super.add(targetIndex, item);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Check if the list contains the item."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be checked for."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return true if the item is in the list, else return false."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.contains(item);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void doAdd(int index, Item item) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        list.add(index, item);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Get the list of the item list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ArrayList of all the items in the VisualizeList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cItem\u003e getList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Removes an item from the list base on it\u0027s index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the integer value of the index of the item to be removed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that is removed from this operation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item removeItemFromList(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.remove(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Removes an item from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be removed from the list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item removeItemFromList(Item item) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super.remove(item);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item doSet(int index, Item item) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.set(index, item);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item doRemove(int index) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList find(String[] searchString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to find an item based on their description."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchStrings an array of string to be search for within the description of an item"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param il the item list that will hold the items that contain the string within its description"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list that was given with the found items added"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected VisualizeList find(String[] searchStrings, VisualizeList il) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (String searchString : searchStrings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (Item i : list) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (il.contains(i)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (i.getItemDescription().getDescription().toLowerCase().contains(searchString.toLowerCase())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    il.add(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return il;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList deepCopy();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to return a deep copy of the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param vl the list to be returned"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected VisualizeList deepCopy(VisualizeList vl) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : list) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vl.add(i.deepCopy());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                // not supposed to happen"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return vl;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int indexOf(Item item) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.indexOf(item);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item setItem(int index, Item item) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.set(index, item);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the item at the index within the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item within the list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that has that index in the list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item get(int index) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * The size of the list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the integer value of the size of the list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!(other instanceof VisualizeList)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VisualizeList otherIl \u003d (VisualizeList) other;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return this.list.equals(otherIl.list);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the items in the list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list in the sorted order"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList sort();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super.clear();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Checks if an item belongs to this list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean true if the item belong to this list and false otherwise"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract boolean belongToList(Item item);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 18,
      "sianghwee": 174
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/ItemListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents a storage for ELISA."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface ItemListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void saveItemStorage(ItemStorage itemStorage) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #saveItemStorage(ItemStorage itemStorage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage toModelType() throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/JsonItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * A class that contains all the JSON representation of the string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class JsonItemStorage implements ItemListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Items list contains duplicate items\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItemStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Path itemListFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public JsonItemStorage (Path path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemListFilePath \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.itemListFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        saveItemStorage(itemStorage, itemListFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param filePath the path of the save file. Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(itemStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        FileUtil.writeToFile(filePath, itemStorage.toJson());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts this JSON item storage into the model\u0027s storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ItemStorage with all the items"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there are any problem with reading from the string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage toModelType() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String jsonString \u003d FileUtil.readFromFile(itemListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return ItemStorage.fromJson(jsonString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.info(\"Data from save file corrupted.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "sianghwee": 70
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface Storage extends ItemListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "sianghwee": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemListStorage itemListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public StorageManager(ItemListStorage itemListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemListStorage \u003d itemListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        saveItemStorage(itemStorage, itemListStorage.getItemListFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemListStorage.saveItemStorage(itemStorage, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage toModelType() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemListStorage.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "sianghwee": 13,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/elisa/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Represents a storage for {@link seedu.elisa.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Saves the given {@link seedu.elisa.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/CalendarPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The calendar panel for Elisa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Label monthAndYear;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a calendar panel base on the current date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param visualList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CalendarPanel(ObservableList\u003cItem\u003e visualList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.month \u003d currentTime.getMonthValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.year \u003d currentTime.getYear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        monthAndYear.setText(String.format(\"%s, %s\", Month.of(month), String.valueOf(year)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        initializeCalendarGrid();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        loadData(visualList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        visualList.addListener(new ListChangeListener\u003cItem\u003e() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            public void onChanged(Change\u003c? extends Item\u003e c) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                System.out.println(\"Change\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                clearCells();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                generateDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                loadData(visualList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void initializeCalendarGrid() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        generateHeader();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        generateDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Load the events from the visualization list to the calendar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param visualList the list containing all the data to be loaded from."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void loadData(ObservableList\u003cItem\u003e visualList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        HashMap\u003cInteger, ArrayList\u003cItem\u003e\u003e monthEvents \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item item : visualList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!isMonth(item)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int day \u003d getDate(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (!monthEvents.containsKey(day)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    monthEvents.put(day, new ArrayList\u003cItem\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                monthEvents.get(day).add(item);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Integer i : monthEvents.keySet()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            ArrayList\u003cItem\u003e temp \u003d monthEvents.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            int size \u003d temp.size() - 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Label lbl \u003d new Label();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            lbl.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Item item \u003d temp.get(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (size \u003e 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setText(String.format(\"%s + %d event(s)\", item.getItemDescription().getDescription(), size));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setText(String.format(\"%s\", item.getItemDescription().getDescription()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            switch (priority) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            case \"HIGH\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-background-color: red; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            case \"MEDIUM\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-background-color: orange; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            case \"LOW\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-background-color: green; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox pane \u003d (VBox) node;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            pane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cItem\u003e eventList \u003d visualList.filtered(x -\u003e x.hasEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        System.out.println(\"check here?\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cItem\u003e monthEvent \u003d eventList.filtered(x -\u003e x.getEvent()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .get().getStartDateTime().getMonthValue() \u003d\u003d month);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        HashMap\u003cInteger, Integer\u003e checker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!monthEvent.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (Item item: monthEvent) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                int date \u003d item.getEvent().get().getStartDateTime().getDayOfMonth();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                if (checker.containsKey(date)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    checker.put(date, checker.get(date) + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    if (checker.get(date) \u003e 2) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    checker.put(date, 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(date));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                VBox pane \u003d (VBox) node;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                Label lbl \u003d new Label();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                lbl.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                lbl.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                switch (priority) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                case \"HIGH\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    lbl.setStyle(\"-fx-background-color: red; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                case \"MEDIUM\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    lbl.setStyle(\"-fx-background-color: orange; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                case \"LOW\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    lbl.setStyle(\"-fx-background-color: green; -fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (node instanceof VBox) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    pane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Check if an item belongs to the current month."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be checked for."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean value if the item is happening within the month."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean isMonth(Item item) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!item.hasEvent()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return item.getEvent().get().getStartDateTime().getMonthValue() \u003d\u003d month;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int getDate(Item item) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item.getEvent().get().getStartDateTime().getDayOfMonth();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Generates the header of the calendar"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void generateHeader() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            GridPane.setVgrow(vPane, Priority.NEVER);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Label day \u003d new Label();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            day.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            day.setText(DayOfWeek.of(i + 1).getDisplayName(TextStyle.SHORT, Locale.ENGLISH));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getChildren().add(day);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarGrid.add(vPane, i, 0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Generates the date on the calendar base on the current month."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void generateDate() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime startOfMonth \u003d LocalDateTime.of(year, month, 1, 0, 0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int firstDay \u003d startOfMonth.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int daysInMonth \u003d startOfMonth.getMonth().maxLength();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (year % 4 !\u003d 0 \u0026\u0026 (startOfMonth.getMonth() \u003d\u003d Month.FEBRUARY)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            daysInMonth \u003d 28;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        double height \u003d calendarGrid.getHeight();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        double maxHeight \u003d height / 7;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int offset \u003d firstDay - 1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int lblCount \u003d 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            GridPane.setVgrow(vPane, Priority.ALWAYS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (i \u003c offset) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.setStyle(\"-fx-background-color: #E9F2F5\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.setId(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Label lbl \u003d new Label(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-text-fill:darkslategray\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lblCount++;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarGrid.add(vPane, i, 1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 2; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                GridPane.setVgrow(vPane, Priority.ALWAYS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (lblCount \u003c\u003d daysInMonth) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.setId(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    Label lbl \u003d new Label(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lbl.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lbl.setStyle(\"-fx-text-fill:darkslategray\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lblCount++;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.setStyle(\"-fx-background-color: #E9F2F5\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarGrid.add(vPane, j, i);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper method to clear all the cells so that it can be updated."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void clearCells() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cNode\u003e allCells \u003d calendarGrid.getChildren();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Node cell: allCells) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (GridPane.getRowIndex(cell) !\u003d 0) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                VBox pane \u003d (VBox) cell;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                pane.getChildren().clear();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 228,
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "         * @see seedu.elisa.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ElisaDialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "class ElisaDialogBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ElisaDialogBox(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ElisaDialogBox.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialog.setText(text); }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    static ElisaDialogBox getElisaDialog(String text) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new ElisaDialogBox(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 33
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ElisaReminderBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class ElisaReminderBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ElisaReminderBox(String text) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ElisaReminderBox.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        dialog.setText(text); }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    static ElisaReminderBox getElisaDialog(String text) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ElisaReminderBox(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/EventListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class EventListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priorityLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ImageView statusIcon;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ImageView eventIcon;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public EventListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/EventIcon.PNG\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Event event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        date.setText(String.valueOf(event.getStartDateTime().getDayOfMonth())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                + \" \" + String.valueOf(event.getStartDateTime().getMonth()).substring(0, 3));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (item.hasTask()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (item.getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Completed.PNG\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Uncompleted.PNG\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setText(priority);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setPadding(new Insets(5, 10, 5, 10));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(priority) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: red; \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: orange; \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setText(\"MED\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: green; \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        EventListCard card \u003d (EventListCard) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "Icesiolz": 102
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/EventListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e eventListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public EventListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d eventListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class EventListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasEvent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new EventListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 78
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ItemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ItemListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        name.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //person.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //       .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //        .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemCard card \u003d (ItemCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 14,
      "-": 55,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ItemListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e itemListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ItemListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.scrollTo(itemList.size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 45
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.effect.GaussianBlur;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.effect.Glow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.scene.media.AudioClip;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.stage.Popup;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.CloseCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.CloseCommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.DownCommandResult;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.logic.commands.OpenCommandResult;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.logic.commands.PriorityCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.logic.commands.ThemeCommandResult;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.UpCommandResult;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.CalendarList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.ReminderList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.TaskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.item.VisualizeList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Image redElisa \u003d new Image(getClass().getClassLoader()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            .getResource(\"images/FocusElisa.PNG\").toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Image blueElisa \u003d new Image(getClass().getClassLoader()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            .getResource(\"images/ElisaImageWithoutWords.PNG\").toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Popup popup;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String reminderAlarmUrl \u003d getClass().getClassLoader().getResource(\"sounds/alertChime.mp3\").toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private AudioClip reminderAlarm \u003d new AudioClip(reminderAlarmUrl);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private StackPane calendarPanelPlaceholder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private StackPane openItemPlaceholder;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TabPane viewsPlaceholder;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ImageView elisaImage;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Text elisaText;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Text elisaDescription;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Text elisaDescription2;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaTextBlueColor \u003d elisaText.getFill();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaDescBlueColor \u003d elisaDescription.getFill();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaTextRedColor \u003d Paint.valueOf(\"ff8080\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Paint elisaDescRedColor \u003d Paint.valueOf(\"ffb4b4\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        //Listen to changes in tab selection"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        viewsPlaceholder.getSelectionModel().selectedItemProperty().addListener("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                new ChangeListener\u003cTab\u003e() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    public void changed(ObservableValue\u003c? extends Tab\u003e ov, Tab t, Tab t1) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            logic.getModel().setVisualList(t1.getId());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            updatePanels();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        } catch (ParseException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        logic.getPriorityMode().addListener(new ChangeListener\u003cBoolean\u003e() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Boolean\u003e observable, Boolean oldValue, Boolean newValue) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (newValue) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    setRed();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    setBlue();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    if (logic.isSystemToggle()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            String feedback;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            switch (logic.getExitStatus()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            case PRIORITY_TIMEOUT: feedback \u003d PriorityCommand.TIME_OUT;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            case ALL_TASK_COMPLETED: feedback \u003d PriorityCommand.FINISHED_ALL_TASKS;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                // will never reach here as there are only two cases"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                feedback \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            resultDisplay.setFeedbackToUser(feedback);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            updatePanels();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void setRed() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaImage.setImage(redElisa);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setFill(elisaTextRedColor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setEffect(new Glow(0.2));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setStroke(elisaDescRedColor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription.setFill(elisaDescRedColor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription2.setFill(elisaDescRedColor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void setBlue() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaImage.setImage(blueElisa);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setFill(elisaTextBlueColor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaText.setEffect(null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription.setFill(elisaDescBlueColor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        elisaDescription2.setFill(elisaDescBlueColor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        updatePanels();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Get property.addListener"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Create a ListChangeListener for activeReminders"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        ListChangeListener\u003cItem\u003e activeRemindersListener \u003d new ListChangeListener\u003cItem\u003e() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public void onChanged(Change\u003c? extends Item\u003e c) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                while (c.next()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    createReminders(c);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            private void createReminders(Change\u003c? extends Item\u003e c) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                for (Item newItem : c.getAddedSubList()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        //Populate resultDisplay with reminder textbox"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        resultDisplay.setFeedbackToUser(newItem.getReminderMessage());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Binds a ListChangeListener to activeRemindersList"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logic.getActiveRemindersListProperty().addListener(activeRemindersListener);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Switches the view."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void handleSwitchView(VisualizeList list) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (list instanceof TaskList) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof EventList) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof ReminderList) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof CalendarList) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls the target pane up"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param pane"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void scrollUp(String pane) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(pane) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"resultDisplay\":"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.scrollUp();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"tabPane\":"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            eventListPanel.scrollUp();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            taskListPanel.scrollUp();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            reminderListPanel.scrollUp();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls the target pane down"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param pane"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void scrollDown(String pane) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(pane) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"resultDisplay\":"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.scrollDown();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"tabPane\":"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            eventListPanel.scrollDown();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            taskListPanel.scrollDown();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            reminderListPanel.scrollDown();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Generates an appropriate popup with the given item, formatted accordingly"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item details to fill in the popup with"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private void openUp(Item item) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Popup popup \u003d new Popup();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.getContent().add(new OpenItem(item).getRoot());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.setHeight(1000);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.setWidth(500);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.setHideOnEscape(false);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.popup \u003d popup;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        popup.show(primaryStage);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Carries out the operations to generate a popup which expands the view of the given item"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param cr containing the item to open"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the result of executing this command"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private CommandResult executeOpen(CommandResult cr) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        CommandResult commandResult \u003d cr;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (popup !\u003d null) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Previous popup still exists"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            commandResult \u003d new CommandResult(\"Hey, close the previous one first!\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Open new popup to show the item"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            OpenCommandResult result \u003d (OpenCommandResult) commandResult;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            openUp(result.getItem());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            viewsPlaceholder.setEffect(new GaussianBlur());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Carries out operations to close the current popup"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param cr to carry out"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return result of executing this command"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private CommandResult executeClose(CommandResult cr) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        CommandResult commandResult \u003d cr;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (popup \u003d\u003d null) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Nothing to close"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            commandResult \u003d new CloseCommandResult(CloseCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            popup.hide();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.popup \u003d null;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            viewsPlaceholder.setEffect(null);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Updates the panels to display the correct list of item."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void updatePanels() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public EventListPanel getEventListPanel() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return reminderListPanel;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Changes the theme"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param theme"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void changeTheme(String theme) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        System.out.print(theme);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        System.out.print(scene.getStylesheets());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scene.getStylesheets().remove(0);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scene.getStylesheets().remove(0);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(theme.trim()) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"white\":"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/WhiteTheme.css\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/Extensions.css\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"black\":"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            scene.getStylesheets().add(\"view/Extensions.css\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * @see seedu.elisa.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.setMessageFromUser(commandText);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (!(commandResult instanceof UpCommandResult) \u0026\u0026 !(commandResult instanceof DownCommandResult)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    \u0026\u0026 !(commandResult instanceof OpenCommandResult)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    \u0026\u0026 !(commandResult instanceof CloseCommandResult)) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            handleSwitchView(logic.getVisualList());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof UpCommandResult) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scrollUp(commandResult.getPane());"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof DownCommandResult) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scrollDown(commandResult.getPane());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof ThemeCommandResult) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                changeTheme(commandResult.getTheme());"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (commandResult instanceof OpenCommandResult) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                commandResult \u003d executeOpen(commandResult);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (commandResult instanceof CloseCommandResult) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                commandResult \u003d executeClose(commandResult);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            updatePanels();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 28,
      "lrchema": 24,
      "mannggoo": 80,
      "sianghwee": 95,
      "-": 103,
      "Icesiolz": 155
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/OpenItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Serves as a controller for the OpenItem.fxml."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class OpenItem extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String FXML \u003d \"OpenItem.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label itemdetails;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label completed;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label startdate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label enddate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Label reminderdate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenItem(Item item) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemdetails.setText(item.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public OpenItem(ObservableList\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d items.get(0); // only 1 item"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        priority.setText(\"Priority: \" + item.getPriority().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        startdate.setText(\"Start Date: \" + item.getEvent().get().getStartDateTime().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        enddate.setText(\"End Date: \" + item.getEvent().get().getEndDateTime().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 57
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ListView\u003cItem\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PersonListPanel(ObservableList\u003cItem\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code ItemCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "sianghwee": 8,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ReminderListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ReminderListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priorityLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ImageView statusIcon;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ImageView eventIcon;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ReminderListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/EventIcon.PNG\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        Reminder reminder \u003d item.getReminder().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        date.setText(String.valueOf(reminder.getOccurrenceDateTime().getDayOfMonth())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                + \" \" + String.valueOf(reminder.getOccurrenceDateTime().getMonth()).substring(0, 3));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (item.hasTask()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (item.getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Completed.PNG\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Uncompleted.PNG\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setText(priority);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setPadding(new Insets(5, 10, 5, 10));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(priority) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: red; \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: orange; \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setText(\"MED\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: green; \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        ReminderListCard card \u003d (ReminderListCard) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 2,
      "sianghwee": 1,
      "Icesiolz": 100
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ReminderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e reminderListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d reminderListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasReminder()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new ReminderListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 78
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                ElisaDialogBox.getElisaDialog(feedbackToUser)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public void setReminderToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                ElisaReminderBox.getElisaDialog(feedbackToUser)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setMessageFromUser(String messageFromUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(messageFromUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                UserDialogBox.getUserDialog(messageFromUser)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scrollPane.setVvalue(scrollPane.getVvalue() + 5);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        System.out.println(scrollPane.getVvalue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 7,
      "lrchema": 1,
      "-": 24,
      "Icesiolz": 30
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/TaskListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class TaskListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priorityLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ImageView statusIcon;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ImageView eventIcon;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (item.getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Completed.PNG\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            statusIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/Uncompleted.PNG\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (item.hasEvent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            eventIcon.setImage(new Image(TaskListCard.class.getResourceAsStream(\"/images/EventIcon.PNG\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            Event event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            date.setText(String.valueOf(event.getStartDateTime().getDayOfMonth())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                + \" \" + String.valueOf(event.getStartDateTime().getMonth()).substring(0, 3));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        String priority \u003d item.getPriority().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setText(priority);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setPadding(new Insets(5, 10, 5, 10));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        priorityLabel.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(priority) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"HIGH\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: red; \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"MEDIUM\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: orange; \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setText(\"MED\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"LOW\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            priorityLabel.setStyle(\"-fx-font-family: \u0027Arial Black\u0027; \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-color: green; \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    + \"-fx-background-radius: 15, 15, 15, 15\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        TaskListCard card \u003d (TaskListCard) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "Icesiolz": 102
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e taskListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d taskListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasTask()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new TaskListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "Icesiolz": 78
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ElisaIcon.PNG\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/elisa/ui/UserDialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "class UserDialogBox extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private UserDialogBox(String text) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    static UserDialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new UserDialogBox(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 33
    }
  },
  {
    "path": "src/main/resources/documents/jokes.txt",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "You."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I used to breed rabbits. Then I realized they can handle it themselves."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "My dog is an awesome fashion adviser. Every time I ask him what I look like in my clothes, he says “WOW!”"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why are eggs not very much into jokes? Because they could crack up."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Barkeep: I’m sorry, we never serve time travelers. A time traveler walks into a bar."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What is written on a dentist’s grave? He’s filling his last cavity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Meanwhile in a parallel universe: “Oh for God’s sake! Where are all these extra single socks coming from?!”"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a boomerang that doesn\u0027t come back? A stick."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How many tickles does it take to make an octopus laugh? 10-tickles."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How does Moses make coffee? Hebrews it."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I’m positive I just lost an electron. Better keep an ion that."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do you invite a dinosaur for lunch? Tea, Rex?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Who invented King Arthur’s round table? Sir Cumference."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I’m super friendly with 25 letters of the alphabet. I just don’t know why."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do turtles communicate with each other? With shell phones."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s so great about whiteboards? If you think about it, they’re pretty re-markable!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why did the mathematician work from home? Because he could only function in his domain."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Will glass coffins be a success? Remains to be seen."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "You know what really bugs me? Insect puns."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I was wondering why the ball was getting bigger. Then it hit me."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\"I have a split personality,\" said Tom, being frank."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s the difference between a hippo and a zippo? One is really heavy, and the other is a little lighter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Last night, I dreamed I was swimming in an ocean of orange soda. But it was just a Fanta sea."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I can’t believe I got fired from the calendar factory. All I did was take a day off!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a bee that can’t make up its mind? A maybe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I tried to sue the airline for losing my luggage. I lost my case."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "A mean crook going down stairs \u003d A condescending con, descending"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do you throw a space party? You planet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "what did the astronaut say when he was interviewed? No comet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What washes up on tiny beaches? Microwaves."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I was going to make a chemistry joke, but all the good ones Argon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Sleeping comes so naturally to me, I could do it with my eyes closed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call an alligator in a vest? An investigator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I used to be indecisive; now I\u0027m not so sure."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I got a new thesaurus; not only is it bad, it’s bad."
      }
    ],
    "authorContributionMap": {
      "lrchema": 35
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"anchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cLabel fx:id\u003d\"monthAndYear\" alignment\u003d\"CENTER\" text\u003d\"Label\" textFill\u003d\"#fffefe\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendarGrid\" layoutY\u003d\"117.0\" AnchorPane.bottomAnchor\u003d\"20.0\" AnchorPane.leftAnchor\u003d\"40.0\" AnchorPane.rightAnchor\u003d\"40.0\" AnchorPane.topAnchor\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 38
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #00A5F0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".event_label {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Arial Black\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 8px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: blue !important;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\" !important;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".dialog-container {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".calendar_pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-background-color:  white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-width: .5;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-color: gray;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".calendar_label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".elisa_dialog {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #00A5F0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".user_dialog {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7,
      "-": 168,
      "Icesiolz": 46
    }
  },
  {
    "path": "src/main/resources/view/ElisaDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_LEFT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" styleClass\u003d\"elisa_dialog\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"elisa_dialog\" maxHeight\u003d\"1.7976931348623157E308\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/resources/view/ElisaReminderBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: rgba(238, 148, 148, 0.85); -fx-background-radius: 20,20,20,20;\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "blimyj": 31
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"407.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cPane fx:id\u003d\"priorityPane\" maxHeight\u003d\"30.0\" maxWidth\u003d\"40.0\" minHeight\u003d\"30.0\" minWidth\u003d\"40.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cLabel fx:id\u003d\"priorityLabel\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_priority\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Pane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cImageView fx:id\u003d\"statusIcon\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cImageView fx:id\u003d\"eventIcon\" layoutY\u003d\"8.800000190734863\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"8.799999809265138\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"4.8\" AnchorPane.topAnchor\u003d\"8.800000190734863\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"event_label\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"4.8\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cFont name\u003d\"Titan One\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 67
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/ItemListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 36
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"314.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ELISA\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        \u003cImage url\u003d\"@/images/ElisaImageWithoutWords.PNG\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cScene fx:id\u003d\"scene\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cPane maxHeight\u003d\"110.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"110.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"110.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cImageView fx:id\u003d\"elisaImage\" fitHeight\u003d\"80.0\" fitWidth\u003d\"90.0\" layoutX\u003d\"12.0\" layoutY\u003d\"9.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/ElisaImageWithoutWords.PNG\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cText fx:id\u003d\"elisaDescription\" fill\u003d\"#8de7fd\" layoutX\u003d\"80.0\" layoutY\u003d\"65.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Exceptionally Loud n\u0027 Intelligent\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                        \u003cFont name\u003d\"HP Simplified Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cText fx:id\u003d\"elisaText\" fill\u003d\"#10b3d7\" layoutX\u003d\"80.0\" layoutY\u003d\"45.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"ELISA\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                        \u003cFont name\u003d\"Franklin Gothic Demi\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                \u003cText fx:id\u003d\"elisaDescription2\" fill\u003d\"#8de7fd\" layoutX\u003d\"80.0\" layoutY\u003d\"80.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Student Assistant \"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                              \u003cFont name\u003d\"HP Simplified Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/Pane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" layoutY\u003d\"110.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"440.0\" minWidth\u003d\"300.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"result-display\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"110.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" layoutY\u003d\"550.0\" maxHeight\u003d\"50.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"50.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"300.0\" layoutY\u003d\"-1.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"300.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cTabPane fx:id\u003d\"viewsPlaceholder\" styleClass\u003d\"tab-pane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"T\" text\u003d\"(T)ask\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"E\" text\u003d\"(E)vent\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"R\" text\u003d\"(R)eminder\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"C\" text\u003d\"(C)alendar\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"23.200000000000045\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"19.200000000000045\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 8,
      "-": 25,
      "Icesiolz": 93
    }
  },
  {
    "path": "src/main/resources/view/OpenItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #383838;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    \u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" style\u003d\"-fx-text-fill: #00A5F0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u003cLabel fx:id\u003d\"itemdetails\" style\u003d\"-fx-text-fill: white\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$itemdetails\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 31,
      "sianghwee": 9
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"407.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cPane fx:id\u003d\"priorityPane\" maxHeight\u003d\"30.0\" maxWidth\u003d\"40.0\" minHeight\u003d\"30.0\" minWidth\u003d\"40.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cLabel fx:id\u003d\"priorityLabel\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_priority\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Pane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cImageView fx:id\u003d\"statusIcon\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cImageView fx:id\u003d\"eventIcon\" layoutY\u003d\"8.800000190734863\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"8.799999809265138\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"4.8\" AnchorPane.topAnchor\u003d\"8.800000190734863\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"event_label\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"4.8\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cFont name\u003d\"Titan One\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 67
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "           styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "  \u003cScrollPane fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              prefHeight\u003d\"392.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              prefWidth\u003d\"435.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  prefHeight\u003d\"441.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  prefWidth\u003d\"507.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  styleClass\u003d\"dialog-container\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Icesiolz": 24
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"407.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cPane fx:id\u003d\"priorityPane\" maxHeight\u003d\"30.0\" maxWidth\u003d\"40.0\" minHeight\u003d\"30.0\" minWidth\u003d\"40.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cLabel fx:id\u003d\"priorityLabel\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_priority\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/Pane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cImageView fx:id\u003d\"statusIcon\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cImageView fx:id\u003d\"eventIcon\" layoutY\u003d\"8.800000190734863\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"8.799999809265138\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"4.8\" AnchorPane.topAnchor\u003d\"8.800000190734863\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"event_label\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"4.8\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cFont name\u003d\"Titan One\" size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                     \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "               \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 67
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/UserDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" styleClass\u003d\"user_dialog\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/resources/view/WhiteTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(#white, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    background-color: #white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #00A5F0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #f2f2f2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #d9d9d9;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background: white;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".event_label {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Arial Black\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 8px;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: blue !important;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(whitesmoke, 20%);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Comic Sans MS\" !important;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".dialog-container {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 30%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: derive(white, 30%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(white, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(grey, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: derive(whitesmoke, 50%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".calendar_pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color:  white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: .5;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: gray;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".calendar_label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".elisa_dialog {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #00A5F0;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".user_dialog {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #4d4d4d;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 20, 20, 20, 20;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: white white white white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-color: #383838 #383838 black #383838;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 221
    }
  },
  {
    "path": "src/main/resources/view/tabpane.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 1
    }
  },
  {
    "path": "src/test/java/seedu/elisa/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/core/item/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.elisa.commons.core.item.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.PNG\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/elisa/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ElisaCommandHistoryManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonItemStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage jsonItemStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                new JsonItemStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jsonItemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        ElisaCommandHistory historyManager \u003d new ElisaCommandHistoryManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model \u003d new ItemModelManager(storage.toModelType(), userPrefsStorage.readUserPrefs().get(), historyManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage jsonItemStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                new JsonItemStorageIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                                      ItemModel expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        ItemModel expectedModel \u003d new ItemModelManager(model.getItemStorage(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                new UserPrefs(), model.getElisaCommandHistory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @see #assertCommandSuccess(String, String, ItemModel)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                      String expectedMessage, ItemModel expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static class JsonItemStorageIoExceptionThrowingStub extends JsonItemStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        private JsonItemStorageIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 23,
      "mannggoo": 3,
      "sianghwee": 16,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model \u003d new ItemModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item validItem \u003d new TestItemBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemModel expectedModel \u003d new ItemModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        expectedModel.addItem(validItem);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assertCommandSuccess(new AddCommand(validItem), model,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validItem), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Can\u0027t test for this yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 11,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "//import seedu.address.model.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //SHOULD BE --\u003e private class ModelStub implements ItemModel {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Currently I just put this so that i don\u0027t have to implement all the methods in ItemModel."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private class ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        public void updateViewList(String targetList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 6,
      "mannggoo": 21,
      "-": 161,
      "Icesiolz": 4
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DESCRIPTION_1 \u003d \"homework\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DESCRIPTION_2 \u003d \"do all my homework\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_EVENT_1 \u003d \"2018-12-30T19:34:50.63\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_EVENT_2 \u003d \"2018-12-30T19:34\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_REMINDER_1 \u003d \"2018-12-30T19:34:50.63\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_REMINDER_2 \u003d \"2018-12-30T19:34\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_HIGH \u003d \"hIgH\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_MEDIUM \u003d \"mEDIUM\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_LOW \u003d \"low\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_TAG_1 \u003d \"necessary\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_TAG_2 \u003d \"123necessary\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DURATION_NULL \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DESCRIPTION_DESC_1 \u003d VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DESCRIPTION_DESC_2 \u003d VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_DESC_1 \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_DESC_2 \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_DESC_1 \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER_1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_DESC_2 \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER_2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_HIGH \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_MEDIUM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MEDIUM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_LOW \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TAG_DESC_1 \u003d \" \" + PREFIX_TAG + VALID_TAG_1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TAG_DESC_2 \u003d \" \" + PREFIX_TAG + VALID_TAG_2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_EVENT_DESC \u003d \"monday\"; // must be of the LocalDateTime.parse() format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_REMINDER_DESC \u003d \"01/02/2018\"; // must be of the LocalDateTime.parse() format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \"very very high\"; // must be a single word high/medium/low"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \"@prepare-ahead\"; // \"@\"/\"-\" symbols not allowed. Only alphanumeric."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"-d  -r  -p  -t \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final EditCommand.EditItemDescriptor ITEM_1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final EditCommand.EditItemDescriptor ITEM_2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ITEM_1 \u003d new EditItemDescriptorBuilder().withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_1, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_1)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ITEM_2 \u003d new EditItemDescriptorBuilder().withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_2, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItemModel actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            ItemModel expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ItemModel, CommandResult, ItemModel)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItemModel actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            ItemModel expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandFailure(Command command, ItemModel actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage expectedAddressBook \u003d actualModel.getItemStorage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        List\u003cItem\u003e expectedVisualList \u003d new ArrayList\u003c\u003e(actualModel.getVisualList().getList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getItemStorage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assertEquals(expectedVisualList, actualModel.getVisualList().getList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "lrchema": 11,
      "mannggoo": 48,
      "sianghwee": 2,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private ItemModel model \u003d new ItemModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Updates {@code model}\u0027s filtered list to show no one"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 6,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     //Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     //but smaller than size of address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 7,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 3,
      "lrchema": 3,
      "mannggoo": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 7,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel expectedModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "mannggoo": 5,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_COMMAND_FORMAT, ()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 65,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Also covers: Reusing of the tokenizer multiple times"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Also covers: testing for prefixes not specified as a prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 8,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 6,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/elisa/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 3,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/elisa/model/ItemModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.EventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.ReminderList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.elisa.model.item.TaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemModelManager testModel \u003d new ItemModelManager(new ItemStorage(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            new UserPrefs(), new ElisaCommandHistoryManager());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item.ItemBuilder template \u003d new Item.ItemBuilder().setItemDescription(new ItemDescription(\"test\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Item validItem \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setItemDescription(new ItemDescription(\"test\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setTask(new Task(false))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setEvent(new Event(LocalDateTime.now(), Duration.ZERO))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            .setReminder(new Reminder(LocalDateTime.now())).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testConstructor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(new ItemStorage(), testModel.getItemStorage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(new UserPrefs(), testModel.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(new ElisaCommandHistoryManager(), testModel.getElisaCommandHistory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.setUserPrefs(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(guiSettings, testModel.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.setItemStorageFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setItemStorageFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(path, testModel.getItemStorageFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_taskList_changeToTaskList() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.getVisualList() instanceof TaskList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_eventList_changeToEventList() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.getVisualList() instanceof EventList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_reminderList_changeToReminderList() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.getVisualList() instanceof ReminderList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList_invalidValue_throwIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e testModel.setVisualList(\"B\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem_nullItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testModel.addItem((Item) null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validTask_addedToTaskList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item validTask \u003d template.setTask(new Task(false)).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(validTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validEvent_addedToEventList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item validEvent \u003d template.setEvent(new Event(LocalDateTime.now(), Duration.ZERO)).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(validEvent);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validReminder_addedToReminderList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item validReminder \u003d template.setReminder(new Reminder(LocalDateTime.now())).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(validReminder);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_itemDoesNotBelongInVisualList_visualListEmpty() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item validReminder \u003d template.setReminder(new Reminder(LocalDateTime.now())).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validReminder);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addToSeparateList_validItem_addedToAllList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addToSeparateList(validItem);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"C\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(1, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void deleteItem_validIndex_deletedFromAllList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validItem);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(validItem, testModel.deleteItem(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"T\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"E\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"C\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(0, testModel.getVisualList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // should not reach this loop as it is already tested above"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem_validItem_itemReplaced() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(validItem);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item newItem \u003d template.setTask(new Task(true)).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.replaceItem(validItem, newItem);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        System.out.println(testModel.hasItem(newItem));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(testModel.hasItem(newItem));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_priorityModeCurrentlyOff_priorityModeOn() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(false)).build());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertTrue(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_priorityModeCurrentlyOn_priorityModeOff() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(false)).build());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_noTaskInList_priorityModeOff() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_noIncompleteTaskInList_priorityModeOff() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(true)).build());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void togglePriorityMode_onIncorrectList_throwsIllegalListException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.setVisualList(\"R\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertThrows(IllegalListException.class, () -\u003e testModel.togglePriorityMode());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void markComplete_incompleteTask_markTaskAsComplete() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(false)).build());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.markComplete(0);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertTrue(testModel.getItem(0).getTask().get().isComplete());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void done_inPriorityMode_finishAllTask() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(false)).build());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.markComplete(0);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.getPriorityMode().getValue());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void delete_inPriorityMode_finishAllTask() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(false)).build());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.deleteItem(0);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertFalse(testModel.getPriorityMode().getValue());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void done_inPriorityMode_getNextTask() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(false)).build());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item lowPriority \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemPriority(Priority.LOW)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemDescription(new ItemDescription(\"Low priority\"))"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setTask(new Task(false))"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(lowPriority);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.markComplete(0);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(lowPriority, testModel.getVisualList().get(0));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void delete_inPriorityMode_getNextTask() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(template.setTask(new Task(false)).build());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item lowPriority \u003d new Item.ItemBuilder()"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemPriority(Priority.LOW)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setItemDescription(new ItemDescription(\"Low priority\"))"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .setTask(new Task(false))"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        testModel.addItem(lowPriority);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.togglePriorityMode();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            testModel.deleteItem(0);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            assertEquals(lowPriority, testModel.getVisualList().get(0));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fail(e);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 325
    }
  },
  {
    "path": "src/test/java/seedu/elisa/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        differentUserPrefs.setItemStorageFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 3,
      "lrchema": 1,
      "sianghwee": 3,
      "mannggoo": 1,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/elisa/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setItemStorageFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "sianghwee": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/elisa/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "lrchema": 4,
      "mannggoo": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/elisa/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "sianghwee": 1,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/elisa/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage itemStorage \u003d new JsonItemStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storageManager \u003d new StorageManager(itemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void itemStorageReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage original \u003d new ItemStorage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storageManager.saveItemStorage(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage retrieved \u003d storageManager.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertNotNull(storageManager.getItemListFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 4,
      "sianghwee": 18,
      "mannggoo": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 5,
      "lrchema": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/EditItemDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.commands.EditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class EditItemDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private EditItemDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder(EditItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.descriptor \u003d new EditItemDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder(Item item) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setDescription(item.getItemDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTask(item.getTask().orElse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setEvent(item.getEvent().orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setReminder(item.getReminder().orElse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTags(item.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setDescription(new ItemDescription(description));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withTask(boolean complete) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        descriptor.setTask(new Task(complete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withEvent(String start, String duration) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event processedEvent \u003d getEvent(start, duration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setEvent(processedEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder processedReminder \u003d getReminder(dateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setReminder(processedReminder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the {@code priority} into a {@code priority} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Priority newPriority \u003d Priority.valueOf(priority);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        descriptor.setPriority(newPriority);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptor build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Priority getPriority(String p) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority priority \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(p).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as priority given is valid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Event getEvent(String start, String duration) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            event \u003d ParserUtil.parseDateTime(start).get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as start format should be valid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Leave empty as of now, currently we don\u0027t deal with parsing duration"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //event \u003d event.changeDuration(Duration.of(...) );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder getReminder(String itemReminder) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reminder \u003d ParserUtil.parseReminder(itemReminder).get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Should not enter here as itemReminder format should be valid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 16,
      "lrchema": 10,
      "mannggoo": 113
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TestItemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.elisa.commons.core.item.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "//import seedu.elisa.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class TestItemBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Do 2103T Quiz\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_EVENT \u003d \"2019-09-26T23:59\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_REMINDER \u003d \"2019-09-25T23:59\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"HIGH\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_EVENT_DURATION \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemDescription description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Priority priority; // priority of the Item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description \u003d new ItemDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority \u003d Priority.valueOf(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        event \u003d processEvent(DEFAULT_EVENT, DEFAULT_EVENT_DURATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        reminder \u003d processReminder(DEFAULT_REMINDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Initializes the TestItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description \u003d itemToCopy.getItemDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority \u003d itemToCopy.getPriority();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        event \u003d itemToCopy.getEvent().orElse(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        reminder \u003d itemToCopy.getReminder().orElse(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(itemToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code desc} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.description \u003d new ItemDescription(desc);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the {@code priority} into a {@code Priority} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public TestItemBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.priority \u003d Priority.valueOf(priority);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code itemEvent} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public TestItemBuilder withEvent(String itemEvent, String duration) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.event \u003d processEvent(itemEvent, duration);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code itemReminder} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withReminder(String itemReminder) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.reminder \u003d processReminder(itemReminder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Builds a new Item object with the given descriptions"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Item with the given descriptors"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        itemBuilder.setItemPriority(priority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setEvent(event);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setReminder(reminder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Should not enter here as all the arguments are valid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes a {@code datetime}, a {@code duration} and a {@code itemPriority} to generate an appropriate Event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param datetime start DateTime of this Event"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param duration of this Event"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event with the given parameters"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Event processEvent(String datetime, String duration) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            event \u003d ParserUtil.parseDateTime(datetime).get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // should not enter here as DEFAULT_EVENT are of the correct format."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the {@code itemReminder} given to generate an appropriate Reminder with the dateTime given."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param itemReminder representing the DateTime of the reminder"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Reminder with the given date and time"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder processReminder(String itemReminder) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reminder \u003d ParserUtil.parseReminder(itemReminder).get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as DEFAULT_REMINDER is of the correct format"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 21,
      "lrchema": 9,
      "mannggoo": 116
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "blimyj": 10,
      "lrchema": 4,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/elisa/testutil/TypicalItems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_DURATION_NULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_EVENT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_EVENT_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_REMINDER_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_REMINDER_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_TAG_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.logic.commands.CommandTestUtil.VALID_TAG_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.commons.core.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.model.ItemStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class TypicalItems {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item HOMEWORK \u003d new TestItemBuilder().withDescription(\"Do all homework\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(\"2018-12-30T19:34:50.63\", null)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(\"2018-12-29T19:34:50.63\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item EXAM \u003d new TestItemBuilder().withDescription(\"Final Exam\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(\"2019-10-30T12:00\", null)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(\"2019-10-29T12:00\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Manually added - Item\u0027s detail found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item ITEM_1 \u003d new TestItemBuilder().withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_1, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item ITEM_2 \u003d new TestItemBuilder().withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(VALID_EVENT_2, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(VALID_REMINDER_2)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private TypicalItems() {} //prevents instantiation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns an {@code ItemStorage} with all the typical persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemStorage getTypicalItemList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (Item item : getTypicalItems()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemStorage.add(item);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static List\u003cItem\u003e getTypicalItems() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HOMEWORK, EXAM));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 14,
      "mannggoo": 42,
      "sianghwee": 6
    }
  },
  {
    "path": "src/test/java/seedu/elisa/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/elisa/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.elisa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import static seedu.elisa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.elisa.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003c?import seedu.elisa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003cfx:root type\u003d\"seedu.elisa.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "-": 5
    }
  }
]
