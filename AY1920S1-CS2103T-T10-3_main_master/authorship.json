[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d ELISA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T10-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-T10-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Extremely Loud and Intelligent Student Assistant (ELISA) is for students who *want to have an intelligent companion that keeps track of tasks and give friendly reminders on when to take breaks*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* More importantly, ELISA is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ELISA can get your tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Built on AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 1,
      "mannggoo": 4,
      "-": 30
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    archiveName \u003d \u0027ELISA_v1.2.1.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "sianghwee": 1,
      "-": 153
    }
  },
  {
    "path": "data/jokes.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "You."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I used to breed rabbits. Then I realized they can handle it themselves."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "My dog is an awesome fashion adviser. Every time I ask him what I look like in my clothes, he says “WOW!”"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why are eggs not very much into jokes? Because they could crack up."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Barkeep: I’m sorry, we never serve time travelers. A time traveler walks into a bar."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What is written on a dentist’s grave? He’s filling his last cavity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Meanwhile in a parallel universe: “Oh for God’s sake! Where are all these extra single socks coming from?!”"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a boomerang that doesn\u0027t come back? A stick."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How many tickles does it take to make an octopus laugh? 10-tickles."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How does Moses make coffee? Hebrews it."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I’m positive I just lost an electron. Better keep an ion that."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do you invite a dinosaur for lunch? Tea, Rex?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Who invented King Arthur’s round table? Sir Cumference."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I’m super friendly with 25 letters of the alphabet. I just don’t know why."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do turtles communicate with each other? With shell phones."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s so great about whiteboards? If you think about it, they’re pretty re-markable!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Why did the mathematician work from home? Because he could only function in his domain."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Will glass coffins be a success? Remains to be seen."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "You know what really bugs me? Insect puns."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I was wondering why the ball was getting bigger. Then it hit me."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\"I have a split personality,\" said Tom, being frank."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What’s the difference between a hippo and a zippo? One is really heavy, and the other is a little lighter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Last night, I dreamed I was swimming in an ocean of orange soda. But it was just a Fanta sea."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I can’t believe I got fired from the calendar factory. All I did was take a day off!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call a bee that can’t make up its mind? A maybe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I tried to sue the airline for losing my luggage. I lost my case."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "A mean crook going down stairs \u003d A condescending con, descending"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "How do you throw a space party? You planet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "what did the astronaut say when he was interviewed? No comet."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What washes up on tiny beaches? Microwaves."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I was going to make a chemistry joke, but all the good ones Argon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Sleeping comes so naturally to me, I could do it with my eyes closed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "What do you call an alligator in a vest? An investigator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I used to be indecisive; now I\u0027m not so sure."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "I got a new thesaurus; not only is it bad, it’s bad."
      }
    ],
    "authorContributionMap": {
      "lrchema": 35
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA _(Exceptionally Loud and Intelligent Student Assistant)_ - Was developed by the https://github.com/AY1920S1-CS2103T-T10-3[T10-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA is a student assistant made for college students who need constant reminders to complete their daily tasks. More importantly, ELISA is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "We are a student team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Bryan Lim"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::blimyj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/blimyj[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Commons"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Hema"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::lrchema.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/lrchema[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Functionality"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lim Yu Hui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::mannggoo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/mannggoo[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Low Cheng Yi"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::Icesiolz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/Icesiolz[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Ng Siang Hwee"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::sianghwee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "{empty}[http://github.com/sianghwee[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 21,
      "-": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T10-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* *Email us* : You can also reach us at `holmescordelia8 [at] gmail.com`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d ELISA - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "By: `AY1920S1-CS2103T-T10-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Item` : Used by classes to represent a task, event, reminder or any combination of the three."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Task` : Used by classes to store, access and modify details regarding tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Events` : Used by classes to store, access and modify details regarding events."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* `Reminders` : Used by classes to store, access and modify details regarding reminders."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::LogicComponentUML.png[]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::LogicComponentUML.png[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  `Logic` uses the `ElisaParser` class to parse the user command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  The command execution can affect the `ItemModel` (e.g. adding a person)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".  More instructions for the `Ui` can be given through implementing `ScrollCommand`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* stores the Item Storage data"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* exposes four observable lists that can be viewed by the Ui and will cause an update in the Ui when it is updated"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The reason for using four observable list as opposed to having one observable list that is filtered every time we update the list is because we believe that this will lead to faster loading time every time we switch view as it is just a change in the Visualization List pointer. This is better than the O(n) method of filtering a single VisualizeList as it will require going through all the items in the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* can save the Item Storage data in json format and read it back."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::undobyreverse[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d [Implemented] Undo Feature"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation Logic"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The undo function uses the revert command method without using states and history, unlike the proposed method."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lrchema"
        },
        "content": "This is because an issue was encountered with referencing lists and firing reminders multiple times when the state history method was used."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lrchema"
        },
        "content": "In this implementation, the commands that can be undone; that is, all the commands except `UndoCommand`, `ExitCommand`,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lrchema"
        },
        "content": "`UpCommand` and `DownCommand` now extend from an abstract class `UndoableCommand`, which is a subclass of Command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Subclasses of `UndoableCommand` must implement a method `reverse(ItemModel model)`, which should do the exact opposite"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lrchema"
        },
        "content": "of the `execute(ItemModel model)` in that Command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lrchema"
        },
        "content": "The command execution history is stored in a stack, which is maintained in `ElisaCommandHistory`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Below is a possible usage scenario and the app behaviour."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 1. The user executes `task eat`. A task with description \"eat\" is added and then the command is pushed into the commands stack."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::UndoStackStep1.png[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 2. The user realises that adding the task was a mistake, and decides to undo by entering `undo` into ELISA. The `undo` command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lrchema"
        },
        "content": "will pop the `AddTaskCommand` from the stack and reverse the effects of that command, in this case by deleting the task \"eat\" from the `TaskList`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lrchema"
        },
        "content": "image::UndoStackStep2.png[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Step 3. After successful execution of the `UndoCommand` a confirmation message is displayed in the chat box."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "// tag:: priority[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Priority Mode"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The priority mode is used to aid the user in focusing on the most pressing task that they have especially when they have many tasks in their list. As priority mode is only for clearing of tasks, the priority mode can only be activated at the task pane of the application."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The priority mode is mainly controlled in the ```ItemModelManager``` and the following are the methods it implements within the ```ItemModelManager```:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#togglePriorityMode()``` - Toggle the priority mode depending on whether it is on or off."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#toggleOnPriorityMode()``` - Helper function to toggle on the priority mode."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#toggleOffPriorityMode()``` - Helper function to toggle off the priority mode."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "There are two variants to the priority mode, a normal priority mode that is controlled fully by the user and a scheduled priority mode that is triggered by the user but is scheduled to turn off after a specific amount of time. In addition to using the above three methods, the ```ScheduledPriorityMode``` also uses the following method:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* ```ItemModelManager#startTimer(LocalDateTime)``` - Starts a timer to turn off the priority mode."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Example run of code"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "In the following section, we will be showing a run of the priority mode and the behaviour of the mechanism at each step. In particular, we will be showing how the ```ScheduledPriorityMode``` works as it requires more step through the sequence diagram as compared to the ```PriorityMode```."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 1. The user opens his ELISA software. The first screen that he observes will be the task screen which contains all the task of the user based on the time they were added into the list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 2. The user types ```priority 30.min.later``` into the command box of ELISA and hits enter. The list is instantly shrink to show only the most pressing task (i.e. the task with the highest priority). If two tasks have the same priority, either of the task will be shown as there is no other way for ELISA to compare between the two task."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 3. ELISA will automatically disable the priority mode after 30 minutes and show *all* the task that the user have in his task list currently."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "The figure below shows the sequence diagram on what happens from a simple execution of the ```priority 30.min.later``` command."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Sequence diagram for priority mode"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityMode.png[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Internal working of the command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Referring to _Fig 3.2.2.a_, we will be going through step by step the internal mechanism of the execution of the ```ScheduledPriorityCommand```."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 1. When the user types in the command, the ```LogicManager``` takes in the command as a string and pass it to the ```AddressBookParser```"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 2. The ```AddressBookParser``` parses the string and determine whether the command is that of a normal ```PriorityCommand``` or a ```ScheduledPriorityCommand```. In this case, the command is that of a ```ScheduledPriorityCommand``` and so a new ```ScheduledPriorityCommand``` is created. This ```ScheduledPriorityCommand``` is passed back to the ```LogicManager```. (Despite the fact that this is a ```ScheduledPriorityCommand```, the following steps marked with a * are also applicable to a normal ```PriorityCommand```)."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 3*. Within the ```LogicManager```, the ```ScheduledPriorityCommand#execute()``` method is called and the command is executed."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 4. The ```ScheduledPriorityCommand``` calls the ```ItemModel#scheduleOffPriorityMethod()``` which creates a new ```Timer``` object and a new ```TimerTask``` object. The ```TimerTask``` object will be scheduled to fire off at a specific time, which in this case is 30 minutes later (as defined by the user)."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 5*. The ```SchedulePriorityCommand``` then calls ```ItemModel#togglePriorityMode()``` which calls the private method ```ItemModel#toggleOnPriorityMode()``` (since the current state of the priority mode is false)."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 6*. This creates a new ```TaskList``` which will be the visualization list for the Task Panel throughout the entire priority mode period."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 7*. A ```CommandResult``` is passed to the ```ScheduledPriorityCommand``` and then back to the ```LogicManager``` to be passed into the ```Ui```, informing the user that the priority mode is activate."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "(At this point, a normal ```PriorityCommand``` will end the sequence diagram here and will only be deactivated by the user\u0027s input of ```priority``` again.)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".Sequence diagram for the scheduled turning off of priority mode"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "image::PriorityMode2.png[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 8. As the ```Timer``` within the ```ItemModelManager``` is still running on a separate thread, it will trigger the ```TimerTask#run()``` when the user defined time is reached."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 9. The ```TimerTask``` will call ```ItemModelManager#toggleOffPriorityMode()``` which will cancel the ```Timer``` and destroy the ```Timer```. This is to ensure that the program can be closed properly."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Step 10. The items are all added back into the ```TaskList``` and the priority mode is considered deactivated."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Aspect: How to turn off the priority mode after a fixed time"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* **Alternative 1:** Having two different classes for activating the priority mode, a normal ```PriorityCommand``` and a ```ScheduledPriorityCommand``` that extends from the ```PriorityCommand```. The timer will be activated in the ```ScheduledPriorityCommand```."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Pros: Adhere to the SLAP principle with each class having it\u0027s own implementation of the ```Command#execute(ItemModel)```. This makes it easier to maintain the code and prevents from overloading the ItemModel by keeping the timer there."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Cons: There is no way to end the ```ScheduledPriorityCommand``` as the timer is kept within the command and so cannot be cancelled prematurely as there is no way to access the command after that."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* **Alternative 2 (Current choice)**: Having a timer within the ```ItemModelManager``` and having a specific method within the ```ItemModelManager``` to handle this creation of the timer."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Pros: The scheduled priority mode can be controlled within the ```ItemModelManager``` and can then be controlled within the class such that it can be cancelled when it is done."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** Cons: This implementation will clutter the ```ItemModelManager``` further and make it harder for maintaining the code."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Alternative 2 was chosen as we believe that the functionality of the ```ScheduledPriorityMode``` takes priority over the maintainability of the code and should be used first until a better method can be created."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d\u003d Possible extension"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "As of this moment, there is no way to display the status of the priority mode within the ```Ui``` other than through the list. One possible extension is turning have a label to signify that the user is in the priority mode."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "At the moment, there is also no way to inform the user that the priority mode is disabled when it is scheduled to be off. However, this can be solved if the above extension is implemented as it will trigger the message when the mode switches."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "// end:: priority[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Add Task/Event feature"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Task, Events and Reminders are all Items and can be added using the same command. Adding of Items is facilitated by ItemModel#add(Item). +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "A Task with a deadline will also be considered an Event. As such, adding of a task and event will be demonstrated with the use of a single command. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Given below is an example usage scenario of how add behaves at each step: +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 1. The user enters the command `\"task shower -d 1.hour.later\"`. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 2. The LogicManager creates an AddressBookParser to parse the user input. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 3. AddressBookParser creates a AddTaskCommandParser which parses the input and returns an AddCommand. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 4. LogicManager will execute the AddCommand. AddCommand will then invoke `ItemModel#add(Item)`, which adds Task to its TaskList and Event to its EventList. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 5. AddCommand will also trigger a change in view by calling `ItemModel#setVisualList(taskList)`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Step 6. Upon the successful execution of AddCommand, a CommandResult is returned to the LogicManager, which will then be returned to the Ui to render the appropriate view."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "The figures below shows the sequence diagram on what happens from a simple execution of `task shower -d 1.min.later` user command: +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddCommandPart_1.png[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "_Fig 3.4.1a Calling execute in LogicManager_"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "image::AddCommandPart_2.png[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "_Fig 3.4.1b LogicManager executing the command and returns CommandResult_"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Figure 3.4.1b is a continuation of Figure 3.4.1a of the same AddCommand sequence."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* has a need to manage a large number of tasks"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* needs reminders to take breaks or move on to finish all their work"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* prefers to be more organized with their time and tasks"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* prefer desktop apps over other types of apps"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "blimyj"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Value proposition*: manage time and tasks more efficiently than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |add a new task | record tasks that need to be done \u0027some day\u0027"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |mark a task as done | keep track of my remaining tasks"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |delete a task |remove tasks that I no longer need"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |student |add deadline to a task |remember my task deadlines"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |find upcoming tasks |decide what needs to be done"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* * *` |user |find a task by description |find only the tasks that are relevant to me at that point in time"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |new user |view more information about a command |learn how to use various commands"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |forgetful student |be reminded of deadlines |remember to complete them before they are due"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |type my commands in the text |use the app without needing the mouse"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* * *` |user |use the undo function |reverse any changes I made by mistake"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* *` |busy student |see my reminders as notifications|be reminded of them even in other applications"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "|`* *` |user with many tasks |sort tasks by priority |identify which tasks require my immediate attention"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |student |turn on priority mode |focus on only one pressing issue at a time"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |have a software that saves after every action |will not lose information even if I close the program by accident"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |look at a summary of all deadlines in the calendar |see when I am free"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`* *` |user |edit the date of a deadline |fix my mistakes if I type the wrong command"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`*` |stressed student |ask ELISA to tell a joke |feel less stressed when my assistant has a sense of humour"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lrchema"
        },
        "content": "|`*` |user |colour code my calendar events |easily categorise and differentiate between them"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "(For all use cases below, the *System* is `ELISA` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 001: Marking a task as done"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the task list to the user."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User marks the task as done by using the index of the task."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA updates the task list."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "5. ELISA shows the updated task list to the user."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 2a. The task list is empty."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 3a1. ELISA shows an error message."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 002: Adding a task"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User creates a new task with a description."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA informs the user that the task has been added."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1a. User can add deadline."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1a1. ELISA informs the user that a deadline has been added to that task."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1b. User can add a reminder date."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1b1. ELISA informs the user that a reminder has been added to that task."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 1c. User enters an empty description."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1c1. ELISA informs the user that the description cannot be empty."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 1c2. User enters a non-empty description"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* a. At any time, User can view the task from the task list or the calendar view."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* b. At any time, User can add a deadline to the task"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* c. At any time, User can add a reminder to the task"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 003: Deleting a task"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the task list."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User request to delete a task based on its index."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA deletes the task from the task list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "5. ELISA shows the updated task list."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 2a. The task list is empty."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "+"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "** 3a1. ELISA shows an error message."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003d\u003d\u003d Use Case 004: Find upcoming reminders."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "1. User enters the command to show the reminder list."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "2. ELISA shows the reminder list."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "3. User enters command to sort reminders by date and time."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "4. ELISA shows the updated list of reminders sorted by date and time."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 005: Search for a task by its description"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the command to show the task list."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA shows the reminder list."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. User enters command to find all matching tasks with the given search term(s)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lrchema"
        },
        "content": "4. ELISA shows a list of tasks with descriptions matching the search term(s)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 4a. There are no matching tasks"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 4a1. ELISA shows that there are 0 items listed"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 006: Undo the last command"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the undo command."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA reverts the last executed command."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. ELISA displays a confirmation message."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 2a. There are no commands to be undone"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 2a1. ELISA displays an error message."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lrchema"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lrchema"
        },
        "content": "\u003d\u003d\u003d Use Case 007: Using Priority Mode"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lrchema"
        },
        "content": "1. User enters the command to enter priority mode."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lrchema"
        },
        "content": "2. ELISA hides all tasks except the one with the highest priority."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lrchema"
        },
        "content": "3. User enters command to set that task as done once they finish it."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lrchema"
        },
        "content": "4. ELISA shows the next highest priority task."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lrchema"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* 1a. User is not viewing the task list"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lrchema"
        },
        "content": "** 1a1. ELISA displays an error message"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lrchema"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "blimyj": 8,
      "lrchema": 102,
      "sianghwee": 178,
      "mannggoo": 33,
      "-": 394,
      "Icesiolz": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003d ELISA - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ":repoURL: https://github.com/ay1920s1-cs2103t-t10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "By: `AY1920S1-CS2103T-T10-3`      Since: `Sep 2019`      Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Extremely Loud and Intelligent Student Assistant (ELISA) is for students who *wants to have an intelligent companion that keeps track of tasks and give friendly reminders on when to take breaks*. More importantly, ELISA is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ELISA can get your tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Download the latest `elisa.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for ELISA."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "image::MainWindow.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* *`list`* : lists all tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "* **`delete`**`3` : deletes the 3rd item shown in the current list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Command Guidelines"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Guidelines: |Description: |Correct usage:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Words in UPPER_CASE are the parameters to be supplied by the user | If given `task DESCRIPTION` description is to be provided. |`task shower`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|All flags *MUST* have a _space_ after them | `task shower -d10.min.later` is *incorrect*. It should be `task shower -d 10.min.later` | `task shower -d 10.min.later`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flags in square brackets are optional | If given `task DESCRIPTION [-t TAG]` tag is optional | `task shower` `task shower -t clean`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flags can be in any order, given that they are accepted by the command | If given `task DESCRIPTION [-d DATETIME] [-r REMINDER]` -r can come before -d | `task shower -d 1.hour.later -r 30.min.later` `task shower -r 30.min.later -d 1.hour.later`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flags must not be repeated in the same input | `task shower -p high -p low` is *incorrect* as -p appears twice | `task shower -p high`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ".Flags Overview"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|Flag: |Parameter: |Parameter Format: |Possible Parameters: | Example Usage:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-d | DATETIME |yyyy-MM-ddTHHmm or dd/MM/yyyy HHmm or mm.min.later or HH.hour.later or dd.day.later |2019-09-25T19:34 or 25/09/2019 1934 or 10.min.later| -d 25/09/2019 1934"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-r | REMINDER |yyyy-MM-ddTHHmm or dd/MM/yyyy HHmm or mm.min.later or HH.hour.later or dd.day.later |2019-09-25T19:34 or 25/09/2019 1934 or 10.min.later| -r 25/09/2019 1934"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-p | PRIORITY |high, medium, low| HIGH, medium, LOW | -p high"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-t | TAG |alphanumeric only | happy123 | -t happy123"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|-desc | DESCRIPTION | alphanumeric only | drink 5 litres of water | -desc"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--tk | _none_ | _none_ | _none_ | --tk"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--e | _none_ | _none_ | _none_ | --e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|--r | _none_ | _none_ | _none_ | --r"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Not all tags work for every command. Please check the specific command for more details."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Adding a task: `task`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds a task to the task list +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `task DESCRIPTION [-d DATETIME] [-r REMINDER] [-p PRIORITY] [-t TAG]`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "To create a task quickly, just include the description as Task can have no flags (ie `task shower`)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins -r 5.hour.later`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `task eat my vitamins -d 10.hour.later -p low -t healthy`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Adding an event: `event`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds an event to events list and calendar +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `event DESCRIPTION -d DATETIME [-r REMINDER] [-p PRIORITY] [-t TAG]`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 20/09/2019 1800`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 20/09/2019 1800 -r 19/09/2019 1800`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `event John’s Birthday -d 3.day.later -r 2.day.later -p high -t friend`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Adding a reminder: `reminder`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Adds a reminder to the reminder list +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `reminder DESCRIPTION -r REMINDER [-t TAG]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John’s Birthday -r 19/09/2019 14:00`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John’s Birthday -r 2019-09-19T14:00 -t friend`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `reminder John\u0027s Birthday -r 3.day.later`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Show the specified category : `show`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Shows the specified category by switching the view to the given list. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `show [t] [e] [c] [r] (Exactly one flag must be used with this command)\u0027\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show t`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show e`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show r`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show c`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Editing an item : `edit`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "This command is used to edit any of the items that you might have. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d *Limitations* +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* You are only able to edit the item currently shown in your view. For example, when you\u0027re on the task list, you can only edit the tasks shown. You will not be able to edit events or reminders."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* The new item with the edited fields must not already exist."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Format: `edit INDEX [-desc DESCRIPTION] [-d DATETIME] [-r REMINDER] [-p PRIORITY] [-t TAG]...`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in currently viewed list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `edit 1 -desc read books -d 3.day.later -p low` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Edits item 1 of the current list. Changes the description to `read books`, deadline to `3.day.later` and priority to `low`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `edit 3 -desc CS2103 team meeting -r 3.hour.later -p high` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Edits item 2 of the current list. Changes the description to `CS2103 team meeting`, reminder to `3.hour.later` and priority to `high`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Deleting a reminder/task/event : `delete`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Deletes the reminder/task/event from ELISA. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* Deletes the item at the specified `INDEX` of the current list shown."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* The index refers to the index number shown in the list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* No flags should be given with this command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "* `show r` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "Deletes the 2nd reminder in the shown reminder list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lrchema"
        },
        "content": "// tag::undo[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "\u003d\u003d\u003d Undoing the latest modification(s) : `undo`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Reverts the latest commands given on the ELISA. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Format: `undo [number of commands]`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* Omitting the number reverts the last one command"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* The number of commands must be *at most 20*"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* The number *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lrchema"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `undo` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Undoes the last command"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lrchema"
        },
        "content": "* `undo 2` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lrchema"
        },
        "content": "Undoes the last 2 commands"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "ELISA saves the data in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      }
    ],
    "authorContributionMap": {
      "lrchema": 16,
      "mannggoo": 84,
      "-": 94,
      "Icesiolz": 11
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteItem(index)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveItemStorage(itemStorage, filepath)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "Icesiolz": 2
    }
  },
  {
    "path": "docs/diagrams/ItemClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam arrowColor ITEM_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "skinparam classBackgroundColor ITEM_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Commons {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Core {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package Item {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Item"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class Reminder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "class ItemDescription"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "enum Priority {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    HIGH"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    MEDIUM"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    LOW"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "\u0027/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "blimyj": 54
    }
  },
  {
    "path": "docs/diagrams/PriorityMode.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"p:ScheduledPriorityCommand\" as ScheduledPriorityCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"timer:Timer\" as Timer MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":TimerTask\" as Task MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[-\u003e LogicManager : execute(priority 30.min.later)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(priority 30.min.later)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create ScheduledPriorityCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "AddressBookParser -\u003e ScheduledPriorityCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand --\u003e AddressBookParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "AddressBookParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "LogicManager -\u003e ScheduledPriorityCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate ScheduledPriorityCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand -\u003e Model : scheduleOffPriorityMode(LocalDateTime)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create Timer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : new Timer()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Timer --\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Timer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "create Task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Task : new TimerTask()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Task --\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : schedule(TimerTask, LocalDateTime)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand -\u003e Model : togglePriorityMode()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Model: toggleOnPriorityMode()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e ScheduledPriorityCommand: CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "ScheduledPriorityCommand --\u003e LogicManager: CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy ScheduledPriorityCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[\u003c--LogicManager : CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 70
    }
  },
  {
    "path": "docs/diagrams/PriorityMode2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \"timer:Timer\" as Timer MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "participant \":TimerTask\" as Task MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Timer -\u003e Task : run()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Task -\u003e Model : toggleOffPriorityMode()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "Model -\u003e Timer : cancel()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "destroy Timer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 21
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class TaskListCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class EventListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class EventListCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ReminderListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ReminderListCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class ElisaDialogBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "Class UserDialogBox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e EventListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow *-down-\u003e ReminderListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ResultDisplay *-down-\u003e ElisaDialogBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ResultDisplay *-down-\u003e UserDialogBox"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListPanel -down-\u003e TaskListCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListPanel -down-\u003e EventListCard"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListPanel -down-\u003e ReminderListCard"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListCard --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "TaskListCard ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "EventListCard ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "ReminderListCard ..\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "Icesiolz": 31
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR #3333C4"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "!define ITEM_COLOR_T4 #101086"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "blimyj": 7,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ElisaCommandHistoryManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.storage.ItemListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.storage.JsonItemStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    protected ItemModel model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    protected ElisaCommandHistory commandHistory;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemListStorage itemListStorage \u003d new JsonItemStorage(userPrefs.getItemStorageFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage \u003d new StorageManager(itemListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        commandHistory \u003d new ElisaCommandHistoryManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemModel initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, ElisaCommandHistory stateHistory) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage initialData;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d storage.toModelType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d new ItemStorage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            initialData \u003d new ItemStorage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new ItemModelManager(initialData, userPrefs, stateHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Bryan Reminder"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logic.shutdown();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 2,
      "lrchema": 15,
      "sianghwee": 8,
      "mannggoo": 1,
      "-": 161
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The item index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_ITEM_LISTED_OVERVIEW \u003d \"%1$d items listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String MESSAGE_NOTHING_TO_UNDO \u003d \"Nothing to undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_INVALID_FAST_REMINDER_FORMAT \u003d \"Don\u0027t you remember?\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"It should be in the format of \\\"(Positive Integer).(Time unit).later\\\"\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Eg. \\\"3.hour.later\\\" or \\\"10.min.later\\\"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "mannggoo": 4,
      "sianghwee": 1,
      "-": 11,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/item/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.address.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Event in ELISA."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Duration of Event is 0 by default."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Priority of Event is medium by default."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Duration chosen over Period as Events are unlikely to exceed a day."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final boolean isAutoReschedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final AutoReschedulePeriod period;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs an {@code Event}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param startDateTime A valid LocalDateTime object that denotes the start of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param duration A Duration of the event. Defaults to Duration.ZERO if null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this(startDateTime, duration, false, null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration, boolean isAutoReschedule)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this(startDateTime, duration, isAutoReschedule, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event(LocalDateTime startDateTime, Duration duration, boolean isAutoReschedule,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                 AutoReschedulePeriod period) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.duration \u003d Duration.ZERO;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.endDateTime \u003d startDateTime.plus(this.duration);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.isAutoReschedule \u003d isAutoReschedule;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasAutoReschedule() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return isAutoReschedule;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Set auto reschedule to true if the event should recur/auto-reschedule, false otherwise"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param bool true if event can be auto-rescheduled"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event object with the updated parameters"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event setAutoReschedule(boolean bool) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), getDuration(), bool);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get the reschedule period of this event"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedule period of this event"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AutoReschedulePeriod getPeriod() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Set the reschedule period of this event. This would also set isAutoReschedule of this event to true."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period to set to this event"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event object with the updated parameters"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event setReschedulePeriod(AutoReschedulePeriod period) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), getDuration(), true, period);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event changeStartDateTime(LocalDateTime newStartDateTime) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(newStartDateTime, getDuration(), this.isAutoReschedule, this.period);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Event changeDuration(Duration newDuration) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new Event(getStartDateTime(), newDuration, this.isAutoReschedule, this.period);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nStart DateTime: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getStartDateTime().toString())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(\"\\nEnd DateTime: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getEndDateTime().toString())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getDuration().toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherEvent.getDuration().equals(getDuration());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(startDateTime, endDateTime, duration);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an event object from a JSON string."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the event"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the event object that is created"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Event fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String startDateTimeString \u003d node.get(\"startDateTime\").asText();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime.parse(startDateTimeString);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String durationString \u003d node.get(\"duration\").asText();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Duration duration \u003d Duration.parse(durationString);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Event(startDateTime, duration);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 91,
      "sianghwee": 26,
      "mannggoo": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/item/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.address.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item in Elisa."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: ItemDescription is present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * At least one of the following three fields (Task, Event, Reminder) is present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Reminder reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final ItemDescription itemDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param priority A Priority of the event. Defaults to Priority.MEDIUM if null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Item(Task task, Event event, Reminder reminder,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                 ItemDescription itemDescription, Set\u003cTag\u003e tags, Priority priority) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(itemDescription);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.itemDescription \u003d itemDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (priority !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasTask() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return task !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasEvent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return event !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasReminder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return reminder !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cTask\u003e getTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.task \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cEvent\u003e getEvent() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.event \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (this.reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return Optional.of(this.reminder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ItemDescription getItemDescription() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return itemDescription;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change ItemDescription"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeItemDescription(ItemDescription newItemDescription) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(newItemDescription)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Task referenced"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeTask(Task newTask) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(newTask)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Event referenced"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeEvent(Event newEvent) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(newEvent)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Reminder referenced"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeReminder(Reminder newReminder) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(newReminder)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Change Tags referenced"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changeTags(HashSet\u003cTag\u003e newTags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(newTags)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(priority)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the priority of the item."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param newPriority the new priority for the item."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return new Item with the new priority."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Item changePriority(Priority newPriority) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new ItemBuilder().setItemDescription(itemDescription)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTask(task)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setEvent(event)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setReminder(reminder)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setTags(tags)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .setItemPriority(newPriority)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same task referenced."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameTask(Item otherItem) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getTask().equals(otherItem.getTask());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same Event referenced."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameEvent(Item otherItem) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getEvent().equals(otherItem.getEvent());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same Reminder referenced."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean hasSameReminder(Item otherItem) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return getReminder().equals(otherItem.getReminder());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if both items have the same identity and data fields."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherItem.getTask().equals(getTask())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getReminder().equals(getReminder())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getEvent().equals(getEvent())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getItemDescription().equals(getItemDescription())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 otherItem.getPriority().equals(getPriority());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(task, event, reminder, itemDescription, tags, priority);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nDescription: \")"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(itemDescription.toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getTask().isPresent()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nTask Details: \")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getTask().get().toString());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getEvent().isPresent()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nEvent Details: \")"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getEvent().get().toString());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (getReminder().isPresent()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\n\\nReminder Details: \")"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    .append(getReminder().get().toString());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (tags.size() \u003e 0) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            builder.append(\"\\nTags: \");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getReminderMessage() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(itemDescription.toString())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(\"\\nReminder! \")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getReminder().get().toString());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"Priority: \")"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(priority.toString());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Checks the event in the item to see if it is auto reschedulable."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Requirements: item definitely has an event."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return true if it is auto reschedule, false otherwise."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasAutoReschedule() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return getEvent().get().hasAutoReschedule();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Builder class for Item."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static class ItemBuilder {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // Identity fields"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Task task \u003d null;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Event event \u003d null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        // Data fields"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private ItemDescription itemDescription \u003d null;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        private Priority priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder() {}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setTask(Task task) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setEvent(Event event) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setItemDescription(ItemDescription descriptor) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            requireNonNull(descriptor);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.itemDescription \u003d descriptor;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Consider using a defensive copy of tags, similar to EditCommand in AB3"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            requireNonNull(tags);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public ItemBuilder setItemPriority(Priority priority) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        /**Validates arguments of Item before initialising it"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         * @return A valid Item."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         * @throws IllegalArgumentException If description not provided or task, event and reminder fields are null."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "blimyj"
        },
        "content": "         */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        public Item build() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            Item newItem \u003d new Item(task, event, reminder, itemDescription, tags, priority);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Validation of parameters of object after object has been created."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Validate after object has been created as per StackOverflow link"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //https://stackoverflow.com/questions/38173274/builder-pattern-validation-effective-java"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //However this seems to be contrary to the answer in the following link"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //https://stackoverflow.com/questions/12930852/clearing-doubts-about-the-builder-pattern"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //However it seems safer to follow the first as the object fields could be mutated after it has been copied"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // from the builder to the object."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (newItem.getItemDescription() \u003d\u003d null) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new IllegalArgumentException(\"Description must be provided!\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            if (newItem.getTask() \u003d\u003d null \u0026\u0026 newItem.getEvent() \u003d\u003d null \u0026\u0026 newItem.getReminder() \u003d\u003d null) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                throw new IllegalArgumentException(\"Task, Event \u0026 Reminder cannot all be empty!\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Resetting all constructing parameters back to null, so a new object doesn\u0027t use the parameters of the"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // previous object."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            task \u003d null;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            event \u003d null;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            reminder \u003d null;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemDescription \u003d null;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return newItem;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the item object into a json string."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return string representation of the item"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws JsonProcessingException when the item cannot be converted into a JSON string"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toJson() throws JsonProcessingException {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return JsonUtil.toJsonString(this);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an item object from a JSON string."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the item"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item object that is created"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Item fromJson(String jsonString) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemBuilder temp \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String itemDescriptionString \u003d node.get(\"itemDescription\").toString();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemDescription id \u003d ItemDescription.fromJson(itemDescriptionString);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        temp.setItemDescription(id);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        String priorityString \u003d node.get(\"priority\").asText();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Priority newPriority \u003d Priority.fromJson(priorityString);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        temp.setItemPriority(newPriority);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"task\")) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String taskString \u003d node.get(\"task\").toString();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task t \u003d Task.fromJson(taskString);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setTask(t);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"event\")) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String eventString \u003d node.get(\"event\").toString();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Event e \u003d Event.fromJson(eventString);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setEvent(e);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (node.hasNonNull(\"reminder\")) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String reminderString \u003d node.get(\"reminder\").toString();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Reminder r \u003d Reminder.fromJson(reminderString);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp \u003d temp.setReminder(r);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Set\u003cTag\u003e tagsSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode tags \u003d node.get(\"tags\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Iterator\u003cJsonNode\u003e it \u003d tags.elements();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            tagsSet.add(new Tag(it.next().get(\"tagName\").asText()));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return temp.setTags(tagsSet).build();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deepCopy() throws IOException {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return Item.fromJson(this.toJson());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 367,
      "sianghwee": 65,
      "mannggoo": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/item/ItemDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.address.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s description in ELISA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidItemDescription(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ItemDescription {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        \"ItemDescription should only contain characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs an {@code ItemDescription}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param description A valid item description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ItemDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checkArgument(isValidItemDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Returns true if a given string is a valid item description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static boolean isValidItemDescription(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                || (other instanceof ItemDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                \u0026\u0026 getDescription().equals(((ItemDescription) other).getDescription())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an item description object from a JSON string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the item description"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item description object that is created"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemDescription fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new ItemDescription(node.get(\"description\").asText());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 56,
      "sianghwee": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/item/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.address.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Available priority levels for tasks and events."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    HIGH, MEDIUM, LOW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Creates a Priority object from a string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param priorityString the string that represents the Priority"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return the Priority object that is created"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public static Priority fromJson(String priorityString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return valueOf(priorityString);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/item/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.address.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Reminder in ELISA."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param dateTime A valid LocalDateTime object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Changes the dateTime that the reminder occurs. Removes the previous reminder so it does not occur."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param dateTime A LocalDateTime object which dictates the dateTime the reminder occurs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @return A new Reminder with the new dateTime for the reminder."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Reminder changeDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //When Reminder is implemented, the previous reminder notification should also be removed here"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Reminder(dateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\"\\nReminder DateTime: \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(getDateTime().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherReminder.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Possibility of high number of hash collisions and as a result slower performance"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a reminder object from a JSON string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the reminder"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the reminder object that is created"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Reminder fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String dateTimeString \u003d node.get(\"dateTime\").asText();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(dateTimeString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new Reminder(dateTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 69,
      "sianghwee": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/item/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.address.commons.core.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Represents an Item\u0027s Task in ELISA."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Completion state of Event is false by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Priority of Event is medium by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final Boolean complete;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param complete Denotes whether the task has been completed or not. Defaults to false if null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task(Boolean complete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (complete !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.complete \u003d complete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            this.complete \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Boolean isComplete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return complete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Task markIncomplete() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        builder.append(\" Completed: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .append(isComplete().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Problematic as the details of the task might be the same while the Item/actual task being referred to is not the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //same due to description"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return otherTask.isComplete().equals(isComplete());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //hashCode is problematic as I believe that there are only 3*2 permutations of priority and Boolean"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Possibility of high number of hash collisions and as a result slower performance"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return Objects.hash(complete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a task object from a JSON string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the JSON string that represents the task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the task object that is created"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the jsonString is not in JSON format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException when the JSON string contains incorrect value"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Task fromJson(String jsonString) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final Priority p;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        final boolean complete;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        complete \u003d node.get(\"complete\").asBoolean();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return new Task(complete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 74,
      "sianghwee": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return objectMapper;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 4,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage getItemStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    VisualizeList getVisualList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    ItemModel getModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    void shutdown();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    ListPropertyBase\u003cItem\u003e getActiveRemindersListProperty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 4,
      "sianghwee": 4,
      "mannggoo": 5,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.concurrent.ScheduledThreadPoolExecutor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final ItemModel model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private final ScheduledThreadPoolExecutor checker;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final AutoRescheduleManager autoRescheduleManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public LogicManager(ItemModel model, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        addressBookParser \u003d new AddressBookParser(model.getElisaCommandHistory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager \u003d AutoRescheduleManager.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager.initStorageEvents(model.getEventList(), model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Create new thread class to check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        class CheckerThread extends Thread {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            ScheduledExecutorService"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Schedule a check on future list every 5 seconds"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //If future.first.time \u003c\u003d now"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // A new collection \u003c- future.remove until future.first.time \u003e now"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // ActiveRemindersListProperty.add(A new collection)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Spawn new thread"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //new CheckerThread().start();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Run checker"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Runnable checkTask \u003d new Runnable() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                System.out.println(\"running checkTask\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                Reminder reminder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                ArrayList\u003cItem\u003e reminders \u003d model.getFutureRemindersList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                ArrayList\u003cItem\u003e activeReminders \u003d new ArrayList\u003cItem\u003e(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                if (reminders.size() \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    System.out.println(\"There are pending reminders: \" + reminders.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    //TODO: Check if Optional is present before .get()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    reminder \u003d reminders.get(0).getReminder().get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    synchronized (reminders) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        while (reminder !\u003d null \u0026\u0026 reminder.getDateTime().isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            System.out.println(\"Adding a new task to be reminded.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            Item item \u003d reminders.remove(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            activeReminders.add(item);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            if (reminders.size() \u003e 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                                reminder \u003d reminders.get(0).getReminder().get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                                reminder \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    System.out.println(\"Adding in model\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    model.getActiveReminderListProperty().addReminders(activeReminders);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker \u003d new ScheduledThreadPoolExecutor(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //TODO: Think about initial delay in relation to time for app to start up"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker.scheduleAtFixedRate(checkTask, 0, 15, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Bryan Reminder"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final ListPropertyBase\u003cItem\u003e getActiveRemindersListProperty() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return model.getActiveReminderListProperty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Shutdown threads for Reminders and AutoRescheduleManager"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final void shutdown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        checker.shutdown();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        autoRescheduleManager.shutdown();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Logging"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            storage.saveItemStorage(model.getItemStorage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.updateCommandHistory(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage getItemStorage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getItemStorage();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return model.getVisualList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemModel getModel() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return model.getItemStorageFilePath();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 66,
      "lrchema": 6,
      "mannggoo": 13,
      "sianghwee": 8,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.AutoRescheduleManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Add an Item to the item list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public abstract class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final AutoRescheduleManager AUTO_RESCHEDULE_MANAGER \u003d AutoRescheduleManager.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Task to the Task List. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"description \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_DATETIME + \"Deadline \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_REMINDER + \"Reminder \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_PRIORITY + \"Priority \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"\u003cOptional\u003e \" + PREFIX_TAG + \"Tag \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Item added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    protected final Item toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand(Item item) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        toAdd \u003d item;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public abstract CommandResult execute(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.removeItem(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.getItemStorage().remove(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lrchema": 7,
      "mannggoo": 24,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.RescheduleTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds an Event to the item model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_EVENT_VIEW \u003d \"E\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Event added: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddEventCommand(Item item) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Check if item already exists, else, add it to the model."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.addItem(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (toAdd.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Event event \u003d toAdd.getEvent().get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            RescheduleTask task \u003d new RescheduleTask(toAdd, event.getPeriod(), model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            AUTO_RESCHEDULE_MANAGER.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Notify Ui to change the view the that of the newly added item."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(SHOW_EVENT_VIEW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "mannggoo": 49,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds a Reminder to the item model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddReminderCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_REMINDER_VIEW \u003d \"R\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Reminder added: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddReminderCommand(Item item) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Check if item already exists, else, add it to the model."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.addItem(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Notify Ui to change the view the that of the newly added item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(SHOW_REMINDER_VIEW);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "mannggoo": 41,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Adds a Task to the item model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String SHOW_TASK_VIEW \u003d \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddTaskCommand(Item item) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Check if item already exists, else, add it to the model."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (model.hasItem(toAdd)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.addItem(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Notify Ui to change the view the that of the newly added item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(SHOW_TASK_VIEW);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // should not enter here as itemType is definitely valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 5,
      "mannggoo": 41,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item list has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemStorage beforeClear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeClear \u003d model.getItemStorage().deepCopy();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setItemStorage(beforeClear);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.updateLists();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 16,
      "mannggoo": 2,
      "sianghwee": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public abstract CommandResult execute(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String pane \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 6,
      "-": 64,
      "Icesiolz": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemIndexWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted Item: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ItemIndexWrapper deleted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        deleted \u003d model.getIndices(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item itemDeleted \u003d model.deleteItem(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, itemDeleted));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.addItem(deleted);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 13,
      "mannggoo": 7,
      "sianghwee": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Mark a task as done using it\u0027s index in ELISA."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class DoneCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \": Mark the item identified by the index number used in the displayed item list as done.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Can only be used on task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_COMPLETE_ITEM_SUCCESS \u003d \"Completed Item: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Item itemDone \u003d model.markComplete(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COMPLETE_ITEM_SUCCESS, itemDone));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CommandException(\"Done can only be done on the task list.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.markIncomplete(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new CommandException(\"Done/unDone can only be done on the task list.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lrchema": 15,
      "sianghwee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command for scrolling down."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class DownCommand extends ScrollCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"down\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scrolling down...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"down L / down R\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public DownCommand(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (pane.equals(\"Illegal\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new DownCommandResult(MESSAGE_SUCCESS, pane);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to identify when a command result is a down command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class DownCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public DownCommandResult(String feedbackToUser, String pane) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.pane \u003d pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Edits the details of an existing item in the item list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item in the shown list \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \" DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_REMINDER + \"REMINDER] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DRINK WATER \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + PREFIX_PRIORITY + \"HIGH\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Item: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the item list.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final EditItemDescriptor editItemDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item oldItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item editedItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param editItemDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditCommand(Index index, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(editItemDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList lastShownList \u003d model.getVisualList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item oldItem \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.oldItem \u003d oldItem;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item editedItem \u003d createEditedItem(oldItem, editItemDescriptor, lastShownList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.editedItem \u003d editedItem;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model.replaceItem(oldItem, editedItem);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.replaceItem(editedItem, oldItem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Create a new Item with the new edited details."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param itemToEdit old item to edit"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param editItemDescriptor details to edit the item with"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param lastShownList the last list shown to the user, set by the model"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Item with the edited details"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws CommandException representing failure to create new edited item"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static Item createEditedItem(Item itemToEdit, EditItemDescriptor editItemDescriptor,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                         VisualizeList lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription updatedDescription \u003d editItemDescriptor"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getDescription()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit.getItemDescription());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cTask\u003e updatedTask \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getTask()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getTask()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cEvent\u003e updatedEvent \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getEvent()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getEvent()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e updatedReminder \u003d Optional.ofNullable(editItemDescriptor"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .getReminder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .orElse(itemToEdit"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .getReminder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        .orElse(null)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editItemDescriptor.getTags().orElse(itemToEdit.getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(updatedDescription);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(updatedTags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        itemBuilder.setItemPriority(editItemDescriptor.getPriority().orElse(Priority.MEDIUM));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedTask.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setTask(updatedTask.get());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedEvent.isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(updatedEvent.get());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (updatedReminder.isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(updatedReminder.get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteTask()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setTask(null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteEvent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (editItemDescriptor.getHasDeleteReminder()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item updatedItem;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            updatedItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return updatedItem;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Create a new EditItemDescriptor that edits the details of an item."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static class EditItemDescriptor {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private ItemDescription description;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Task task;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Event event;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Reminder reminder;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteTask \u003d false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteEvent \u003d false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        private boolean hasDeleteReminder \u003d false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public EditItemDescriptor() {}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setTask(toCopy.task);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setEvent(toCopy.event);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setReminder(toCopy.reminder);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteTask(toCopy.hasDeleteTask);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteEvent(toCopy.hasDeleteEvent);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            setHasDeleteReminder(toCopy.hasDeleteReminder);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, task, event, reminder, priority, tags);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setDescription(ItemDescription description) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cItemDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setTask(Task task) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cTask\u003e getTask() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(task);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setEvent(Event event) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cEvent\u003e getEvent() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(event);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean hasAnyDelete() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return (hasDeleteEvent || hasDeleteReminder || hasDeleteTask);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteTask(boolean bool) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteTask \u003d bool;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteTask() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteTask;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteEvent(boolean bool) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteEvent \u003d bool;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteEvent() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteEvent;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public void setHasDeleteReminder(boolean bool) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.hasDeleteReminder \u003d bool;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        public boolean getHasDeleteReminder() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return this.hasDeleteReminder;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "lrchema": 13,
      "mannggoo": 152,
      "sianghwee": 3,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class FindCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final String[] searchString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeFilter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FindCommand(String[] searchString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeFilter \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        model.findItem(searchString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                String.format(Messages.MESSAGE_ITEM_LISTED_OVERVIEW, model.getVisualList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeFilter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 searchString.equals(((FindCommand) other).searchString)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 12,
      "mannggoo": 2,
      "sianghwee": 7,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/JokeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * This commands asks Elisa to give user a joke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class JokeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"joke\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new CommandResult(model.getJoke());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Toggle the state of ELISA between priority and non-priority mode."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class PriorityCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"priority\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String PRIORITY_MODE_ON \u003d \"Priority mode activated\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String PRIORITY_MODE_OFF \u003d \"Priority mode deactivated\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String PRIORITY_MODE_ERROR \u003d \"Priority mode can only be activated on task pane\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            boolean status \u003d model.togglePriorityMode();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult((status ? PRIORITY_MODE_ON : PRIORITY_MODE_OFF));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new CommandResult(PRIORITY_MODE_ERROR);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            model.togglePriorityMode();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (IllegalListException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 16,
      "sianghwee": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScrollCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Abstract class for scrolling."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public abstract class ScrollCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    protected String pane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ScrollCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(input.trim()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"L\":"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.pane \u003d \"resultDisplay\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"R\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.pane \u003d \"tabPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.pane \u003d \"Illegal\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(\"Scrolling\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 1,
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Switches the current view to the desired view."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ShowCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TASK_VIEW_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_VIEW_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_VIEW_COMMAND \u003d \"R\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String CALENDAR_VIEW_COMMAND \u003d \"C\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \": Shows the desired view.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            + \"Parameters: KEYWORD (T,E,R,C)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" E\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched view to %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final String targetView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final String targetList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeSwitch;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public ShowCommand(String unprocessedView) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String targetView \u003d unprocessedView.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.targetView \u003d targetView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(targetView) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case TASK_VIEW_COMMAND:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d TASK_VIEW_COMMAND; //\"TASK\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case EVENT_VIEW_COMMAND:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d EVENT_VIEW_COMMAND; //\"EVENT\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case CALENDAR_VIEW_COMMAND:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            this.targetList \u003d CALENDAR_VIEW_COMMAND; //\"CALENDAR\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case REMINDER_VIEW_COMMAND:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d REMINDER_VIEW_COMMAND; //\"REMINDER\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            this.targetList \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeSwitch \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            model.setVisualList(targetList); // should be T/E/R"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new CommandException(\"Show command format is incorrect. It should be \\\"show T\\\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetView));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeSwitch);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 12,
      "mannggoo": 27,
      "Icesiolz": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Sort the current list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class SortCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Item list has been sorted!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private VisualizeList beforeSort;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Optional\u003cComparator\u003cItem\u003e\u003e comparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SortCommand (Optional\u003cComparator\u003cItem\u003e\u003e comparator) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CommandResult execute(ItemModel model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        beforeSort \u003d model.getVisualList().deepCopy();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (comparator.isPresent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            model.sort(comparator.get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            model.sort();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void reverse(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model.setVisualizeList(beforeSort);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 15,
      "sianghwee": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Undoes last entered command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoCommand(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (elisaCommandHistory.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTHING_TO_UNDO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            UndoableCommand lastDone \u003d elisaCommandHistory.popCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            lastDone.reverse(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new CommandResult(\"Undo [\" + lastDone.getCommandWord() + \"] command successful!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 29,
      "mannggoo": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Superclass of all commands that can be undone"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public abstract void reverse(ItemModel model) throws CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public abstract String getCommandWord();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Command for scrolling up."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class UpCommand extends ScrollCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"up\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Scrolling up...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"up L / up R\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public UpCommand(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CommandResult execute(ItemModel model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (pane.equals(\"Illegal\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new UpCommandResult(MESSAGE_SUCCESS, pane);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * A class to identify when a command result is an up command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class UpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private String pane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public UpCommandResult(String feedbackToUser, String pane) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.pane \u003d pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public String getPane() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTO_RESCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        PREFIX_TAG, PREFIX_AUTO_RESCHEDULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Event must have a deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT)); // AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Event must be present."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e itemReminder \u003d ParserUtil.parseReminder("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.getValue(PREFIX_REMINDER).orElse(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d ParserUtil.parsePriority("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.getValue(PREFIX_PRIORITY).orElse(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Optional\u003cAutoReschedulePeriod\u003e reschedulePeriod \u003d ParserUtil.parseReschedule("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    argMultimap.getValue(PREFIX_AUTO_RESCHEDULE).orElse(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (reschedulePeriod.isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                event \u003d event.setAutoReschedule(true).setReschedulePeriod(reschedulePeriod.get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            System.out.println(\"Issue with parsing -auto \" + e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemBuilder.setItemPriority(priority.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setEvent(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemReminder.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(itemReminder.get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddEventCommand(newItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "mannggoo": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.AddReminderCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddReminderCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Reminder must be present."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Reminder must be present."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder itemReminder \u003d ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).get()).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setReminder(itemReminder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddReminderCommand(newItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mannggoo": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " *  Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AddCommand parse(String desc, String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_REMINDER, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemDescription description \u003d ParserUtil.parseDescription(desc);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cEvent\u003e dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).orElse(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cReminder\u003e itemReminder \u003d ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).orElse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Optional\u003cPriority\u003e priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Task task \u003d new Task(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            itemBuilder.setItemPriority(priority.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (dateTime.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setEvent(dateTime.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (itemReminder.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            itemBuilder.setReminder(itemReminder.get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AddCommand addCommand \u003d new AddTaskCommand(newItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 5,
      "mannggoo": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.DownCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.JokeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.commands.PriorityCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.UpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003cdescription\u003e[^-]*)(?\u003cflags\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public AddressBookParser(ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String description \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String flags \u003d \" \" + matcher.group(\"flags\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddTaskCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddEventCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new AddReminderCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new EditCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new DeleteCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new FindCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new UndoCommand(elisaCommandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new ShowCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new SortCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PriorityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new PriorityCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new DoneCommandParser().parse(description, flags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        case JokeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return new JokeCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new ShowCommand(description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case UpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new UpCommand(description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case DownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return new DownCommand(description);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 12,
      "sianghwee": 12,
      "mannggoo": 20,
      "-": 64,
      "Icesiolz": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix + \" \", fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (argPrefix.equals(CliSyntax.PREFIX_DELETE_TASK)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    || argPrefix.equals(CliSyntax.PREFIX_DELETE_EVENT)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    || argPrefix.equals(CliSyntax.PREFIX_DELETE_REMINDER)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                argMultimap.put(argPrefix, \"Dummy Value\"); // so that .isPresent() would return true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 8,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*ELISA prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_REMINDER \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"-p\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"-desc\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_EVENT \u003d new Prefix(\"--e\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_TASK \u003d new Prefix(\"--tk\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_DELETE_REMINDER \u003d new Prefix(\"--r\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Prefix PREFIX_AUTO_RESCHEDULE \u003d new Prefix(\"-auto\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 10,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents a Parser that is able to parse DateTime input into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public interface DateTimeParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses {@code stringDateTime} into a LocalDateTime and returns it"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the given string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    LocalDateTime parseDateTime(String stringDateTime) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DefinedDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse string date time using a formatter dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class DefinedDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the string using the given format and returns a LocalDateTime"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the format \"dd/MM/yyyy HHmm\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            String[] splitTime \u003d stringDateTime.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalDate processedDate \u003d LocalDate.parse(splitTime[0], dateFormatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalTime processedTime \u003d LocalTime.parse(splitTime[1], timeFormatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            LocalDateTime processedDateTime \u003d LocalDateTime.of(processedDate, processedTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return processedDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \" Should be \\\"25/09/2019 2300\\\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public DeleteCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // flags should be empty in this case, focus on args only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 2,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DoneCommand parse(String args, String flags) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // flags should be empty in this case, focus on args only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code description} and {@code args} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditCommand parse(String description, String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processArgs \u003d args + \" \"; // account for the possibility that --tk or --r or --e is given with no space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            argMultiMap \u003d ArgumentTokenizer.tokenize(processArgs, PREFIX_DESCRIPTION, PREFIX_DATETIME, PREFIX_REMINDER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    PREFIX_PRIORITY, PREFIX_TAG, PREFIX_DELETE_TASK, PREFIX_DELETE_REMINDER, PREFIX_DELETE_EVENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            logger.info(\"Failure to tokenize arguments: EditCommand\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Edit command format is incorrect.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        EditItemDescriptor editItemDescriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setDescription("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseDescription("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setEvent("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseDateTime("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_DATETIME).get()).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setReminder("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parseReminder("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_REMINDER).get()).get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setPriority("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    ParserUtil.parsePriority("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                            argMultiMap.getValue(PREFIX_PRIORITY).get()).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        parseTagsForEdit(argMultiMap.getAllValues(PREFIX_TAG)).ifPresent(editItemDescriptor::setTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // if delete tag is present, even if edits are made above, relevant subitems should still be deleted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_TASK).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteTask(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteReminder(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DELETE_EVENT).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            editItemDescriptor.setHasDeleteEvent(true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if ((!editItemDescriptor.isAnyFieldEdited()) \u0026\u0026 (!editItemDescriptor.hasAnyDelete())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new EditCommand(index, editItemDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 53,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FastReminderDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FAST_REMINDER_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse stringDateTime in fast reminder format (ie 10.min.later) to a LocalDateTime object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class FastReminderDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String DAY_INDICATOR \u003d \"DAY\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String HOUR_INDICATOR \u003d \"HOUR\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final String MIN_INDICATOR \u003d \"MIN\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Pattern BASIC_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Pattern.compile(\"(?\u003cquantity\u003e[1-9]\\\\d*)(\\\\.)(?\u003cunit\u003eMIN|HOUR|DAY)(\\\\.LATER)$\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse this stringDateTime into a LocalDateTime representation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the stringDateTime"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of stringDateTime is incorrect"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //stringDateTime should be of format \"10.min.later\" or \"3.hour.later\" or \"2.day.later\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processedString \u003d stringDateTime.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final Matcher matcher \u003d BASIC_INPUT_FORMAT.matcher(processedString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FAST_REMINDER_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String quantity \u003d matcher.group(\"quantity\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final String unit \u003d matcher.group(\"unit\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        final long longQuantity \u003d Long.valueOf(quantity).longValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime current \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime processedDateTime \u003d LocalDateTime.now(); // just to initialize"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            switch (unit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case DAY_INDICATOR:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusDays(longQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case HOUR_INDICATOR:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusHours(longQuantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            case MIN_INDICATOR:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d current.plusMinutes(longQuantity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                // nothing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return processedDateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public FindCommand parse(String keywords, String empty) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String trimmedArgs \u003d keywords.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] keywordArray \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new FindCommand(keywordArray);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 1,
      "sianghwee": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    T parse(String description, String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.AutoReschedulePeriod;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses {@code description} into a {@code ItemDescription} and returns it."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param description given for the item."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new item description that is processed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the description is invalid (empty description)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static ItemDescription parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!ItemDescription.isValidItemDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(ItemDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new ItemDescription(trimmedDescription);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code dateTime} into a {@code Optional\u003cEvent\u003e} and returns it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts a String to a LocalDateTime object and creates a new event with it."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param dateTime representing the deadline of the event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(event) if the Event created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of deadline provided is incorrect"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cEvent\u003e parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            formattedDateTime \u003d getFormattedDateTime(trimmedDateTime); //LocalDateTime.parse(trimmedDateTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect. \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Please follow this format: \\\"-d 2019-09-25T23:59:50.63\\\"\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"or \\\"-d 25/09/2019 2359\\\"\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"or \\\"-d 10.min.later\\\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event newEvent \u003d new Event(formattedDateTime, null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(newEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code reminder} into a {@code Optional\u003cReminder\u003e} and returns it."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts the string time into a LocalDateTime object and create a Reminder with it."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param reminder representing the time of the reminder"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(reminder) if the reminder created is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of the reminder time is incorrect"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cReminder\u003e parseReminder(String reminder) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedDateTime \u003d reminder.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime formattedDateTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            formattedDateTime \u003d getFormattedDateTime(trimmedDateTime); //LocalDateTime.parse(trimmedDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Date Time format given is incorrect. \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Please follow this format: \\\"-r 2019-09-25T23:59:50.63\\\"\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"or \\\"-r 25/09/2019 2359\\\"\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"of \\\"-r 10.min.later\\\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder newReminder \u003d new Reminder(formattedDateTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(newReminder);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse the {@code priority} into a {@code Optional\u003cPriority\u003e} and returns it."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Converts the string of priority into an enumeration priority object, is case-insensitive."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param priority of the task or event"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(priority) if the priority is valid, Optional.empty() otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the priority given is not high/medium/low"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cPriority\u003e parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority processedPriority;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (trimmedPriority.equalsIgnoreCase(\"HIGH\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else if (trimmedPriority.equalsIgnoreCase(\"MEDIUM\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else if (trimmedPriority.equalsIgnoreCase(\"LOW\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            processedPriority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"Priority format given is incorrect. \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Please follow this format \\\"-p High\\\"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(processedPriority); //maybe use enum here"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses string {@code period} into an {@code Optional\u003cAutoReschedulePeriod\u003e} representation of the period."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param period of the auto-reschedule. Expects \"hour\"/\"day\"/\"week\" or format \"10.min.later\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return Optional.of(AutoRechedulePeriod) if this period is valid. Optional.of(empty) otherwise."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of period given is incorrect."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static Optional\u003cAutoReschedulePeriod\u003e parseReschedule(String period) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (period \u003d\u003d null) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String processedPeriod \u003d period.trim().toUpperCase();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        boolean isFixedPeriod \u003d false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        AutoReschedulePeriod reschedulePeriod \u003d new AutoReschedulePeriod(0); // just to initialise"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        switch(processedPeriod) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case(AutoReschedulePeriod.BY_HOUR):"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byHour();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case (AutoReschedulePeriod.BY_DAY):"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byDay();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        case (AutoReschedulePeriod.BY_WEEK):"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reschedulePeriod \u003d AutoReschedulePeriod.byWeek();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            isFixedPeriod \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // nothing"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (!isFixedPeriod) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                DateTimeParser parser \u003d new FastReminderDateTimeParser();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                LocalDateTime temp \u003d parser.parseDateTime(processedPeriod);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                reschedulePeriod \u003d AutoReschedulePeriod.from(temp);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                throw new ParseException(\"Auto Reschedule format given is incorrect. \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        + \"Use either hour/day/week or 10.min.later format\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return Optional.of(reschedulePeriod);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the string by trying out different formats, and returns a LocalDateTime"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the date and time"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a LocalDateTime representation of the given string"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws DateTimeParseException if the format of the string given is incorrect"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static LocalDateTime getFormattedDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        boolean invalidFormat \u003d false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ParseException parseException \u003d new ParseException(\"dummy\"); // just to initialize"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ArrayList\u003cDateTimeParser\u003e allParsers \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new StandardDateTimeParser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new DefinedDateTimeParser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                add(new FastReminderDateTimeParser());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        };"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime processedDateTime \u003d LocalDateTime.now(); // just to initialize"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (DateTimeParser parser : allParsers) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                processedDateTime \u003d parser.parseDateTime(stringDateTime);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            } catch (ParseException err) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                invalidFormat \u003d true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                parseException \u003d err;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (invalidFormat) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw parseException;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return processedDateTime;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "mannggoo": 166,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TASK_VIEW_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_VIEW_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_VIEW_COMMAND \u003d \"R\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String CALENDAR_VIEW_COMMAND \u003d \"C\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the given {@code view} in the context of ShowCommand and returns a ShowCommand for execution"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param view of the view to show"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param empty an empty string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return appropriate ShowCommand to execute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws ParseException if the format of view string is incorrect"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public ShowCommand parse(String view, String empty) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        requireNonNull(view);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        String pane \u003d view.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (pane.equalsIgnoreCase(TASK_VIEW_COMMAND)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(EVENT_VIEW_COMMAND)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(REMINDER_VIEW_COMMAND)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                || pane.equalsIgnoreCase(CALENDAR_VIEW_COMMAND)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return new ShowCommand(pane);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(\"The format given for show command is incorrect. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    + \"Example usage: \\\"show T\\\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Parser to create a sort command with the right arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String DESCRIPTION \u003d \"desc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String PRIORITY \u003d \"priority\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Create a sort command base on the flag that was passed in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param args of the way in which"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param empty an empty string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return appropriate SortCommand to execute"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws ParseException if the argument string is incorrect"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public SortCommand parse(String args, String empty) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String flag \u003d args.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (flag.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new SortCommand(Optional.empty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Comparator\u003cItem\u003e comparator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch(flag.toLowerCase()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            comparator \u003d (item1, item2) -\u003e item1.getItemDescription().getDescription()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    .compareTo(item2.getItemDescription().getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case PRIORITY:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // waiting for priority to be moved out to the item level"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new ParseException(\"The flag given for sort command is incorrect. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    + \"Example usage: \\\"sort desc\\\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new SortCommand(Optional.of(comparator));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StandardDateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Parse string Date Time in the standard way using LocalDateTime.parse()."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class StandardDateTimeParser implements DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parse string using LocalDateTime.parse()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param stringDateTime of the unprocessed date time string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of this string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @throws DateTimeParseException if the format of this string is incorrect"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime parseDateTime(String stringDateTime) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            return LocalDateTime.parse(stringDateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AutoRescheduleManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.item.EventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Manages all the events that are to be rescheduled automatically at each of their given interval period."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Uses a Timer to keep track of when to update the Event\u0027s startDateTime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AutoRescheduleManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static AutoRescheduleManager manager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static Timer timer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private AutoRescheduleManager() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * The only way to get an AutoRescheduleManager object. There should only be one AutoRescheduleManager at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return the only instance of AutoRescheduleManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoRescheduleManager getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (manager \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            manager \u003d new AutoRescheduleManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            timer \u003d new Timer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return manager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Initialise this AutoRescheduleManager with all the events that can be rescheduled"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update event times to the latest upcoming one, given their period."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param eventList of all events in the storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param model containing the events"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void initStorageEvents(EventList eventList, ItemModel model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (Item item : eventList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            if (item.hasEvent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                Event event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                if (event.hasAutoReschedule()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    if (event.getStartDateTime().compareTo(LocalDateTime.now()) \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        // event date is after now"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        // add event to Timer thread, add(newEvent)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        RescheduleTask task \u003d new RescheduleTask(item, event.getPeriod(), model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        getInstance().add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        // event date is before now, but is reschedulable"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        // modify the event date to the most upcoming one (Use modulo and add remainder)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        // add(newEvent)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        LocalDateTime updatedDateTime \u003d getUpdatedDateTime(event);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        Event updatedEvent \u003d event.changeStartDateTime(updatedDateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        // update the old event time to the new one in the itemModel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        Item oldItem \u003d item;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        Item newItem \u003d item.changeEvent(updatedEvent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        RescheduleTask task \u003d new RescheduleTask(newItem, updatedEvent.getPeriod(), model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        model.replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                        getInstance().add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update the old event start time to the closest upcoming start time, using the event\u0027s auto-reschedule period"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param event whose start date we want to modify"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return LocalDateTime representation of the modified time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static LocalDateTime getUpdatedDateTime(Event event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Use modulo to get the remaining time till the next reschedule time. Add that remaining time to the time now."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long period \u003d event.getPeriod().getPeriod();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime startDateTime \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long millisDifference \u003d Duration.between(startDateTime, LocalDateTime.now()).toMillis(); // positive difference;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long millisRemainder \u003d millisDifference % period; //millisDifferenceBi.mod(periodBi).longValue();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long tillNextStart \u003d period - millisRemainder;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime updatedDateTime \u003d LocalDateTime.now().plusNanos(Duration.ofMillis(tillNextStart).toNanos());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return updatedDateTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Adds a RescheduleTask that is to be rescheduled periodically, to this AutoRescheduleManager."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param task RescheduleTask to be carried out after reaching an event\u0027s startDateTime"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void add(RescheduleTask task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            Duration delay \u003d Duration.between(LocalDateTime.now(), task.getStartTime());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            timer.scheduleAtFixedRate(task, delay.toMillis(), task.getLongPeriod());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            logger.warning(\"----------------[Failed to schedule Event][\" + task.getEvent() + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Shutdown the AutoRescheduleManager"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void shutdown() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AutoReschedulePeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Represents the auto-reschedule period of an event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class AutoReschedulePeriod {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_HOUR \u003d \"HOUR\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_DAY \u003d \"DAY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String BY_WEEK \u003d \"WEEK\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long hourInMilliseconds \u003d Duration.ofHours(1).toMillis();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long dayInMilliseconds \u003d Duration.ofDays(1).toMillis();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private static final Long weekInMilliseconds \u003d Duration.ofDays(7).toMillis();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private long period;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public AutoReschedulePeriod(long period) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one hour."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one hour."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byHour() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long hourPeriod \u003d hourInMilliseconds;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(hourPeriod);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one day."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one day."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byDay() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long dayPeriod \u003d dayInMilliseconds;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(dayPeriod);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of one week."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object of one week."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod byWeek() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long weekPeriod \u003d weekInMilliseconds;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(weekPeriod);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get an auto-reschedule period of this LocalDateTime {@code then} from now."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param then LocalDateTime of the time later"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return AutoReschedulePeriod object representing the time difference from now till then."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static AutoReschedulePeriod from(LocalDateTime then) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Duration duration \u003d Duration.between(LocalDateTime.now(), then);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new AutoReschedulePeriod(duration.toMillis());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Get the period of this AutoReschedulePeriod in Millis."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a long representation of this period in Millis."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public long getPeriod() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.period;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ElisaCommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * interface for state history"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public interface ElisaCommandHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushCommand(Command command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ElisaCommandHistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.UndoableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Stores the stack of all application states with current state at the top"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ElisaCommandHistoryManager implements ElisaCommandHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Stack\u003cUndoableCommand\u003e undoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistoryManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * push a command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void pushCommand(Command command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            undoStack.push((UndoableCommand) command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * pop last command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand popCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return undoStack.pop();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * peek last command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public UndoableCommand peekCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * return stack size"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemIndexWrapper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * Stores an item along with its indices in the separate item lists"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class ItemIndexWrapper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Item item; //the item"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int visual; //its index in VisualizeList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int storage; //index in ItemStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int task; //index in TaskList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int eve; //index in EventList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int rem; //index in ReminderList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private int frem; //index in FutureReminders"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    //All indices are -1 if not in the respective list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper(Item item, int visual, int storage, int task, int eve, int rem, int frem) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.visual \u003d visual;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.eve \u003d eve;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.rem \u003d rem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.frem \u003d frem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getVisual() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return visual;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getStorage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getTask() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getEve() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return eve;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getRem() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return rem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public int getFrem() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return frem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item getItem() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.model.item.ActiveRemindersList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.item.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface ItemModel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemStorageFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setItemStorageFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void setItemStorage(ItemStorage itemStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage getItemStorage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem(Item item);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addItem(ItemIndexWrapper wrapper);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem(Item item, Item newItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item removeItem(int index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item removeItem(Item item);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deleteItem(int index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList(String listString) throws IllegalValueException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void emptyLists();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList findItem(String[] searchStrings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setVisualizeList(VisualizeList list);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort(Comparator\u003cItem\u003e comparator);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasItem(Item item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(Item item);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(ItemIndexWrapper wrapper);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper getIndices(int index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void updateLists();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistory getElisaCommandHistory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean togglePriorityMode() throws IllegalListException;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item markComplete(int index) throws IllegalListException;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item markIncomplete(int index) throws IllegalListException;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList getJokeList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    ActiveRemindersList getActiveReminderListProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    ArrayList\u003cItem\u003e getFutureRemindersList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    void updateCommandHistory(Command command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EventList getEventList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "lrchema": 27,
      "sianghwee": 79,
      "mannggoo": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.exceptions.IllegalListException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.model.item.ActiveRemindersList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.item.CalendarList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.EventList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.ReminderList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents the model for ELISA"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemModelManager implements ItemModel {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ReminderList reminderList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private CalendarList calendarList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    // The list to be used for visualizing in the Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private VisualizeList visualList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemStorage itemStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private final ElisaCommandHistory elisaCommandHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private final JokeList jokeList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean priorityMode \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private PriorityQueue\u003cItem\u003e sortedTask \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Bryan Reminder"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //These three lists must be synchronized"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ReminderList pastReminders;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ActiveRemindersList activeReminders;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private ArrayList\u003cItem\u003e futureReminders;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemModelManager(ItemStorage itemStorage, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            ElisaCommandHistory elisaCommandHistory) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.eventList \u003d new EventList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.reminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemStorage \u003d itemStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.elisaCommandHistory \u003d elisaCommandHistory;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Bryan Reminder"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        pastReminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ActiveRemindersList(new ReminderList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.jokeList \u003d new JokeList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ListPropertyBase\u003cItem\u003e(new ReminderList()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public Object getBean() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public String getName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public synchronized Item popReminder() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                if(!isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    return remove(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    //Should have this throw an exception"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public synchronized void addReminders(Collection\u003cItem\u003e reminders) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                for (Item item:reminders) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    add(0, item);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        futureReminders \u003d new ArrayList\u003cItem\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Bryan Reminder"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        pastReminders \u003d new ReminderList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ActiveRemindersList(new ReminderList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders \u003d new ListPropertyBase\u003cItem\u003e(new ReminderList()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public Object getBean() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public String getName() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public synchronized Item popReminder() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                if(!isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    return remove(0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    //Should have this throw an exception"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public synchronized void addReminders(Collection\u003cItem\u003e reminders) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                for (Item item:reminders) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    add(0, item);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        };"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        futureReminders \u003d new ArrayList\u003cItem\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        updateLists();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * repopulate item lists from storage"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void updateLists() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c itemStorage.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            addToSeparateList(itemStorage.get(i));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /* Bryan Reminder"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Referenced: https://docs.oracle.com/javafx/2/binding/jfxpub-binding.htm"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * for property naming conventions."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Function to get property"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ActiveRemindersList getActiveReminderListProperty() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return activeReminders;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Function get property\u0027s value"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final ObservableList\u003cItem\u003e getActiveReminderList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return activeReminders.get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    //Function to edit property //which should trigger a change event"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final void addReminderToActive(Item item) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        activeReminders.add(item);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public final ArrayList\u003cItem\u003e getFutureRemindersList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return futureReminders;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void updateCommandHistory(Command command) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        elisaCommandHistory.pushCommand(command);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemStorageFilePath() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs.getItemStorageFilePath();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorageFilePath(Path itemStorageFilePath) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(itemStorageFilePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(itemStorageFilePath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorage(ItemStorage itemStorage) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemStorage \u003d itemStorage;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage getItemStorage() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds an item to the respective list. All items will be added to the central list."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * It will also be added to the respective list depending on whether it is a task, event or a reminder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added to the program"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem (Item item) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        visualList.add(item);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //TODO: Shouldnt addToSeparateList be successful before we store the item?"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemStorage.add(item);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        addToSeparateList(item);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add given item into specified index"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addItem(ItemIndexWrapper wrapper) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        visualList.addToIndex(wrapper.getVisual(), wrapper.getItem());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        itemStorage.add(wrapper.getStorage(), wrapper.getItem());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        addToSeparateList(wrapper);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds an item to a specific list"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added to the list"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param il the list the item is to be added to"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addItem (Item item, VisualizeList il) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        il.add(item);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to add an item to it\u0027s respective list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added into the lists"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(Item item) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasTask()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            taskList.add(item);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasEvent()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            eventList.add(item);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (item.hasReminder()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            reminderList.add(item);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            futureReminders.add(item);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item to separate lists into given index"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToSeparateList(ItemIndexWrapper wrapper) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getTask() !\u003d -1) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            taskList.addToIndex(wrapper.getTask(), wrapper.getItem());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getEve() !\u003d -1) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            eventList.addToIndex(wrapper.getEve(), wrapper.getItem());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (wrapper.getRem() !\u003d -1) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            reminderList.addToIndex(wrapper.getRem(), wrapper.getItem());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            futureReminders.add(wrapper.getFrem(), wrapper.getItem());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ElisaCommandHistory getElisaCommandHistory() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return elisaCommandHistory;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList getJokeList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokeList;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokeList.getJoke();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Remove an item from the current list."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the item to be removed from the current list"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that was removed"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item removeItem(int index) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item item \u003d visualList.removeItemFromList(index);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (visualList instanceof TaskList) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            taskList.removeItemFromList(item);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else if (visualList instanceof EventList) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            eventList.removeItemFromList(item);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else if (visualList instanceof ReminderList) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            reminderList.removeItemFromList(item);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // never reached here as there are only three variants for the visualList"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * remove the given item from the list(s)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item removeItem(Item item) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item removedItem \u003d visualList.removeItemFromList(item);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (visualList instanceof TaskList) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            taskList.removeItemFromList(item);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else if (visualList instanceof EventList) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            eventList.removeItemFromList(item);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else if (visualList instanceof ReminderList) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            reminderList.removeItemFromList(item);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            // never reached here as there are only three variants for the visualList"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return removedItem;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Deletes an item from the program."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be deleted."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that was deleted from the program"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item deleteItem(int index) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item item \u003d visualList.removeItemFromList(index);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemStorage.remove(item);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        taskList.removeItemFromList(item);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        eventList.removeItemFromList(item);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        reminderList.removeItemFromList(item);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            getNextTask();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public ItemIndexWrapper getIndices(int index) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return new ItemIndexWrapper(item, index, itemStorage.indexOf(item), taskList.indexOf(item),"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                eventList.indexOf(item), reminderList.indexOf(item), futureReminders.indexOf(item));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList getVisualList() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Set a new item list to be the visualization list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param listString the string representation of the list to be visualized"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setVisualList(String listString) throws IllegalValueException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch(listString) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (priorityMode) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                setVisualList(getNextTask());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(taskList);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(eventList);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"R\":"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            setVisualList(reminderList);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            setVisualList(calendarList);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalValueException(String.format(\"%s is no a valid list\", listString));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void setVisualList(VisualizeList il) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d il;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replaces one item with another item."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be replace"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the item that will replace the previous item"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void replaceItem(Item item, Item newItem) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int index \u003d visualList.indexOf(item);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        visualList.setItem(index, newItem);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d itemStorage.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemStorage.setItem(index, newItem);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d taskList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            taskList.setItem(index, newItem);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d eventList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            eventList.setItem(index, newItem);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if ((index \u003d reminderList.indexOf(item)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            reminderList.setItem(index, newItem);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (priorityMode) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask.remove(item);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask.offer(newItem);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            visualList \u003d getNextTask();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Find an item based on its description."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchStrings the string to search for within the description"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list containing all the items that contain the search string"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList findItem(String[] searchStrings) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d visualList.find(searchStrings);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.visualList;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void setVisualizeList(VisualizeList list) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.visualList \u003d list;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Clears the storage for the current ELISA run."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        setItemStorage(new ItemStorage());"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.eventList \u003d new EventList();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.reminderList \u003d new ReminderList();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Clears the 3 lists for re-populating"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void emptyLists() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.taskList.clear();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.eventList.clear();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        this.reminderList.clear();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sort the current visual list."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d visualList.sort();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the current visual list based on a comparator."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param comparator the comparator to sort the current list by."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void sort(Comparator\u003cItem\u003e comparator) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        VisualizeList tempList \u003d visualList.deepCopy();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tempList.sort(comparator);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.visualList \u003d tempList;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Checks if the item storage already contains this item."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param item to check"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return true if the item storage contains this item, false otherwise"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return itemStorage.contains(item);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Enable and disable the priority mode"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean value. If true, means priority mode is on, else returns false."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalListException if the visualList is not a task list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean togglePriorityMode() throws IllegalListException {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        priorityMode \u003d !priorityMode;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!priorityMode) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask \u003d null;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            this.visualList \u003d taskList;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            sortedTask \u003d new PriorityQueue\u003c\u003e((item1, item2) -\u003e {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Task task1 \u003d item1.getTask().get();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Task task2 \u003d item2.getTask().get();"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (task1.isComplete() \u0026\u0026 !task2.isComplete()) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                } else if (!task1.isComplete() \u0026\u0026 task2.isComplete()) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    return item1.getPriority().compareTo(item2.getPriority());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            });"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Item item \u003d taskList.get(i);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (!item.getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    sortedTask.add(item);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (sortedTask.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                priorityMode \u003d false;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return priorityMode;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            this.visualList \u003d getNextTask();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return priorityMode;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private VisualizeList getNextTask() {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (sortedTask.peek().getTask().get().isComplete()) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            priorityMode \u003d false;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.add(sortedTask.peek());"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Mark an item with a task as done."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be marked as done."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that is marked as done."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalListException if the operation is not done on a task list."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item markComplete(int index) throws IllegalListException {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Item item;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task task \u003d item.getTask().get();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task newTask \u003d task.markComplete();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Item newItem \u003d item.changeTask(newTask);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            replaceItem(item, newItem);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * mark a given task as not completed"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item markIncomplete(int index) throws IllegalListException {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        Item item;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (!(visualList instanceof TaskList)) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new IllegalListException();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            item \u003d visualList.get(index);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            Task task \u003d item.getTask().get();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            Task newTask \u003d task.markIncomplete();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            Item newItem \u003d item.changeTask(newTask);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            replaceItem(item, newItem);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            sortedTask.add(newItem);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (priorityMode) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            sortedTask.poll();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            this.visualList \u003d getNextTask();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EventList getEventList() {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.eventList;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 110,
      "lrchema": 138,
      "sianghwee": 330,
      "mannggoo": 13,
      "Icesiolz": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The central storage of all the items in the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds an item to the item list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added to the item list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void add(Item item) throws DuplicateItemException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (items.contains(item)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item into specified index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void add(int targetIndex, Item item) throws DuplicateItemException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (items.contains(item)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        items.add(targetIndex, item);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Retrieve the item list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cItem\u003e getItems() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.items;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Gets the item at the index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be retrieved."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item at that index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item get(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Return the size of the storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the size of the storage as an integer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns if the storage already contains the item."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be searched for"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean contains(Item item) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.contains(item);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Remove the item from within the storage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be removed from the storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item remove(Item item) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        items.remove(item);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the index of the item in the storage. If the item is not in the storage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * a index of -1 is returned."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be searched for."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the index of the item in the storage."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int indexOf(Item item) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.indexOf(item);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Set the item at the specific index to a new item."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item to be replaced."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param newItem the item to replace the old item."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item setItem(int index, Item newItem) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return items.set(index, newItem);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the storage into a JSON string."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the JSON representation of the storage."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws JsonProcessingException"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toJson() throws JsonProcessingException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return JsonUtil.toJsonString(items);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates the item storage from a json string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param jsonString the string representation of the item storage."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item storage with all items added"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException when the file cannot be read from"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws DataConversionException when the item is not in a proper format"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemStorage fromJson(String jsonString) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonNode node \u003d JsonUtil.getObjectMapper().readTree(jsonString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Iterator\u003cJsonNode\u003e it \u003d node.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String json \u003d it.next().toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Item item \u003d Item.fromJson(json);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                itemStorage.add(item);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                throw new DataConversionException(e);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!(other instanceof ItemStorage)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return this.items.equals(((ItemStorage) other).items);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns a deep copy of this item storage."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return deep copy of the item storage"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage deepCopy() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : items) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                itemStorage.add(i.deepCopy());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                // not supposed to happen"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 10,
      "sianghwee": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/model/JokeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lrchema"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lrchema"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * List of jokes to pick and display"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "public class JokeList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Path jokeFile \u003d Paths.get(\"data\", \"jokes.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private ArrayList\u003cString\u003e jokes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    private Random rng;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public JokeList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        jokes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        rng \u003d new Random();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        File file \u003d jokeFile.toFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                jokes.add(sc.nextLine());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * Returns random joke from list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public String getJoke() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        rng.setSeed(System.currentTimeMillis());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        int index \u003d rng.nextInt(jokes.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return jokes.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lrchema"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    void updateViewList(String targetList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    boolean hasItem(Item item);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    void add(Item item);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 8,
      "-": 87,
      "Icesiolz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return userPrefs.getItemStorageFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // dummy method"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // dummy method"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void add(Item item) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //nothing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void updateViewList(String targetList) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 13,
      "sianghwee": 2,
      "-": 149,
      "Icesiolz": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemStorageFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RescheduleTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * Task to reschedule an event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class RescheduleTask extends TimerTask {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private AutoReschedulePeriod period;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public RescheduleTask(Item item, AutoReschedulePeriod period, ItemModel model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.event \u003d item.getEvent().get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.period \u003d period;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event.getStartDateTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public long getLongPeriod() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return period.getPeriod();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this.event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Executes this task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update this event\u0027s startDateTime with the new startDateTime, given the period of reccurence."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Update the model with the new item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Refreshes the view on the Ui to reflect the new startDateTime of this event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        logger.info(\"----------[INFO] \" + \"Reschedule runs again. Old event: \" + event.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item oldItem \u003d item;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        long period \u003d event.getPeriod().getPeriod();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        LocalDateTime newStart \u003d LocalDateTime.now().plusNanos(Duration.ofMillis(period).toNanos());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event newEvent \u003d event.changeStartDateTime(newStart);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem \u003d item.changeEvent(newEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model.replaceItem(oldItem, newItem);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model.updateLists();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model.setVisualizeList(model.getVisualList()); // to refresh the view"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.item \u003d newItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.event \u003d newEvent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        logger.info(\"-----------[INFO] \" + \"End of run. New event: \" + newEvent.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        setItemStorageFilePath(newUserPrefs.getItemStorageFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemStorageFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setItemStorageFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 3,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/IllegalListException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The exception thrown when a command is executed on a list that it is not able to execute on."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class IllegalListException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ActiveRemindersList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blimyj"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.beans.property.ListPropertyBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * TODO: Make this javadoc prettier."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blimyj"
        },
        "content": " * An ActiveReminderList that extends from ListPropertyBase in order to be observable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blimyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blimyj"
        },
        "content": "public class ActiveRemindersList extends ListPropertyBase\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public ActiveRemindersList (ReminderList reminderList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        super(reminderList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public Object getBean() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /* TODO: Remove this method or find a use for it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public synchronized Item popReminder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        if(!isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return remove(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            //Should have this throw an exception"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Adds a reminder to ActiveRemindersList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * @param reminders Collection of reminders to be added to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public synchronized void addReminders(Collection\u003cItem\u003e reminders) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        System.out.println(\"Starting to add.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        for (Item item:reminders) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            add(0, item);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        System.out.println(\"Finished adding.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blimyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/CalendarList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Object class to store all the items that are calendars within the program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class CalendarList extends VisualizeList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public CalendarList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are events within the program"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class EventList extends VisualizeList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the event list based on the date of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a sorted EventList of the current list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        EventList el \u003d new EventList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item item: list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            el.add(item);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        el.list.sort((item1, item2) -\u003e item1.getEvent().get().getStartDateTime()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .compareTo(item2.getEvent().get().getStartDateTime()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return el;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new EventList only containing the items that have the search string in their description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        EventList el \u003d new EventList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return find(searchString, el);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        EventList el \u003d new EventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(el);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are reminders within the program"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ReminderList extends VisualizeList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReminderList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the Reminders by the date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new ReminderList with the reminders within sorted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ReminderList rl \u003d new ReminderList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : list) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            rl.add(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        rl.list.sort((item1, item2) -\u003e item1.getReminder().get().getDateTime()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .compareTo(item2.getReminder().get().getDateTime()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return rl;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new ReminderList only containing the items that have the search string in their description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ReminderList rl \u003d new ReminderList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.find(searchString, rl);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy () {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ReminderList rl \u003d new ReminderList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(rl);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Object class to store all the items that are task within the program"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class TaskList extends VisualizeList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sort the items in the task list. The items are first sorted by whether they are"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * done or not and then by their priority."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an VisualizeList of all the items sorted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList sort() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item item: list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            tl.add(item);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tl.list.sort((item1, item2) -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task task1 \u003d item1.getTask().get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Task task2 \u003d item2.getTask().get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (task1.isComplete() \u0026\u0026 !task2.isComplete()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else if (!task1.isComplete() \u0026\u0026 task2.isComplete()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                return item1.getPriority().compareTo(item2.getPriority());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return tl;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Finds a substring within the description of an item."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchString a string to be search for within the description of an item"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a new TaskList containing only the items that have the search string in their description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList find(String[] searchString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return find(searchString, tl);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList deepCopy() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return super.deepCopy(tl);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "sianghwee": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/VisualizeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ModifiableObservableListBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An object to hold items. Parent class for TaskList, EventList and ReminderList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public abstract class VisualizeList extends ModifiableObservableListBase\u003cItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected ArrayList\u003cItem\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public VisualizeList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Add an item into the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be added into the list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean add(Item item) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (hasItem(item)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return list.add(item);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * add item into specified index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void addToIndex(int targetIndex, Item item) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        if (hasItem(item)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lrchema"
        },
        "content": "            list.add(targetIndex, item);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lrchema"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Check if the list contains the item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be checked for."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return true if the item is in the list, else return false."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.contains(item);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void doAdd(int index, Item item) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        list.add(index, item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Get the list of the item list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ArrayList of all the items in the VisualizeList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cItem\u003e getList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Removes an item from the list base on it\u0027s index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the integer value of the index of the item to be removed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that is removed from this operation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item removeItemFromList(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Removes an item from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param item the item to be removed from the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public Item removeItemFromList(Item item) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        list.remove(item);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item doSet(int index, Item item) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.set(index, item);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item doRemove(int index) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList find(String[] searchString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to find an item based on their description."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param searchStrings an array of string to be search for within the description of an item"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param il the item list that will hold the items that contain the string within its description"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list that was given with the found items added"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected VisualizeList find(String[] searchStrings, VisualizeList il) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (String searchString : searchStrings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (Item i : list) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (il.contains(i)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (i.getItemDescription().getDescription().toLowerCase().contains(searchString.toLowerCase())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    il.add(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    System.out.println(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return il;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList deepCopy();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Helper function to return a deep copy of the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param vl the list to be returned"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    protected VisualizeList deepCopy(VisualizeList vl) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item i : list) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vl.add(i.deepCopy());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                // not supposed to happen"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return vl;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int indexOf(Item item) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.indexOf(item);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item setItem(int index, Item item) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.set(index, item);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the item at the index within the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index the index of the item within the list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item that has that index in the list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Item get(int index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * The size of the list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the integer value of the size of the list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (!(other instanceof VisualizeList)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VisualizeList otherIl \u003d (VisualizeList) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return this.list.equals(otherIl.list);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Sorts the items in the list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the item list in the sorted order"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public abstract VisualizeList sort();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lrchema"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 18,
      "sianghwee": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 4,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(\"Operation would result in duplicate items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ItemListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents a storage for ELISA."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface ItemListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void saveItemStorage(ItemStorage itemStorage) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #saveItemStorage(ItemStorage itemStorage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    ItemStorage toModelType() throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonItemStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * A class that contains all the JSON representation of the string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class JsonItemStorage implements ItemListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Items list contains duplicate items\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItemStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Path itemListFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public JsonItemStorage (Path path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemListFilePath \u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.itemListFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        saveItemStorage(itemStorage, itemListFilePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Saves the given {@link ItemStorage} to the storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param itemStorage cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param filePath the path of the save file. Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(itemStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        FileUtil.writeToFile(filePath, itemStorage.toJson());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts this JSON item storage into the model\u0027s storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ItemStorage with all the items"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws IOException if there are any problem with reading from the string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage toModelType() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String jsonString \u003d FileUtil.readFromFile(itemListFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return ItemStorage.fromJson(jsonString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            logger.info(\"Data from save file corrupted.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface Storage extends ItemListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    Path getItemListFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemListStorage itemListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public StorageManager(ItemListStorage itemListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.itemListStorage \u003d itemListStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Path getItemListFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemListStorage.getItemListFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        saveItemStorage(itemStorage, itemListStorage.getItemListFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        itemListStorage.saveItemStorage(itemStorage, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemStorage toModelType() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemListStorage.toModelType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 12,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * The calendar panel for Elisa"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Label monthAndYear;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a calendar panel base on the current date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param visualList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CalendarPanel(ObservableList\u003cItem\u003e visualList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        monthAndYear.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.month \u003d currentTime.getMonthValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.year \u003d currentTime.getYear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        monthAndYear.setText(String.format(\"%s, %s\", Month.of(month), String.valueOf(year)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        initializeCalendarGrid();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        loadData(visualList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void initializeCalendarGrid() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        generateHeader();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        generateDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Load the events from the visualization list to the calendar."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param visualList the list containing all the data to be loaded from."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void loadData(ObservableList\u003cItem\u003e visualList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cItem\u003e eventList \u003d visualList.filtered(x -\u003e x.hasEvent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cItem\u003e monthEvent \u003d eventList.filtered(x -\u003e x.getEvent()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                .get().getStartDateTime().getMonthValue() \u003d\u003d month);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Item item : monthEvent) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Label lbl \u003d new Label();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            lbl.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            lbl.setStyle(\"-fx-background-color: #eff516\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            int date \u003d item.getEvent().get().getStartDateTime().getDayOfMonth();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(date));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (node instanceof VBox) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                VBox vPane \u003d (VBox) node;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Generates the header of the calendar"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void generateHeader() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            GridPane.setVgrow(vPane, Priority.NEVER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Label day \u003d new Label();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            day.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            day.setText(DayOfWeek.of(i + 1).toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getChildren().add(day);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarGrid.add(vPane, i, 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Generates the date on the calendar base on the current month."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void generateDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        LocalDateTime startOfMonth \u003d LocalDateTime.of(year, month, 1, 0, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int firstDay \u003d startOfMonth.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int daysInMonth \u003d startOfMonth.getMonth().maxLength();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (year % 4 !\u003d 0 \u0026\u0026 (startOfMonth.getMonth() \u003d\u003d Month.FEBRUARY)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            daysInMonth \u003d 28;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        double height \u003d calendarGrid.getHeight();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        double maxHeight \u003d height / 7;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int offset \u003d firstDay - 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int lblCount \u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            GridPane.setVgrow(vPane, Priority.ALWAYS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (i \u003c offset) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.setStyle(\"-fx-background-color: #E9F2F5\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.setId(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Label lbl \u003d new Label(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lbl.setStyle(\"-fx-text-fill:darkslategray\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                lblCount++;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            calendarGrid.add(vPane, i, 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (int i \u003d 2; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                VBox vPane \u003d new VBox();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                vPane.getStyleClass().add(\"calendar_pane\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                GridPane.setVgrow(vPane, Priority.ALWAYS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                if (lblCount \u003c\u003d daysInMonth) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.setId(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    Label lbl \u003d new Label(Integer.toString(lblCount));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lbl.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lbl.setStyle(\"-fx-text-fill:darkslategray\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.getChildren().add(lbl);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    lblCount++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                    vPane.setStyle(\"-fx-background-color: #E9F2F5\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                calendarGrid.add(vPane, j, i);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ElisaDialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "class ElisaDialogBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ElisaDialogBox(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ElisaDialogBox.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialog.setText(text); }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    static ElisaDialogBox getElisaDialog(String text) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new ElisaDialogBox(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class EventListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label startdate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label enddate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public EventListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority.setText(\"Priority: \" + item.getPriority().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        startdate.setText(\"Start Date: \" + item.getEvent().get().getStartDateTime().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        enddate.setText(\"End Date: \" + item.getEvent().get().getEndDateTime().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        EventListCard card \u003d (EventListCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "Icesiolz": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e eventListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public EventListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d eventListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class EventListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasEvent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new EventListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ItemListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ItemCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        name.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //person.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //       .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        //        .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemCard card \u003d (ItemCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 15,
      "-": 56,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e itemListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ItemListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemListView.scrollTo(itemList.size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blimyj"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.DownCommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.logic.commands.UpCommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.item.CalendarList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.item.EventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.item.ReminderList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.item.TaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.model.item.VisualizeList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lrchema"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane eventListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private StackPane calendarPanelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private TabPane viewsPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        //Listen to changes in tab selection"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        viewsPlaceholder.getSelectionModel().selectedItemProperty().addListener("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                new ChangeListener\u003cTab\u003e() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    public void changed(ObservableValue\u003c? extends Tab\u003e ov, Tab t, Tab t1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            logic.getModel().setVisualList(t1.getId());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                            updatePanels();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        } catch (ParseException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        updatePanels();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //Get property.addListener"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        logic.getActiveRemindersListProperty().addListener(new ListChangeListener\u003cItem\u003e() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            public void onChanged(Change\u003c? extends Item\u003e c) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                System.out.println(\"Change Detected\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                while (c.next()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    for (Item newItem : c.getAddedSubList()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                            resultDisplay.setFeedbackToUser(newItem.getReminderMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //to listen for change in active"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //while !active.isEmpty()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        //resultDisplay.setFeedbackToUser(property.popReminder.getReminderMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Switches the view."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void handleSwitchView(VisualizeList list) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (list instanceof TaskList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof EventList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof ReminderList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else if (list instanceof CalendarList) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            viewsPlaceholder.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls the target pane up"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param pane"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void scrollUp(String pane) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(pane) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"resultDisplay\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.scrollUp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"tabPane\":"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            eventListPanel.scrollUp();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            taskListPanel.scrollUp();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            reminderListPanel.scrollUp();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls the target pane down"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @param pane"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private void scrollDown(String pane) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        switch(pane) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"resultDisplay\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.scrollDown();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        case \"tabPane\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            eventListPanel.scrollDown();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            taskListPanel.scrollDown();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            reminderListPanel.scrollDown();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Updates the panels to display the correct list of item."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void updatePanels() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getVisualList());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        calendarPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public EventListPanel getEventListPanel() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return reminderListPanel;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            resultDisplay.setMessageFromUser(commandText);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (!(commandResult instanceof UpCommandResult) \u0026\u0026 !(commandResult instanceof DownCommandResult)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            handleSwitchView(logic.getVisualList());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof UpCommandResult) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scrollUp(commandResult.getPane());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (commandResult instanceof DownCommandResult) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                scrollDown(commandResult.getPane());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            updatePanels();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 20,
      "lrchema": 6,
      "sianghwee": 15,
      "mannggoo": 1,
      "-": 126,
      "Icesiolz": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ListView\u003cItem\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PersonListPanel(ObservableList\u003cItem\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code ItemCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 9,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ReminderListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label reminderdatetime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ReminderListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderdatetime.setText(\"Reminder: \" + item.getReminder().get().getDateTime().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        ReminderListCard card \u003d (ReminderListCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e reminderListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d reminderListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasReminder()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new ReminderListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        reminderListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                ElisaDialogBox.getElisaDialog(feedbackToUser)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void setMessageFromUser(String messageFromUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        requireNonNull(messageFromUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                UserDialogBox.getUserDialog(messageFromUser)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        scrollPane.setVvalue(scrollPane.getVvalue() + 5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        System.out.println(scrollPane.getVvalue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "Icesiolz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class TaskListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label completed;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        description.setText(item.getItemDescription().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority.setText(\"Priority: \" + item.getPriority().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        completed.setText(\"Complete: \" + item.getTask().get().isComplete().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        TaskListCard card \u003d (TaskListCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 1,
      "Icesiolz": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //We decided to set the number of items to scroll to 5 because that is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    //the number of items displayed in the minimum window size."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final int NUM_OF_ITEMS_TO_SCROLL \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int currentPosition;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static int itemSize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private ListView\u003cItem\u003e taskListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public TaskListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.setItems(itemList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        itemSize \u003d taskListView.getItems().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(itemSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            if (empty || item \u003d\u003d null || !item.hasTask()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                setGraphic(new TaskListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls up."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition - NUM_OF_ITEMS_TO_SCROLL \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     * Scrolls down."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    public void scrollDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        if (currentPosition + NUM_OF_ITEMS_TO_SCROLL \u003e\u003d itemSize) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d itemSize - NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            currentPosition \u003d currentPosition + NUM_OF_ITEMS_TO_SCROLL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        taskListView.scrollTo(currentPosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ElisaIcon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UserDialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " * This class is the Ui for UserDialogBox"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "class UserDialogBox extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    private UserDialogBox(String text) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    static UserDialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        return new UserDialogBox(text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"anchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cLabel fx:id\u003d\"monthAndYear\" layoutX\u003d\"426.0\" layoutY\u003d\"47.0\" prefHeight\u003d\"37.0\" prefWidth\u003d\"700.0\" text\u003d\"test\" textFill\u003d\"WHITE\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendarGrid\" layoutY\u003d\"117.0\" AnchorPane.bottomAnchor\u003d\"20.0\" AnchorPane.leftAnchor\u003d\"40.0\" AnchorPane.rightAnchor\u003d\"40.0\" AnchorPane.topAnchor\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 38
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ".calendar_pane {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-background-color:  white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-style: dashed;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-width: .5;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    -fx-border-color: gray;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7,
      "-": 345
    }
  },
  {
    "path": "src/main/resources/view/ElisaDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_LEFT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: rgba(29,146,255,0.85); -fx-background-radius: 20,20,20,20;\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"startdate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startdate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"enddate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$enddate\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 36
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/ItemListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 36
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"314.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ELISA\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cImage url\u003d\"@/images/ElisaImageWithoutWords.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cPane maxHeight\u003d\"110.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"110.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"110.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cImageView fitHeight\u003d\"80.0\" fitWidth\u003d\"90.0\" layoutX\u003d\"12.0\" layoutY\u003d\"9.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/ElisaImageWithoutWords.png\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cText fill\u003d\"#8de7fd\" layoutX\u003d\"80.0\" layoutY\u003d\"65.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Exceptionally Loud n\u0027 Intelligent\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cFont name\u003d\"Titan One\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cText fill\u003d\"#10b3d7\" layoutX\u003d\"80.0\" layoutY\u003d\"45.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"ELISA\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cFont name\u003d\"Titan One\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cText fill\u003d\"#8de7fd\" layoutX\u003d\"80.0\" layoutY\u003d\"80.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Student Assistant \"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cFont name\u003d\"Titan One\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/Text\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/Pane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" layoutY\u003d\"110.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"440.0\" minWidth\u003d\"300.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"110.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" layoutY\u003d\"550.0\" maxHeight\u003d\"50.0\" maxWidth\u003d\"300.0\" minHeight\u003d\"50.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"300.0\" layoutY\u003d\"-1.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"300.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cStackPane styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003cTabPane fx:id\u003d\"viewsPlaceholder\" style\u003d\"-fx-background-color: #383838;\" stylesheets\u003d\"@tabpane.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"T\" text\u003d\"(T)ask\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"E\" text\u003d\"(E)vent\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"R\" text\u003d\"(R)eminder\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"0.8000000000000682\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"-1.6000000000000227\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cTab fx:id\u003d\"C\" text\u003d\"(C)alendar\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" prefHeight\u003d\"550.0\" prefWidth\u003d\"578.0\" AnchorPane.bottomAnchor\u003d\"23.200000000000045\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"19.200000000000045\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                            \u003c/content\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "Icesiolz": 102
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"reminderdatetime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reminderdatetime\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 34
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "           styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "  \u003cScrollPane fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              prefHeight\u003d\"392.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              prefWidth\u003d\"435.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "              vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  prefHeight\u003d\"441.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  prefWidth\u003d\"507.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                  style\u003d\"-fx-background-color:#383838 \" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Icesiolz": 24
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cLabel fx:id\u003d\"completed\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$completed\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 35
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 8
    }
  },
  {
    "path": "src/main/resources/view/UserDialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"280\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: rgba(255,255,255,0.85); -fx-background-radius: 20,20,20,20;\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003c/javafx.scene.layout.HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 31
    }
  },
  {
    "path": "src/main/resources/view/tabpane.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-tab-min-width:90px;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "    -fx-text-fill: #96b946;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Icesiolz": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ElisaCommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ElisaCommandHistoryManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lrchema"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.storage.JsonItemStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage jsonItemStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                new JsonItemStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jsonItemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        ElisaCommandHistory historyManager \u003d new ElisaCommandHistoryManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        model \u003d new ItemModelManager(storage.toModelType(), userPrefsStorage.readUserPrefs().get(), historyManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage jsonItemStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                new JsonItemStorageIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ItemModel)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lrchema"
        },
        "content": "        ItemModel expectedModel \u003d new ItemModelManager(model.getItemStorage(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lrchema"
        },
        "content": "                new UserPrefs(), model.getElisaCommandHistory());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lrchema"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                                      String expectedMessage, ItemModel expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static class JsonItemStorageIoExceptionThrowingStub extends JsonItemStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        private JsonItemStorageIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        public void saveItemStorage(ItemStorage itemStorage, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lrchema": 14,
      "sianghwee": 17,
      "mannggoo": 3,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        model \u003d new ItemModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item validItem \u003d new TestItemBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemModel expectedModel \u003d new ItemModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        expectedModel.addItem(validItem);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assertCommandSuccess(new AddCommand(validItem), model,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validItem), expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Can\u0027t test for this yet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 11,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "//import seedu.address.model.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //SHOULD BE --\u003e private class ModelStub implements ItemModel {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Currently I just put this so that i don\u0027t have to implement all the methods in ItemModel."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private class ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        //@Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        public void updateViewList(String targetList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 22,
      "-": 168,
      "Icesiolz": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.testutil.EditItemDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DESCRIPTION_1 \u003d \"homework\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DESCRIPTION_2 \u003d \"do all my homework\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_EVENT_1 \u003d \"2018-12-30T19:34:50.63\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_EVENT_2 \u003d \"2018-12-30T19:34\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_REMINDER_1 \u003d \"2018-12-30T19:34:50.63\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_REMINDER_2 \u003d \"2018-12-30T19:34\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_HIGH \u003d \"hIgH\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_MEDIUM \u003d \"mEDIUM\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_PRIORITY_LOW \u003d \"low\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_TAG_1 \u003d \"necessary\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_TAG_2 \u003d \"123necessary\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String VALID_DURATION_NULL \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DESCRIPTION_DESC_1 \u003d VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DESCRIPTION_DESC_2 \u003d VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_DESC_1 \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String EVENT_DESC_2 \u003d \" \" + PREFIX_DATETIME + VALID_EVENT_2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_DESC_1 \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER_1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String REMINDER_DESC_2 \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER_2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_HIGH \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_MEDIUM \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MEDIUM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PRIORITY_DESC_LOW \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TAG_DESC_1 \u003d \" \" + PREFIX_TAG + VALID_TAG_1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String TAG_DESC_2 \u003d \" \" + PREFIX_TAG + VALID_TAG_2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_EVENT_DESC \u003d \"monday\"; // must be of the LocalDateTime.parse() format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_REMINDER_DESC \u003d \"01/02/2018\"; // must be of the LocalDateTime.parse() format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \"very very high\"; // must be a single word high/medium/low"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \"@prepare-ahead\"; // \"@\"/\"-\" symbols not allowed. Only alphanumeric."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"-d  -r  -p  -t \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final EditCommand.EditItemDescriptor ITEM_1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final EditCommand.EditItemDescriptor ITEM_2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ITEM_1 \u003d new EditItemDescriptorBuilder().withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_1, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_1)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ITEM_2 \u003d new EditItemDescriptorBuilder().withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_2, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItemModel actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            ItemModel expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ItemModel, CommandResult, ItemModel)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandSuccess(Command command, ItemModel actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            ItemModel expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static void assertCommandFailure(Command command, ItemModel actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage expectedAddressBook \u003d actualModel.getItemStorage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        List\u003cItem\u003e expectedVisualList \u003d new ArrayList\u003c\u003e(actualModel.getVisualList().getList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getItemStorage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        assertEquals(expectedVisualList, actualModel.getVisualList().getList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 4,
      "mannggoo": 54,
      "sianghwee": 3,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private ItemModel model \u003d new ItemModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Updates {@code model}\u0027s filtered list to show no one"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 6,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     //Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     //but smaller than size of address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 7,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 7,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.ItemModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemModel expectedModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 6,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Icesiolz"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_COMMAND_FORMAT, ()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 66,
      "Icesiolz": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    //and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Also covers: Reusing of the tokenizer multiple times"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        // Also covers: testing for prefixes not specified as a prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 8,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        differentUserPrefs.setItemStorageFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "sianghwee": 3,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setItemStorageFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mannggoo": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userPrefs.setItemStorageFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        JsonItemStorage itemStorage \u003d new JsonItemStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storageManager \u003d new StorageManager(itemStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void itemStorageReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage original \u003d new ItemStorage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storageManager.saveItemStorage(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage retrieved \u003d storageManager.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertNotNull(storageManager.getItemListFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 10,
      "mannggoo": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditItemDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class EditItemDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private EditItemDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder(EditItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.descriptor \u003d new EditItemDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder(Item item) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setDescription(item.getItemDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTask(item.getTask().orElse(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setEvent(item.getEvent().orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setReminder(item.getReminder().orElse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTags(item.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setDescription(new ItemDescription(description));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withTask(boolean complete) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        descriptor.setTask(new Task(complete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withEvent(String start, String duration) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Event processedEvent \u003d getEvent(start, duration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setEvent(processedEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder processedReminder \u003d getReminder(dateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setReminder(processedReminder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the {@code priority} into a {@code priority} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public EditItemDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        Priority newPriority \u003d Priority.valueOf(priority);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        descriptor.setPriority(newPriority);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public EditItemDescriptor build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Priority getPriority(String p) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Priority priority \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(p).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as priority given is valid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Event getEvent(String start, String duration) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            event \u003d ParserUtil.parseDateTime(start).get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as start format should be valid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Leave empty as of now, currently we don\u0027t deal with parsing duration"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //event \u003d event.changeDuration(Duration.of(...) );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder getReminder(String itemReminder) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reminder \u003d ParserUtil.parseReminder(itemReminder).get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Should not enter here as itemReminder format should be valid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 15,
      "mannggoo": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestItemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item.ItemBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.ItemDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class to help with building Item objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class TestItemBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Do 2103T Quiz\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_EVENT \u003d \"2019-09-26T23:59\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_REMINDER \u003d \"2019-09-25T23:59\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"HIGH\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final String DEFAULT_EVENT_DURATION \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private ItemDescription description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Priority priority; // priority of the Item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description \u003d new ItemDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority \u003d Priority.valueOf(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        event \u003d processEvent(DEFAULT_EVENT, DEFAULT_EVENT_DURATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        reminder \u003d processReminder(DEFAULT_REMINDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Initializes the TestItemBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder(Item itemToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        description \u003d itemToCopy.getItemDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        priority \u003d itemToCopy.getPriority();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        event \u003d itemToCopy.getEvent().orElse(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        reminder \u003d itemToCopy.getReminder().orElse(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(itemToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code desc} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.description \u003d new ItemDescription(desc);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     * Parses the {@code priority} into a {@code Priority} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blimyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public TestItemBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.priority \u003d Priority.valueOf(priority);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blimyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Item} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code itemEvent} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    public TestItemBuilder withEvent(String itemEvent, String duration) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        this.event \u003d processEvent(itemEvent, duration);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Sets the {@code itemReminder} of the {@code Item} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public TestItemBuilder withReminder(String itemReminder) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        this.reminder \u003d processReminder(itemReminder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Builds a new Item object with the given descriptions"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Item with the given descriptors"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public Item build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        ItemBuilder itemBuilder \u003d new ItemBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blimyj"
        },
        "content": "        itemBuilder.setItemPriority(priority);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setItemDescription(description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setEvent(event);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setReminder(reminder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        itemBuilder.setTags(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Item newItem \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            newItem \u003d itemBuilder.build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            // Should not enter here as all the arguments are valid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return newItem;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes a {@code datetime}, a {@code duration} and a {@code itemPriority} to generate an appropriate Event."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param datetime start DateTime of this Event"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param duration of this Event"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Event with the given parameters"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blimyj"
        },
        "content": "    private Event processEvent(String datetime, String duration) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Event event \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            event \u003d ParserUtil.parseDateTime(datetime).get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            // should not enter here as DEFAULT_EVENT are of the correct format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * Processes the {@code itemReminder} given to generate an appropriate Reminder with the dateTime given."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @param itemReminder representing the DateTime of the reminder"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     * @return a new Reminder with the given date and time"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private Reminder processReminder(String itemReminder) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        Reminder reminder \u003d null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            reminder \u003d ParserUtil.parseReminder(itemReminder).get();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            //should not enter here as DEFAULT_REMINDER is of the correct format"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 17,
      "mannggoo": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_NULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "import seedu.address.commons.core.item.Item;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import seedu.address.model.ItemStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " * A utility class containing a list of {@code Item} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mannggoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "public class TypicalItems {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item HOMEWORK \u003d new TestItemBuilder().withDescription(\"Do all homework\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(\"2018-12-30T19:34:50.63\", null)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(\"2018-12-29T19:34:50.63\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item EXAM \u003d new TestItemBuilder().withDescription(\"Final Exam\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(\"2019-10-30T12:00\", null)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(\"2019-10-29T12:00\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    // Manually added - Item\u0027s detail found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item ITEM_1 \u003d new TestItemBuilder().withDescription(VALID_DESCRIPTION_1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blimyj"
        },
        "content": "                .withEvent(VALID_EVENT_1, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withReminder(VALID_REMINDER_1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "                .withTags(VALID_TAG_1).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static final Item ITEM_2 \u003d new TestItemBuilder().withDescription(VALID_DESCRIPTION_2)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blimyj"
        },
        "content": "            .withEvent(VALID_EVENT_2, VALID_DURATION_NULL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withReminder(VALID_REMINDER_2)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "            .withTags(VALID_TAG_2).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    private TypicalItems() {} //prevents instantiation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns an {@code ItemStorage} with all the typical persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static ItemStorage getTypicalItemList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ItemStorage itemStorage \u003d new ItemStorage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        for (Item item : getTypicalItems()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            itemStorage.add(item);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return itemStorage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mannggoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    public static List\u003cItem\u003e getTypicalItems() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HOMEWORK, EXAM));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mannggoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blimyj": 6,
      "mannggoo": 55,
      "sianghwee": 7
    }
  }
]
